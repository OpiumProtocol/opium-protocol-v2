{
  "address": "0x06d58321Ee68ab56e8A2e60c51F6E691C15e81d9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21a9cc178c9dd4c09cd3a791587fe9b993a32c2dadf959213e4a537048713f83",
  "receipt": {
    "to": null,
    "from": "0x4497C837663970d9B9fC274342D15be1A2f96D1D",
    "contractAddress": "0x06d58321Ee68ab56e8A2e60c51F6E691C15e81d9",
    "transactionIndex": 1,
    "gasUsed": "403530",
    "logsBloom": "0x
    "blockHash": "0xab9ea776c66597cdfe1ed37cf8b2d0ca60fbeca502c3ab077f0467ae95b11c87",
    "transactionHash": "0x21a9cc178c9dd4c09cd3a791587fe9b993a32c2dadf959213e4a537048713f83",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 20497331,
        "transactionHash": "0x21a9cc178c9dd4c09cd3a791587fe9b993a32c2dadf959213e4a537048713f83",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004497c837663970d9b9fc274342d15be1a2f96d1d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000044d0672eb2c0000000000000000000000000000000000000000000000000045197462dd1bd6000000000000000000000000000000000000000000000001ad17c553f0391ca3da0000000000000000000000000000000000000000000000004515275c6a30aa000000000000000000000000000000000000000000000001ad17c9a0f6ac07cfda",
        "logIndex": 1,
        "blockHash": "0xab9ea776c66597cdfe1ed37cf8b2d0ca60fbeca502c3ab077f0467ae95b11c87"
      }
    ],
    "blockNumber": 20497331,
    "cumulativeGasUsed": "425154",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "658042053585c715e56757d0a4fb45c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimTokens(address,address,address,uint256)\":{\"params\":{\"amount\":\"uint256 Amount of tokens to be transferred\",\"from\":\"address Address from which tokens are transferred\",\"to\":\"address Address of tokens receiver\",\"token\":\"IERC20 Instance of token\"}},\"initialize(address)\":{\"params\":{\"_registry\":\"address Address of governor, who is allowed to adjust whitelist\"}}},\"title\":\"Opium.TokenSpender contract holds users ERC20 approvals and allows whitelisted contracts to use tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimTokens(address,address,address,uint256)\":{\"notice\":\"Using this function whitelisted contracts could call ERC20 transfers\"},\"initialize(address)\":{\"notice\":\"Calls constructors of super-contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenSpender.sol\":\"TokenSpender\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"contracts/Interface/IOpiumProxyFactory.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\ninterface IOpiumProxyFactory {\\n    function getImplementationAddress() external view returns (address);\\n\\n    function create(\\n        address _buyer,\\n        address _seller,\\n        uint256 _amount,\\n        bytes32 _derivativeHash,\\n        LibDerivative.Derivative calldata _derivative\\n    ) external;\\n\\n    function mintPair(\\n        address _buyer,\\n        address _seller,\\n        address _longPositionAddress,\\n        address _shortPositionAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function burnPair(\\n        address _tokenOwner,\\n        address _longToken,\\n        address _shortToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        address _tokenOwner,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb5cd1d493bda48bb8974196c7dc77c1f67b334adee59020d252907808ddce74\"},\"contracts/Interface/IOracleAggregator.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\ninterface IOracleAggregator {\\n    function __callback(uint256 timestamp, uint256 data) external;\\n\\n    function getData(address oracleId, uint256 timestamp) external view returns (uint256 dataResult);\\n\\n    function hasData(address oracleId, uint256 timestamp) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf7c9726dd6474c8c52bebc84aee87e000514a26bd19d74786b86df981664cdd5\"},\"contracts/Interface/IRegistry.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Registry/RegistryEntities.sol\\\";\\n\\ninterface IRegistry {\\n    function getCore() external view returns (address);\\n\\n    function getOracleAggregator() external view returns (address);\\n\\n    function isWhitelisted(address _address) external view returns (bool);\\n\\n    function getProtocolAddresses() external view returns (RegistryEntities.ProtocolAddressesArgs memory);\\n\\n    function getProtocolCommissionParams() external view returns (RegistryEntities.ProtocolCommissionArgs memory);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa736815379121444933331bd9233c01194e1ce49b0aff1a401c606a0f1a0657d\"},\"contracts/Interface/ISyntheticAggregator.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\ninterface ISyntheticAggregator {\\n    struct SyntheticCache {\\n        uint256 buyerMargin;\\n        uint256 sellerMargin;\\n        uint256 commission; // rename it to author commission for clarity\\n        address authorAddress;\\n        bool init;\\n        // SyntheticTypes typeByHash;\\n    }\\n\\n    function getSyntheticCache(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (SyntheticCache memory);\\n\\n    function getMargin(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (uint256 buyerMargin, uint256 sellerMargin);\\n}\\n\",\"keccak256\":\"0x0dc6de045cb931209ed9e629be93b919634b241b8785726788dfe1fdcfa9d114\"},\"contracts/Interface/ITokenSpender.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITokenSpender {\\n    function claimTokens(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x28849197d4a2ac4ce19a2b9a01ba9cf3f9d83462e827b8588e96e104ce686298\"},\"contracts/Lib/LibDerivative.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\n/// @title Opium.Lib.LibDerivative contract should be inherited by contracts that use Derivative structure and calculate derivativeHash\\nlibrary LibDerivative {\\n    enum PositionType {\\n        SHORT,\\n        LONG\\n    }\\n    \\n    // Opium derivative structure (ticker) definition\\n    struct Derivative {\\n        // Margin parameter for syntheticId\\n        uint256 margin;\\n        // Maturity of derivative\\n        uint256 endTime;\\n        // Additional parameters for syntheticId\\n        uint256[] params;\\n        // oracleId of derivative\\n        address oracleId;\\n        // Margin token address of derivative\\n        address token;\\n        // syntheticId of derivative\\n        address syntheticId;\\n    }\\n\\n    /// @notice Calculates hash of provided Derivative\\n    /// @param _derivative Derivative Instance of derivative to hash\\n    /// @return derivativeHash bytes32 Derivative hash\\n    function getDerivativeHash(Derivative memory _derivative) internal pure returns (bytes32 derivativeHash) {\\n        derivativeHash = keccak256(abi.encodePacked(\\n            _derivative.margin,\\n            _derivative.endTime,\\n            _derivative.params,\\n            _derivative.oracleId,\\n            _derivative.token,\\n            _derivative.syntheticId\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x9c8656fb850636580a40cebb4c7b564a76d09ee43ad5ee564b5e59235f5eccfa\"},\"contracts/Registry/RegistryEntities.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"../Interface/IOpiumProxyFactory.sol\\\";\\nimport \\\"../Interface/ISyntheticAggregator.sol\\\";\\nimport \\\"../Interface/IOracleAggregator.sol\\\";\\nimport \\\"../Interface/ITokenSpender.sol\\\";\\n\\nlibrary RegistryEntities {\\n    struct ProtocolCommissionArgs {\\n        // Represents 100% base for commissions calculation\\n        uint32 derivativeAuthorCommissionBase;\\n        // Period of time after which ticker could be canceled if no data was provided to the `oracleId`\\n        uint32 noDataCancellationPeriod;\\n        // Represents 100% base for Opium commission\\n        uint8 protocolFeeCommissionBase;\\n        // Represents which part of `syntheticId` author commissions goes to opium\\n        uint8 protocolCommissionPart;\\n        // scaling factor\\n        uint8 precisionFactor;\\n        bool paused;\\n    }\\n\\n    struct ProtocolAddressesArgs {\\n        // Address of Opium.Core contract\\n        address core;\\n        // Address of Opium.OpiumProxyFactory contract\\n        IOpiumProxyFactory opiumProxyFactory;\\n        // Address of Opium.OracleAggregator contract\\n        IOracleAggregator oracleAggregator;\\n        // Address of Opium.SyntheticAggregator contract\\n        ISyntheticAggregator syntheticAggregator;\\n        // Address of Opium.TokenSpender contract\\n        ITokenSpender tokenSpender;\\n        // Address of protocol commission receiver\\n        address protocolFeeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x5c842f2678e0ab1c8e19ff0e097572984bd56658de6bfeb9d387623bbe35c3ae\"},\"contracts/TokenSpender.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./Interface/IRegistry.sol\\\";\\n\\n/// @title Opium.TokenSpender contract holds users ERC20 approvals and allows whitelisted contracts to use tokens\\ncontract TokenSpender is Initializable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    IRegistry private registry;\\n\\n    modifier onlyCoreSpenders() {\\n        require(registry.isWhitelisted(msg.sender), \\\"U2\\\"); // not whitelisted\\n        _;\\n    }\\n\\n    /// @notice Calls constructors of super-contracts\\n    /// @param _registry address Address of governor, who is allowed to adjust whitelist\\n    function initialize(address _registry) external initializer {\\n        registry = IRegistry(_registry);\\n    }\\n\\n    /// @notice Using this function whitelisted contracts could call ERC20 transfers\\n    /// @param token IERC20 Instance of token\\n    /// @param from address Address from which tokens are transferred\\n    /// @param to address Address of tokens receiver\\n    /// @param amount uint256 Amount of tokens to be transferred\\n    function claimTokens(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external onlyCoreSpenders {\\n        token.safeTransferFrom(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x16be6f4e74489b3c3fc61caff95ac08627a1e6f1cd2e76abc971c309b30d61bc\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061065b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630a5ea4661461003b578063c4d66de814610050575b600080fd5b61004e610049366004610541565b610063565b005b61004e61005e366004610502565b610134565b600054604051633af32abf60e01b8152336004820152620100009091046001600160a01b031690633af32abf9060240160206040518083038186803b1580156100ab57600080fd5b505afa1580156100bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e3919061051f565b6101195760405162461bcd60e51b81526020600482015260026024820152612a9960f11b60448201526064015b60405180910390fd5b61012e6001600160a01b03851684848461022f565b50505050565b600054610100900460ff168061014d575060005460ff16155b6101bf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610110565b600054610100900460ff161580156101e1576000805461ffff19166101011790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b03851602179055801561022b576000805461ff00191690555b5050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261012e928792916000916102dc918516908490610371565b80519091501561036c57808060200190518101906102fa919061051f565b61036c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610110565b505050565b6060610380848460008561038a565b90505b9392505050565b6060824710156104025760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610110565b843b6104505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610110565b600080866001600160a01b0316858760405161046c9190610592565b60006040518083038185875af1925050503d80600081146104a9576040519150601f19603f3d011682016040523d82523d6000602084013e6104ae565b606091505b50915091506104be8282866104c9565b979650505050505050565b606083156104d8575081610383565b8251156104e85782518084602001fd5b8160405162461bcd60e51b815260040161011091906105ae565b60006020828403121561051457600080fd5b81356103838161060d565b60006020828403121561053157600080fd5b8151801515811461038357600080fd5b6000806000806080858703121561055757600080fd5b84356105628161060d565b935060208501356105728161060d565b925060408501356105828161060d565b9396929550929360600135925050565b600082516105a48184602087016105e1565b9190910192915050565b60208152600082518060208401526105cd8160408501602087016105e1565b601f01601f19169190910160400192915050565b60005b838110156105fc5781810151838201526020016105e4565b8381111561012e5750506000910152565b6001600160a01b038116811461062257600080fd5b5056fea2646970667358221220b0047e9768456c83682b87f3cb8d4c185a2493ec76a94dcbdae9196bbce81c5564736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80630a5ea4661461003b578063c4d66de814610050575b600080fd5b61004e610049366004610541565b610063565b005b61004e61005e366004610502565b610134565b600054604051633af32abf60e01b8152336004820152620100009091046001600160a01b031690633af32abf9060240160206040518083038186803b1580156100ab57600080fd5b505afa1580156100bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e3919061051f565b6101195760405162461bcd60e51b81526020600482015260026024820152612a9960f11b60448201526064015b60405180910390fd5b61012e6001600160a01b03851684848461022f565b50505050565b600054610100900460ff168061014d575060005460ff16155b6101bf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610110565b600054610100900460ff161580156101e1576000805461ffff19166101011790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b03851602179055801561022b576000805461ff00191690555b5050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261012e928792916000916102dc918516908490610371565b80519091501561036c57808060200190518101906102fa919061051f565b61036c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610110565b505050565b6060610380848460008561038a565b90505b9392505050565b6060824710156104025760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610110565b843b6104505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610110565b600080866001600160a01b0316858760405161046c9190610592565b60006040518083038185875af1925050503d80600081146104a9576040519150601f19603f3d011682016040523d82523d6000602084013e6104ae565b606091505b50915091506104be8282866104c9565b979650505050505050565b606083156104d8575081610383565b8251156104e85782518084602001fd5b8160405162461bcd60e51b815260040161011091906105ae565b60006020828403121561051457600080fd5b81356103838161060d565b60006020828403121561053157600080fd5b8151801515811461038357600080fd5b6000806000806080858703121561055757600080fd5b84356105628161060d565b935060208501356105728161060d565b925060408501356105828161060d565b9396929550929360600135925050565b600082516105a48184602087016105e1565b9190910192915050565b60208152600082518060208401526105cd8160408501602087016105e1565b601f01601f19169190910160400192915050565b60005b838110156105fc5781810151838201526020016105e4565b8381111561012e5750506000910152565b6001600160a01b038116811461062257600080fd5b5056fea2646970667358221220b0047e9768456c83682b87f3cb8d4c185a2493ec76a94dcbdae9196bbce81c5564736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimTokens(address,address,address,uint256)": {
        "params": {
          "amount": "uint256 Amount of tokens to be transferred",
          "from": "address Address from which tokens are transferred",
          "to": "address Address of tokens receiver",
          "token": "IERC20 Instance of token"
        }
      },
      "initialize(address)": {
        "params": {
          "_registry": "address Address of governor, who is allowed to adjust whitelist"
        }
      }
    },
    "title": "Opium.TokenSpender contract holds users ERC20 approvals and allows whitelisted contracts to use tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimTokens(address,address,address,uint256)": {
        "notice": "Using this function whitelisted contracts could call ERC20 transfers"
      },
      "initialize(address)": {
        "notice": "Calls constructors of super-contracts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/TokenSpender.sol:TokenSpender",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/TokenSpender.sol:TokenSpender",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5889,
        "contract": "contracts/TokenSpender.sol:TokenSpender",
        "label": "registry",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IRegistry)4245"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRegistry)4245": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}
