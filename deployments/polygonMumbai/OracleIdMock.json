{
  "address": "0x7ae878b18b26AFB58A077D46Fd5d5686D37F09dD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fetchPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "MetadataSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "calculateFetchPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "fetchData",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "times",
          "type": "uint256"
        }
      ],
      "name": "recursivelyFetchData",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "returnData",
          "type": "uint256"
        }
      ],
      "name": "triggerCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x597a931b96f2a7332b3aca8defb05780500e2d4b39e2c7868da1dd6b52938176",
  "receipt": {
    "to": null,
    "from": "0x4497C837663970d9B9fC274342D15be1A2f96D1D",
    "contractAddress": "0x7ae878b18b26AFB58A077D46Fd5d5686D37F09dD",
    "transactionIndex": 3,
    "gasUsed": "232802",
    "logsBloom": "0x
    "blockHash": "0x5822ce437a64b17513e4e2452a31ee3699e0e4f48e361332effa39997e1642f9",
    "transactionHash": "0x597a931b96f2a7332b3aca8defb05780500e2d4b39e2c7868da1dd6b52938176",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 20497433,
        "transactionHash": "0x597a931b96f2a7332b3aca8defb05780500e2d4b39e2c7868da1dd6b52938176",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004497c837663970d9b9fc274342d15be1a2f96d1d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000027b325189fc0000000000000000000000000000000000000000000000000044c9f5a847737000000000000000000000000000000000000000000000000000015e63c17143e31000000000000000000000000000000000000000000000000044c77a75f5e974000000000000000000000000000000000000000000000000000160def3c2cddf10",
        "logIndex": 10,
        "blockHash": "0x5822ce437a64b17513e4e2452a31ee3699e0e4f48e361332effa39997e1642f9"
      }
    ],
    "blockNumber": 20497433,
    "cumulativeGasUsed": "1014666",
    "status": 1,
    "byzantium": true
  },
  "args": ["100000000000000000", "0x6bceD2a78E5709Acf1B017b031312369857e0f95"],
  "solcInputHash": "658042053585c715e56757d0a4fb45c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fetchPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MetadataSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calculateFetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"fetchData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"recursivelyFetchData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnData\",\"type\":\"uint256\"}],\"name\":\"triggerCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateFetchPrice()\":{\"returns\":{\"_0\":\"uint256 Price of one data request in ETH\"}},\"fetchData(uint256)\":{\"params\":{\"timestamp\":\"uint256 Timestamp at which data are needed\"}},\"recursivelyFetchData(uint256,uint256,uint256)\":{\"params\":{\"period\":\"uint256 Period in seconds between multiple timestamps\",\"times\":\"uint256 How many timestamps are requested\",\"timestamp\":\"uint256 Timestamp at which data are needed for the first time\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateFetchPrice()\":{\"notice\":\"Requests and returns price in ETH for one request. This function could be called as `view` function. Oraclize API for price calculations restricts making this function as view.\"},\"fetchData(uint256)\":{\"notice\":\"Requests data from `oracleId` one time\"},\"recursivelyFetchData(uint256,uint256,uint256)\":{\"notice\":\"Requests data from `oracleId` multiple times\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/OracleIdMock.sol\":\"OracleIdMock\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"contracts/Interface/IOpiumProxyFactory.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\ninterface IOpiumProxyFactory {\\n    function getImplementationAddress() external view returns (address);\\n\\n    function create(\\n        address _buyer,\\n        address _seller,\\n        uint256 _amount,\\n        bytes32 _derivativeHash,\\n        LibDerivative.Derivative calldata _derivative\\n    ) external;\\n\\n    function mintPair(\\n        address _buyer,\\n        address _seller,\\n        address _longPositionAddress,\\n        address _shortPositionAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function burnPair(\\n        address _tokenOwner,\\n        address _longToken,\\n        address _shortToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        address _tokenOwner,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb5cd1d493bda48bb8974196c7dc77c1f67b334adee59020d252907808ddce74\"},\"contracts/Interface/IOracleAggregator.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\ninterface IOracleAggregator {\\n    function __callback(uint256 timestamp, uint256 data) external;\\n\\n    function getData(address oracleId, uint256 timestamp) external view returns (uint256 dataResult);\\n\\n    function hasData(address oracleId, uint256 timestamp) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf7c9726dd6474c8c52bebc84aee87e000514a26bd19d74786b86df981664cdd5\"},\"contracts/Interface/IOracleId.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\n/// @title Opium.Interface.IOracleId contract is an interface that every oracleId should implement\\ninterface IOracleId {\\n    /// @notice Requests data from `oracleId` one time\\n    /// @param timestamp uint256 Timestamp at which data are needed\\n    function fetchData(uint256 timestamp) external payable;\\n\\n    /// @notice Requests data from `oracleId` multiple times\\n    /// @param timestamp uint256 Timestamp at which data are needed for the first time\\n    /// @param period uint256 Period in seconds between multiple timestamps\\n    /// @param times uint256 How many timestamps are requested\\n    function recursivelyFetchData(\\n        uint256 timestamp,\\n        uint256 period,\\n        uint256 times\\n    ) external payable;\\n\\n    /// @notice Requests and returns price in ETH for one request. This function could be called as `view` function. Oraclize API for price calculations restricts making this function as view.\\n    /// @return fetchPrice uint256 Price of one data request in ETH\\n    function calculateFetchPrice() external returns (uint256 fetchPrice);\\n\\n    // Event with oracleId metadata JSON string (for DIB.ONE derivative explorer)\\n    event MetadataSet(string metadata);\\n}\\n\",\"keccak256\":\"0xd0e3f91e1cf1687fe6eac8952ef751514aff15c15c301b308540a20ec74e02ed\"},\"contracts/Interface/IRegistry.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Registry/RegistryEntities.sol\\\";\\n\\ninterface IRegistry {\\n    function getCore() external view returns (address);\\n\\n    function getOracleAggregator() external view returns (address);\\n\\n    function isWhitelisted(address _address) external view returns (bool);\\n\\n    function getProtocolAddresses() external view returns (RegistryEntities.ProtocolAddressesArgs memory);\\n\\n    function getProtocolCommissionParams() external view returns (RegistryEntities.ProtocolCommissionArgs memory);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa736815379121444933331bd9233c01194e1ce49b0aff1a401c606a0f1a0657d\"},\"contracts/Interface/ISyntheticAggregator.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\ninterface ISyntheticAggregator {\\n    struct SyntheticCache {\\n        uint256 buyerMargin;\\n        uint256 sellerMargin;\\n        uint256 commission; // rename it to author commission for clarity\\n        address authorAddress;\\n        bool init;\\n        // SyntheticTypes typeByHash;\\n    }\\n\\n    function getSyntheticCache(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (SyntheticCache memory);\\n\\n    function getMargin(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (uint256 buyerMargin, uint256 sellerMargin);\\n}\\n\",\"keccak256\":\"0x0dc6de045cb931209ed9e629be93b919634b241b8785726788dfe1fdcfa9d114\"},\"contracts/Interface/ITokenSpender.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITokenSpender {\\n    function claimTokens(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x28849197d4a2ac4ce19a2b9a01ba9cf3f9d83462e827b8588e96e104ce686298\"},\"contracts/Lib/LibDerivative.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\n/// @title Opium.Lib.LibDerivative contract should be inherited by contracts that use Derivative structure and calculate derivativeHash\\nlibrary LibDerivative {\\n    enum PositionType {\\n        SHORT,\\n        LONG\\n    }\\n    \\n    // Opium derivative structure (ticker) definition\\n    struct Derivative {\\n        // Margin parameter for syntheticId\\n        uint256 margin;\\n        // Maturity of derivative\\n        uint256 endTime;\\n        // Additional parameters for syntheticId\\n        uint256[] params;\\n        // oracleId of derivative\\n        address oracleId;\\n        // Margin token address of derivative\\n        address token;\\n        // syntheticId of derivative\\n        address syntheticId;\\n    }\\n\\n    /// @notice Calculates hash of provided Derivative\\n    /// @param _derivative Derivative Instance of derivative to hash\\n    /// @return derivativeHash bytes32 Derivative hash\\n    function getDerivativeHash(Derivative memory _derivative) internal pure returns (bytes32 derivativeHash) {\\n        derivativeHash = keccak256(abi.encodePacked(\\n            _derivative.margin,\\n            _derivative.endTime,\\n            _derivative.params,\\n            _derivative.oracleId,\\n            _derivative.token,\\n            _derivative.syntheticId\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x9c8656fb850636580a40cebb4c7b564a76d09ee43ad5ee564b5e59235f5eccfa\"},\"contracts/Registry/RegistryEntities.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"../Interface/IOpiumProxyFactory.sol\\\";\\nimport \\\"../Interface/ISyntheticAggregator.sol\\\";\\nimport \\\"../Interface/IOracleAggregator.sol\\\";\\nimport \\\"../Interface/ITokenSpender.sol\\\";\\n\\nlibrary RegistryEntities {\\n    struct ProtocolCommissionArgs {\\n        // Represents 100% base for commissions calculation\\n        uint32 derivativeAuthorCommissionBase;\\n        // Period of time after which ticker could be canceled if no data was provided to the `oracleId`\\n        uint32 noDataCancellationPeriod;\\n        // Represents 100% base for Opium commission\\n        uint8 protocolFeeCommissionBase;\\n        // Represents which part of `syntheticId` author commissions goes to opium\\n        uint8 protocolCommissionPart;\\n        // scaling factor\\n        uint8 precisionFactor;\\n        bool paused;\\n    }\\n\\n    struct ProtocolAddressesArgs {\\n        // Address of Opium.Core contract\\n        address core;\\n        // Address of Opium.OpiumProxyFactory contract\\n        IOpiumProxyFactory opiumProxyFactory;\\n        // Address of Opium.OracleAggregator contract\\n        IOracleAggregator oracleAggregator;\\n        // Address of Opium.SyntheticAggregator contract\\n        ISyntheticAggregator syntheticAggregator;\\n        // Address of Opium.TokenSpender contract\\n        ITokenSpender tokenSpender;\\n        // Address of protocol commission receiver\\n        address protocolFeeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x5c842f2678e0ab1c8e19ff0e097572984bd56658de6bfeb9d387623bbe35c3ae\"},\"contracts/test/OracleIdMock.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"../Interface/IOracleId.sol\\\";\\nimport \\\"../Interface/IRegistry.sol\\\";\\nimport \\\"../Interface/IOracleAggregator.sol\\\";\\n\\ncontract OracleIdMock is IOracleId {\\n    uint256 fetchPrice;\\n    IRegistry registry;\\n\\n    constructor(uint256 _fetchPrice, address _registry) {\\n        fetchPrice = _fetchPrice;\\n        registry = IRegistry(_registry);\\n    }\\n\\n    function triggerCallback(uint256 timestamp, uint256 returnData) external {\\n        IOracleAggregator(registry.getOracleAggregator()).__callback(timestamp, returnData);\\n    }\\n\\n    function fetchData(uint256 timestamp) external payable override {}\\n\\n    function recursivelyFetchData(\\n        uint256 timestamp,\\n        uint256 period,\\n        uint256 times\\n    ) external payable override {}\\n\\n    function calculateFetchPrice() external override returns (uint256) {\\n        return fetchPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xb5f6c75cafc46d666fb529e4a6ddda4a35fb76de4b60ae6b29f96f5cb6b90aee\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161030b38038061030b83398101604081905261002f91610059565b600091909155600180546001600160a01b0319166001600160a01b03909216919091179055610096565b6000806040838503121561006c57600080fd5b825160208401519092506001600160a01b038116811461008b57600080fd5b809150509250929050565b610266806100a56000396000f3fe60806040526004361061003f5760003560e01c806316f937b114610044578063760768db146100665780637bc9f04a14610079578063864905ba1461009b575b600080fd5b34801561005057600080fd5b5061006461005f3660046101e2565b6100ac565b005b610064610074366004610204565b505050565b34801561008557600080fd5b5060005460405190815260200160405180910390f35b6100646100a93660046101c9565b50565b600160009054906101000a90046001600160a01b03166001600160a01b031663d34ac2bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100fa57600080fd5b505afa15801561010e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101329190610199565b604051633102e5ab60e01b815260048101849052602481018390526001600160a01b039190911690633102e5ab90604401600060405180830381600087803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b505050505050565b6000602082840312156101ab57600080fd5b81516001600160a01b03811681146101c257600080fd5b9392505050565b6000602082840312156101db57600080fd5b5035919050565b600080604083850312156101f557600080fd5b50508035926020909101359150565b60008060006060848603121561021957600080fd5b50508135936020830135935060409092013591905056fea2646970667358221220f6636817729fa50c38f472adfc3f5ee239d2003e821f5e63ccf4ff5ce8b5e86c64736f6c63430008050033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806316f937b114610044578063760768db146100665780637bc9f04a14610079578063864905ba1461009b575b600080fd5b34801561005057600080fd5b5061006461005f3660046101e2565b6100ac565b005b610064610074366004610204565b505050565b34801561008557600080fd5b5060005460405190815260200160405180910390f35b6100646100a93660046101c9565b50565b600160009054906101000a90046001600160a01b03166001600160a01b031663d34ac2bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100fa57600080fd5b505afa15801561010e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101329190610199565b604051633102e5ab60e01b815260048101849052602481018390526001600160a01b039190911690633102e5ab90604401600060405180830381600087803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b505050505050565b6000602082840312156101ab57600080fd5b81516001600160a01b03811681146101c257600080fd5b9392505050565b6000602082840312156101db57600080fd5b5035919050565b600080604083850312156101f557600080fd5b50508035926020909101359150565b60008060006060848603121561021957600080fd5b50508135936020830135935060409092013591905056fea2646970667358221220f6636817729fa50c38f472adfc3f5ee239d2003e821f5e63ccf4ff5ce8b5e86c64736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateFetchPrice()": {
        "returns": {
          "_0": "uint256 Price of one data request in ETH"
        }
      },
      "fetchData(uint256)": {
        "params": {
          "timestamp": "uint256 Timestamp at which data are needed"
        }
      },
      "recursivelyFetchData(uint256,uint256,uint256)": {
        "params": {
          "period": "uint256 Period in seconds between multiple timestamps",
          "times": "uint256 How many timestamps are requested",
          "timestamp": "uint256 Timestamp at which data are needed for the first time"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateFetchPrice()": {
        "notice": "Requests and returns price in ETH for one request. This function could be called as `view` function. Oraclize API for price calculations restricts making this function as view."
      },
      "fetchData(uint256)": {
        "notice": "Requests data from `oracleId` one time"
      },
      "recursivelyFetchData(uint256,uint256,uint256)": {
        "notice": "Requests data from `oracleId` multiple times"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6371,
        "contract": "contracts/test/OracleIdMock.sol:OracleIdMock",
        "label": "fetchPrice",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6374,
        "contract": "contracts/test/OracleIdMock.sol:OracleIdMock",
        "label": "registry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRegistry)4245"
      }
    ],
    "types": {
      "t_contract(IRegistry)4245": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
