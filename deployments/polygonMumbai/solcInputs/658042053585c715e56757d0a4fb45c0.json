{
  "language": "Solidity",
  "sources": {
    "contracts/Core/Core.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../TokenSpender.sol\";\nimport \"../Registry/RegistryEntities.sol\";\nimport \"../Interface/IOpiumProxyFactory.sol\";\nimport \"../Interface/IOpiumPositionToken.sol\";\nimport \"../Interface/ISyntheticAggregator.sol\";\nimport \"../Interface/IOracleAggregator.sol\";\nimport \"../Interface/IDerivativeLogic.sol\";\nimport \"../Interface/IRegistry.sol\";\nimport \"../Lib/LibDerivative.sol\";\nimport \"../Lib/LibPosition.sol\";\nimport \"../Lib/LibCalculator.sol\";\nimport \"hardhat/console.sol\";\n\n/// @title Opium.Core contract creates positions, holds and distributes margin at the maturity\ncontract Core is ReentrancyGuardUpgradeable {\n    using LibDerivative for LibDerivative.Derivative;\n    using LibCalculator for uint256;\n    using LibPosition for bytes32;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // Emitted when Core creates a new LONG/SHORT position pair\n    event LogCreated(address _buyer, address _seller, bytes32 _derivativeHash, uint256 _amount);\n    // Emitted when Core mints an amount of LONG/SHORT positions\n    event LogMinted(bytes32 _derivativeHash, uint256 _amount);\n    // Emitted when Core executes positions\n    event LogExecuted(address _positionsOwner, address _positionAddress, uint256 _amount);\n    // Emitted when Core cancels ticker for the first time\n    event LogCanceled(bytes32 _derivativeHash);\n    // Emitted when Core redeems an amount of market neutral positions\n    event LogRedeem(uint256 _amount, bytes32 _derivativeHash);\n\n    IRegistry private registry;\n\n    RegistryEntities.ProtocolCommissionArgs private protocolCommissionArgs;\n    RegistryEntities.ProtocolAddressesArgs private protocolAddressesArgs;\n\n    // Vaults for p2p derivatives\n    // This mapping holds balances of p2p positions\n    // p2pVaults[derivativeHash] => availableBalance\n    mapping(bytes32 => uint256) public p2pVaults;\n\n    // Derivative payouts cache\n    // Once paid out (executed), the payout ratio is stored in cache\n    mapping(bytes32 => uint256[2]) private derivativePayouts;\n\n    // Vaults for fees\n    // This mapping holds balances of fee recipients\n    // feesVaults[feeRecipientAddress][tokenAddress] => availableBalance\n    mapping(address => mapping(address => uint256)) public feesVaults;\n\n    // Hashes of cancelled tickers\n    mapping(bytes32 => bool) private cancelled;\n\n    modifier whenNotPaused() {\n        require(registry.isPaused() == false, \"U4\"); //paused\n        _;\n    }\n\n    modifier onlyOpiumFactoryTokens(address _tokenAddress) {\n        require(\n            IOpiumPositionToken(_tokenAddress).getFactoryAddress() == address(protocolAddressesArgs.opiumProxyFactory),\n            \"U3\"\n        ); // only proxy factory\n        _;\n    }\n\n    /// @notice sets registry and protocolCommissionArgs\n    function initialize(address _registry) external initializer {\n        registry = IRegistry(_registry);\n        protocolCommissionArgs = registry.getProtocolCommissionParams();\n    }\n\n    // ****************** EXTERNAL FUNCTIONS ******************\n\n    /// @notice This function allows fee recipients to withdraw their fees\n    /// @param _tokenAddress address Address of an ERC20 token to withdraw\n    function withdrawFee(address _tokenAddress) external nonReentrant whenNotPaused {\n        uint256 balance = feesVaults[msg.sender][_tokenAddress];\n        feesVaults[msg.sender][_tokenAddress] = 0;\n        IERC20Upgradeable(_tokenAddress).safeTransfer(msg.sender, balance);\n    }\n\n    /// @notice This function deploys two ERC20 contracts representing respectively the LONG and SHORT position of the provided `LibDerivative.Derivative` derivative and mints the provided amount of SHORT positions to a seller and LONG positions to a buyer\n    /// @param _derivative LibDerivative.Derivative Derivative definition\n    /// @param _amount uint256 Amount of positions to create\n    /// @param _addresses address[2] Addresses of buyer and seller\n    /// [0] - buyer address\n    /// [1] - seller address\n    function create(\n        LibDerivative.Derivative calldata _derivative,\n        uint256 _amount,\n        address[2] calldata _addresses\n    ) external whenNotPaused nonReentrant {\n        _setProtocolAddresses();\n        uint256 _multiplier = 10**protocolCommissionArgs.precisionFactor;\n        require(_multiplier.modWithPrecisionFactor(_derivative.margin * _amount) == 0, \"C5\"); //wrong mod\n\n        // Generate hash for derivative\n        bytes32 derivativeHash = _derivative.getDerivativeHash();\n\n        // Check if ticker was canceled\n        require(!cancelled[derivativeHash], \"C7\"); //ERROR_CORE_TICKER_WAS_CANCELLED\n\n        // Validate input data against Derivative logic (`syntheticId`)\n        require(IDerivativeLogic(_derivative.syntheticId).validateInput(_derivative), \"C8\"); //ERROR_CORE_SYNTHETIC_VALIDATION_ERROR\n\n        uint256[2] memory margins;\n        // Get cached margin required according to logic from Opium.SyntheticAggregator\n        // margins[0] - buyerMargin\n        // margins[1] - sellerMargin\n        (margins[0], margins[1]) = ISyntheticAggregator(protocolAddressesArgs.syntheticAggregator).getMargin(\n            derivativeHash,\n            _derivative\n        );\n\n        uint256 totalMargin = _multiplier.mulWithPrecisionFactor(margins[0] + margins[1], _amount);\n\n        // Check ERC20 tokens allowance: (margins[0] + margins[1]) * amount\n        // `msg.sender` must provide margin for position creation\n        require(\n            IERC20Upgradeable(_derivative.token).allowance(msg.sender, address(protocolAddressesArgs.tokenSpender)) >=\n                totalMargin,\n            \"C12\" //ERROR_CORE_NOT_ENOUGH_TOKEN_ALLOWANCE\n        );\n\n        // Take ERC20 tokens from msg.sender, should never revert in correct ERC20 implementation\n        protocolAddressesArgs.tokenSpender.claimTokens(\n            IERC20Upgradeable(_derivative.token),\n            msg.sender,\n            address(this),\n            totalMargin\n        );\n\n        // Increment p2p positions balance by collected margin: vault += (margins[0] + margins[1]) * _amount\n        _increaseP2PVault(derivativeHash, totalMargin);\n\n        // Mint LONG and SHORT positions tokens\n        protocolAddressesArgs.opiumProxyFactory.create(\n            _addresses[0],\n            _addresses[1],\n            _amount,\n            derivativeHash,\n            _derivative\n        );\n\n        emit LogCreated(_addresses[0], _addresses[1], derivativeHash, _amount);\n    }\n\n    /// @notice This function mints the provided amount of LONG/SHORT positions to msg.sender for a previously deployed pair of LONG/SHORT ERC20 contracts\n    /// @param _amount uint256 Amount of positions to create\n    /// @param _positionAddresses address[2] Addresses of buyer and seller\n    /// [0] - LONG erc20 position address\n    /// [1] - SHORT erc20 position address\n    function mint(uint256 _amount, address[2] calldata _positionAddresses)\n        external\n        whenNotPaused\n        onlyOpiumFactoryTokens(_positionAddresses[0])\n        onlyOpiumFactoryTokens(_positionAddresses[1])\n        nonReentrant\n    {\n        _setProtocolAddresses();\n        uint256 _multiplier = 10**protocolCommissionArgs.precisionFactor;\n\n        IOpiumPositionToken.OpiumPositionTokenParams memory opiumPositionTokenParams = IOpiumPositionToken(\n            _positionAddresses[0]\n        ).getPositionTokenData();\n        IOpiumPositionToken.OpiumPositionTokenParams memory longOpiumPositionTokenParams = IOpiumPositionToken(\n            _positionAddresses[1]\n        ).getPositionTokenData();\n        require(_multiplier.modWithPrecisionFactor(opiumPositionTokenParams.derivative.margin * _amount) == 0, \"C5\"); //wrong mod\n        require(opiumPositionTokenParams.derivativeHash == longOpiumPositionTokenParams.derivativeHash, \"C2\"); //WRONG_HASH\n        require(\n            opiumPositionTokenParams.positionType == LibDerivative.PositionType.SHORT,\n            \"C3\" //WRONG_POSITION_TYPE\n        );\n        require(\n            longOpiumPositionTokenParams.positionType == LibDerivative.PositionType.LONG,\n            \"C3\" //WRONG_POSITION_TYPE\n        );\n\n        // Check if ticker was canceled\n        require(!cancelled[opiumPositionTokenParams.derivativeHash], \"C7\"); //ERROR_CORE_TICKER_WAS_CANCELLED\n\n        // Validate input data against Derivative logic (`syntheticId`)\n        require(\n            IDerivativeLogic(opiumPositionTokenParams.derivative.syntheticId).validateInput(\n                opiumPositionTokenParams.derivative\n            ),\n            \"C8\"\n        ); //ERROR_CORE_SYNTHETIC_VALIDATION_ERROR\n\n        uint256[2] memory margins;\n        // Get cached margin required according to logic from Opium.SyntheticAggregator\n        // margins[0] - buyerMargin\n        // margins[1] - sellerMargin\n        (margins[0], margins[1]) = ISyntheticAggregator(protocolAddressesArgs.syntheticAggregator).getMargin(\n            opiumPositionTokenParams.derivativeHash,\n            opiumPositionTokenParams.derivative\n        );\n\n        uint256 totalMargin = _multiplier.mulWithPrecisionFactor(margins[0] + margins[1], _amount);\n\n        // Check ERC20 tokens allowance: (margins[0] + margins[1]) * amount\n        // `msg.sender` must provide margin for position creation\n        require(\n            IERC20Upgradeable(opiumPositionTokenParams.derivative.token).allowance(\n                msg.sender,\n                address(protocolAddressesArgs.tokenSpender)\n            ) >= totalMargin,\n            \"C12\" //ERROR_CORE_NOT_ENOUGH_TOKEN_ALLOWANCE\n        );\n\n        // Take ERC20 tokens from msg.sender, should never revert in correct ERC20 implementation\n        protocolAddressesArgs.tokenSpender.claimTokens(\n            IERC20Upgradeable(opiumPositionTokenParams.derivative.token),\n            msg.sender,\n            address(this),\n            totalMargin\n        );\n\n        // Increment p2p positions balance by collected margin: vault += (margins[0] + margins[1]) * _amount\n        _increaseP2PVault(opiumPositionTokenParams.derivativeHash, totalMargin);\n\n        // Mint LONG and SHORT positions tokens\n        protocolAddressesArgs.opiumProxyFactory.mintPair(\n            msg.sender,\n            msg.sender,\n            _positionAddresses[0],\n            _positionAddresses[1],\n            _amount\n        );\n\n        emit LogMinted(opiumPositionTokenParams.derivativeHash, _amount);\n    }\n\n    /// @notice Executes a single position of `msg.sender` with specified `positionAddress`\n    /// @param _positionAddress address `positionAddress` of position that needs to be executed\n    /// @param _amount uint256 Amount of positions to execute\n    function execute(address _positionAddress, uint256 _amount) external nonReentrant {\n        _execute(msg.sender, _positionAddress, _amount);\n    }\n\n    /// @notice Executes a single position of `_positionsOwner` with specified `positionAddress`\n    /// @param _positionOwner address Address of the owner of positions\n    /// @param _positionAddress address `positionAddress` of positions that needs to be executed\n    /// @param _amount uint256 Amount of positions to execute\n    function execute(\n        address _positionOwner,\n        address _positionAddress,\n        uint256 _amount\n    ) external nonReentrant {\n        _execute(_positionOwner, _positionAddress, _amount);\n    }\n\n    /// @notice Executes several positions of `msg.sender` with different `positionAddresses`\n    /// @param _positionsAddresses address[] `positionAddresses` of positions that need to be executed\n    /// @param _amounts uint256[] Amount of positions to execute for each `positionAddress`\n    function execute(address[] calldata _positionsAddresses, uint256[] calldata _amounts) external nonReentrant {\n        require(_positionsAddresses.length == _amounts.length, \"C1\"); //ERROR_CORE_ADDRESSES_AND_AMOUNTS_LENGTH_DO_NOT_MATCH\n        for (uint256 i; i < _positionsAddresses.length; i++) {\n            _execute(msg.sender, _positionsAddresses[i], _amounts[i]);\n        }\n    }\n\n    /// @notice Executes several positions of `_positionsOwner` with different `positionAddresses`\n    /// @param _positionsOwner address Address of the owner of positions\n    /// @param _positionsAddresses address[] `positionAddresses` of positions that need to be executed\n    /// @param _amounts uint256[] Amount of positions to execute for each `positionAddresses`\n    function execute(\n        address _positionsOwner,\n        address[] calldata _positionsAddresses,\n        uint256[] calldata _amounts\n    ) external nonReentrant {\n        require(_positionsAddresses.length == _amounts.length, \"C1\"); //ERROR_CORE_ADDRESSES_AND_AMOUNTS_LENGTH_DO_NOT_MATCH\n        for (uint256 i; i < _positionsAddresses.length; i++) {\n            _execute(_positionsOwner, _positionsAddresses[i], _amounts[i]);\n        }\n    }\n\n    /// @notice Redeems a single market neutral position pair\n    /// @param _positionAddresses address[2] `_positionAddresses` of the positions that need to be redeemed\n    /// @param _amount uint256 Amount of tokens to redeem\n    function redeem(address[2] calldata _positionAddresses, uint256 _amount) external nonReentrant {\n        _redeem(msg.sender, _positionAddresses, _amount);\n    }\n\n    /// @notice Redeems several market neutral position pairs\n    /// @param _positionsAddresses address[2][] `_positionsAddresses` of the positions that need to be redeemed\n    /// @param _amounts uint256[] Amount of tokens to redeem for each position pair\n    function redeem(address[2][] calldata _positionsAddresses, uint256[] calldata _amounts) external nonReentrant {\n        require(_positionsAddresses.length == _amounts.length, \"C1\"); //ERROR_CORE_ADDRESSES_AND_AMOUNTS_LENGTH_DO_NOT_MATCH\n        for (uint256 i = 0; i < _positionsAddresses.length; i++) {\n            _redeem(msg.sender, _positionsAddresses[i], _amounts[i]);\n        }\n    }\n\n    /// @notice Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`\n    /// @param _positionAddress PositionType of positions to be canceled\n    /// @param _amount uint256 Amount of positions to cancel\n    function cancel(address _positionAddress, uint256 _amount) external nonReentrant {\n        _cancel(_positionAddress, _amount);\n    }\n\n    /// @notice Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`\n    /// @param _positionsAddresses PositionTypes of positions to be canceled\n    /// @param _amounts uint256[] Amount of positions to cancel for each `positionAddress`\n    function cancel(address[] calldata _positionsAddresses, uint256[] calldata _amounts) external nonReentrant {\n        require(_positionsAddresses.length == _amounts.length, \"C1\");\n        for (uint256 i; i < _positionsAddresses.length; i++) {\n            _cancel(_positionsAddresses[i], _amounts[i]);\n        }\n    }\n\n    // ****************** PRIVATE FUNCTIONS ******************\n\n    /// @notice Redeems market neutral position for a `_positionAddresses` pair\n    /// @param _positionsOwner address `positionsOwner` owner of the `positionAddresses` pair\n    /// @param _positionAddresses address[2] `positionAddresses` of the position that needs to be burnt\n    function _redeem(\n        address _positionsOwner,\n        address[2] memory _positionAddresses,\n        uint256 _amount\n    ) private whenNotPaused {\n        _setProtocolAddresses();\n        uint256 shortBalance = IERC20Upgradeable(_positionAddresses[0]).balanceOf(_positionsOwner);\n        uint256 longBalance = IERC20Upgradeable(_positionAddresses[1]).balanceOf(_positionsOwner);\n        IOpiumPositionToken.OpiumPositionTokenParams memory opiumPositionTokenParams = IOpiumPositionToken(\n            _positionAddresses[0]\n        ).getPositionTokenData();\n        IOpiumPositionToken.OpiumPositionTokenParams memory longOpiumPositionTokenParams = IOpiumPositionToken(\n            _positionAddresses[1]\n        ).getPositionTokenData();\n        require(opiumPositionTokenParams.derivativeHash == longOpiumPositionTokenParams.derivativeHash, \"C2\"); //WRONG_HASH\n        require(\n            opiumPositionTokenParams.positionType == LibDerivative.PositionType.SHORT,\n            \"C3\" //WRONG_POSITION_TYPE\n        );\n        require(\n            longOpiumPositionTokenParams.positionType == LibDerivative.PositionType.LONG,\n            \"C3\" //WRONG_POSITION_TYPE\n        );\n        require(shortBalance >= _amount, \"C4\"); //NOT_ENOUGH_POSITIONS\n        require(longBalance >= _amount, \"C4\"); //NOT_ENOUGH_POSITIONS\n\n        ISyntheticAggregator.SyntheticCache memory syntheticCache = protocolAddressesArgs\n            .syntheticAggregator\n            .getSyntheticCache(opiumPositionTokenParams.derivativeHash, opiumPositionTokenParams.derivative);\n\n        uint256 totalMargin = (10**protocolCommissionArgs.precisionFactor).mulWithPrecisionFactor(\n            syntheticCache.buyerMargin + syntheticCache.sellerMargin,\n            _amount\n        );\n        uint256 fees = _getFees(\n            syntheticCache.authorAddress,\n            syntheticCache.commission,\n            opiumPositionTokenParams.derivative.token,\n            totalMargin\n        );\n\n        IERC20Upgradeable(opiumPositionTokenParams.derivative.token).safeTransfer(_positionsOwner, totalMargin - fees);\n        protocolAddressesArgs.opiumProxyFactory.burnPair(\n            _positionsOwner,\n            _positionAddresses[0],\n            _positionAddresses[1],\n            _amount\n        );\n        emit LogRedeem(_amount, opiumPositionTokenParams.derivativeHash);\n    }\n\n    /// @notice Executes several positions of `_positionOwner` with different `positionAddresses`\n    /// @param _positionOwner address Address of the owner of positions\n    /// @param _positionAddress address[] `positionAddresses` of positions that needs to be executed\n    /// @param _amount uint256 Amount of positions to execute for each `positionAddress`\n    function _execute(\n        address _positionOwner,\n        address _positionAddress,\n        uint256 _amount\n    ) private onlyOpiumFactoryTokens(_positionAddress) whenNotPaused {\n        _setProtocolAddresses();\n        IOpiumPositionToken.OpiumPositionTokenParams memory opiumPositionTokenParams = IOpiumPositionToken(\n            _positionAddress\n        ).getPositionTokenData();\n\n        // Check if execution is performed after endTime\n        require(block.timestamp > opiumPositionTokenParams.derivative.endTime, \"C10\"); //ERROR_CORE_EXECUTION_BEFORE_MATURITY_NOT_ALLOWED\n\n        // Checking whether execution is performed by `_positionsOwner` or `_positionsOwner` allowed third party executions on it's behalf\n        require(\n            _positionOwner == msg.sender ||\n                IDerivativeLogic(opiumPositionTokenParams.derivative.syntheticId).thirdpartyExecutionAllowed(\n                    _positionOwner\n                ),\n            \"C11\" //ERROR_CORE_SYNTHETIC_EXECUTION_WAS_NOT_ALLOWED\n        );\n\n        // Returns payout for all positions\n        uint256 payout = _getPayout(\n            opiumPositionTokenParams,\n            _amount,\n            protocolAddressesArgs.syntheticAggregator,\n            protocolAddressesArgs.oracleAggregator\n        );\n\n        // Transfer payout\n        if (payout > 0) {\n            IERC20Upgradeable(opiumPositionTokenParams.derivative.token).safeTransfer(_positionOwner, payout);\n        }\n        // Burn executed position tokens\n        protocolAddressesArgs.opiumProxyFactory.burn(_positionOwner, _positionAddress, _amount);\n\n        emit LogExecuted(_positionOwner, _positionAddress, _amount);\n    }\n\n    /// @notice Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`\n    /// @param _positionAddress PositionTypes of positions to be canceled\n    /// @param _amount uint256[] Amount of positions to cancel for each `positionAddress`\n    function _cancel(address _positionAddress, uint256 _amount)\n        private\n        onlyOpiumFactoryTokens(_positionAddress)\n        whenNotPaused\n    {\n        _setProtocolAddresses();\n        uint256 _multiplier = 10**protocolCommissionArgs.precisionFactor;\n        IOpiumPositionToken.OpiumPositionTokenParams memory opiumPositionTokenParams = IOpiumPositionToken(\n            _positionAddress\n        ).getPositionTokenData();\n        // Don't allow to cancel tickers with \"dummy\" oracleIds\n        require(opiumPositionTokenParams.derivative.oracleId != address(0), \"C6\"); //ERROR_CORE_CANT_CANCEL_DUMMY_ORACLE_ID\n\n        // Check if cancellation is called after `protocolCommissionArgs.noDataCancellationPeriod` and `oracleId` didn't provided data\n        require(\n            opiumPositionTokenParams.derivative.endTime + protocolCommissionArgs.noDataCancellationPeriod <=\n                block.timestamp &&\n                !protocolAddressesArgs.oracleAggregator.hasData(\n                    opiumPositionTokenParams.derivative.oracleId,\n                    opiumPositionTokenParams.derivative.endTime\n                ),\n            \"C13\" //ERROR_CORE_CANCELLATION_IS_NOT_ALLOWED\n        );\n\n        // Emit `Canceled` event only once and mark ticker as canceled\n        if (!cancelled[opiumPositionTokenParams.derivativeHash]) {\n            cancelled[opiumPositionTokenParams.derivativeHash] = true;\n            emit LogCanceled(opiumPositionTokenParams.derivativeHash);\n        }\n\n        uint256[2] memory margins;\n        // Get cached margin required according to logic from Opium.SyntheticAggregator\n        // margins[0] - buyerMargin\n        // margins[1] - sellerMargin\n        (margins[0], margins[1]) = protocolAddressesArgs.syntheticAggregator.getMargin(\n            opiumPositionTokenParams.derivativeHash,\n            opiumPositionTokenParams.derivative\n        );\n\n        uint256 payout;\n        // Check if `_positionAddresses` is a LONG position\n        if (opiumPositionTokenParams.positionType == LibDerivative.PositionType.LONG) {\n            // Set payout to buyerPayout\n            payout = _multiplier.mulWithPrecisionFactor(margins[0], _amount);\n\n            // Check if `positionAddress` is a SHORT position\n        } else {\n            // Set payout to sellerPayout\n            payout = _multiplier.mulWithPrecisionFactor(margins[1], _amount);\n        }\n        _decreaseP2PVault(opiumPositionTokenParams.derivativeHash, payout);\n\n        // Transfer payout * _amounts[i]\n        if (payout > 0) {\n            IERC20Upgradeable(opiumPositionTokenParams.derivative.token).safeTransfer(msg.sender, payout);\n        }\n\n        // Burn canceled position tokens\n        protocolAddressesArgs.opiumProxyFactory.burn(msg.sender, _positionAddress, _amount);\n    }\n\n    function _getPayout(\n        IOpiumPositionToken.OpiumPositionTokenParams memory _opiumPositionTokenParams,\n        uint256 _amount,\n        ISyntheticAggregator _syntheticAggregator,\n        IOracleAggregator _oracleAggregator\n    ) private returns (uint256 payout) {\n        // // Check if ticker was canceled\n        require(!cancelled[_opiumPositionTokenParams.derivativeHash], \"C7\"); //ERROR_CORE_TICKER_WAS_CANCELLED\n\n        // Trying to getData from Opium.OracleAggregator, could be reverted\n        // Opium allows to use \"dummy\" oracleIds, in this case data is set to `0`\n        uint256 data;\n        if (_opiumPositionTokenParams.derivative.oracleId != address(0)) {\n            data = _oracleAggregator.getData(\n                _opiumPositionTokenParams.derivative.oracleId,\n                _opiumPositionTokenParams.derivative.endTime\n            );\n        } else {\n            data = 0;\n        }\n\n        if (\n            derivativePayouts[_opiumPositionTokenParams.derivativeHash][0] == 0 &&\n            derivativePayouts[_opiumPositionTokenParams.derivativeHash][1] == 0\n        ) {\n            // Get payout ratio from Derivative logic\n            // payoutRatio[0] - buyerPayout\n            // payoutRatio[1] - sellerPayout\n            (uint256 buyerPayout, uint256 sellerPayout) = IDerivativeLogic(\n                _opiumPositionTokenParams.derivative.syntheticId\n            ).getExecutionPayout(_opiumPositionTokenParams.derivative, data);\n            // Cache buyer payout\n            derivativePayouts[_opiumPositionTokenParams.derivativeHash][0] = buyerPayout;\n            // Cache seller payout\n            derivativePayouts[_opiumPositionTokenParams.derivativeHash][1] = sellerPayout;\n        }\n\n        uint256 buyerPayoutRatio = derivativePayouts[_opiumPositionTokenParams.derivativeHash][0];\n        uint256 sellerPayoutRatio = derivativePayouts[_opiumPositionTokenParams.derivativeHash][1];\n\n        ISyntheticAggregator.SyntheticCache memory syntheticCache = ISyntheticAggregator(_syntheticAggregator)\n            .getSyntheticCache(_opiumPositionTokenParams.derivativeHash, _opiumPositionTokenParams.derivative);\n\n        uint256[2] memory payouts;\n        // Calculate payouts from ratio\n        // payouts[0] -> buyerPayout = (buyerMargin + sellerMargin) * buyerPayoutRatio / (buyerPayoutRatio + sellerPayoutRatio)\n        // payouts[1] -> sellerPayout = (buyerMargin + sellerMargin) * sellerPayoutRatio / (buyerPayoutRatio + sellerPayoutRatio)\n        payouts[0] =\n            ((syntheticCache.buyerMargin + syntheticCache.sellerMargin) * buyerPayoutRatio) /\n            (buyerPayoutRatio + sellerPayoutRatio);\n        payouts[1] =\n            ((syntheticCache.buyerMargin + syntheticCache.sellerMargin) * sellerPayoutRatio) /\n            (buyerPayoutRatio + sellerPayoutRatio);\n\n        uint256 _multiplier = 10**protocolCommissionArgs.precisionFactor;\n\n        // Check if `_positionType` is LONG\n        if (_opiumPositionTokenParams.positionType == LibDerivative.PositionType.LONG) {\n            // Set payout to buyerPayout\n            payout = payouts[0];\n\n            // Multiply payout by amount\n            payout = _multiplier.mulWithPrecisionFactor(payout, _amount);\n\n            uint256 longMargin = _multiplier.mulWithPrecisionFactor(syntheticCache.buyerMargin, _amount);\n\n            // Take fees only from profit makers\n            // Check: payout > buyerMargin * amount\n            if (payout > longMargin) {\n                // Get Opium and `syntheticId` author fees and subtract it from payout\n                payout =\n                    payout -\n                    (\n                        _getFees(\n                            syntheticCache.authorAddress,\n                            syntheticCache.commission,\n                            _opiumPositionTokenParams.derivative.token,\n                            payout - longMargin\n                        )\n                    );\n            }\n\n            // Check if `_positionType` is a SHORT position\n        } else {\n            // Set payout to sellerPayout\n            payout = payouts[1];\n\n            // Multiply payout by amount\n            payout = _multiplier.mulWithPrecisionFactor(payout, _amount);\n            uint256 shortMargin = _multiplier.mulWithPrecisionFactor(syntheticCache.sellerMargin, _amount);\n\n            // Take fees only from profit makers\n            // Check: payout > sellerMargin * amount\n\n            if (payout > shortMargin) {\n                // Get Opium fees and subtract it from payout\n                payout =\n                    payout -\n                    (\n                        _getFees(\n                            syntheticCache.authorAddress,\n                            syntheticCache.commission,\n                            _opiumPositionTokenParams.derivative.token,\n                            payout - shortMargin\n                        )\n                    );\n            }\n        }\n        _decreaseP2PVault(_opiumPositionTokenParams.derivativeHash, payout);\n    }\n\n    /// @notice Calculates `syntheticId` author and opium fees from profit makers\n    /// @param _profit uint256 payout of one position\n    /// @return fee uint256 Opium and `syntheticId` author fee\n    function _getFees(\n        address _authorAddress,\n        uint256 _authorCommission,\n        address _tokenAddress,\n        uint256 _profit\n    ) private returns (uint256 fee) {\n        // Calculate fee\n        // fee = profit * commission / COMMISSION_BASE\n        fee = (_profit * _authorCommission) / protocolCommissionArgs.derivativeAuthorCommissionBase;\n\n        // If commission is zero, finish\n        if (fee == 0) {\n            return 0;\n        }\n\n        // Calculate opium fee\n        // opiumFee = fee * OPIUM_COMMISSION_PART / OPIUM_COMMISSION_BASE\n        uint256 opiumFee = (fee * protocolCommissionArgs.protocolCommissionPart) /\n            protocolCommissionArgs.protocolFeeCommissionBase;\n\n        // Calculate author fee\n        // authorFee = fee - opiumFee\n        uint256 authorFee = fee - opiumFee;\n\n        // Update feeVault for Opium team\n        // feesVault[opium][token] += opiumFee\n        feesVaults[protocolAddressesArgs.protocolFeeReceiver][_tokenAddress] =\n            feesVaults[protocolAddressesArgs.protocolFeeReceiver][_tokenAddress] +\n            opiumFee;\n\n        // Update feeVault for `syntheticId` author\n        // feeVault[author][token] += authorFee\n        feesVaults[_authorAddress][_tokenAddress] = feesVaults[_authorAddress][_tokenAddress] + authorFee;\n    }\n\n    function _increaseP2PVault(bytes32 _derivativeHash, uint256 _amount) private {\n        p2pVaults[_derivativeHash] = p2pVaults[_derivativeHash] + _amount;\n    }\n\n    function _decreaseP2PVault(bytes32 _derivativeHash, uint256 _amount) private {\n        require(p2pVaults[_derivativeHash] >= _amount, \"C9\"); //ERROR_CORE_INSUFFICIENT_P2P_BALANCE\n        p2pVaults[_derivativeHash] = p2pVaults[_derivativeHash] - _amount;\n    }\n\n    function _setProtocolAddresses() private {\n        if (address(protocolAddressesArgs.syntheticAggregator) == address(0)) {\n            protocolAddressesArgs = registry.getProtocolAddresses();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/TokenSpender.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./Interface/IRegistry.sol\";\n\n/// @title Opium.TokenSpender contract holds users ERC20 approvals and allows whitelisted contracts to use tokens\ncontract TokenSpender is Initializable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    IRegistry private registry;\n\n    modifier onlyCoreSpenders() {\n        require(registry.isWhitelisted(msg.sender), \"U2\"); // not whitelisted\n        _;\n    }\n\n    /// @notice Calls constructors of super-contracts\n    /// @param _registry address Address of governor, who is allowed to adjust whitelist\n    function initialize(address _registry) external initializer {\n        registry = IRegistry(_registry);\n    }\n\n    /// @notice Using this function whitelisted contracts could call ERC20 transfers\n    /// @param token IERC20 Instance of token\n    /// @param from address Address from which tokens are transferred\n    /// @param to address Address of tokens receiver\n    /// @param amount uint256 Amount of tokens to be transferred\n    function claimTokens(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 amount\n    ) external onlyCoreSpenders {\n        token.safeTransferFrom(from, to, amount);\n    }\n}\n"
    },
    "contracts/Registry/RegistryEntities.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"../Interface/IOpiumProxyFactory.sol\";\nimport \"../Interface/ISyntheticAggregator.sol\";\nimport \"../Interface/IOracleAggregator.sol\";\nimport \"../Interface/ITokenSpender.sol\";\n\nlibrary RegistryEntities {\n    struct ProtocolCommissionArgs {\n        // Represents 100% base for commissions calculation\n        uint32 derivativeAuthorCommissionBase;\n        // Period of time after which ticker could be canceled if no data was provided to the `oracleId`\n        uint32 noDataCancellationPeriod;\n        // Represents 100% base for Opium commission\n        uint8 protocolFeeCommissionBase;\n        // Represents which part of `syntheticId` author commissions goes to opium\n        uint8 protocolCommissionPart;\n        // scaling factor\n        uint8 precisionFactor;\n        bool paused;\n    }\n\n    struct ProtocolAddressesArgs {\n        // Address of Opium.Core contract\n        address core;\n        // Address of Opium.OpiumProxyFactory contract\n        IOpiumProxyFactory opiumProxyFactory;\n        // Address of Opium.OracleAggregator contract\n        IOracleAggregator oracleAggregator;\n        // Address of Opium.SyntheticAggregator contract\n        ISyntheticAggregator syntheticAggregator;\n        // Address of Opium.TokenSpender contract\n        ITokenSpender tokenSpender;\n        // Address of protocol commission receiver\n        address protocolFeeReceiver;\n    }\n}\n"
    },
    "contracts/Interface/IOpiumProxyFactory.sol": {
      "content": "pragma solidity 0.8.5;\nimport \"../Lib/LibDerivative.sol\";\n\ninterface IOpiumProxyFactory {\n    function getImplementationAddress() external view returns (address);\n\n    function create(\n        address _buyer,\n        address _seller,\n        uint256 _amount,\n        bytes32 _derivativeHash,\n        LibDerivative.Derivative calldata _derivative\n    ) external;\n\n    function mintPair(\n        address _buyer,\n        address _seller,\n        address _longPositionAddress,\n        address _shortPositionAddress,\n        uint256 _amount\n    ) external;\n\n    function burnPair(\n        address _tokenOwner,\n        address _longToken,\n        address _shortToken,\n        uint256 _amount\n    ) external;\n\n    function burn(\n        address _tokenOwner,\n        address _token,\n        uint256 _amount\n    ) external;\n}\n"
    },
    "contracts/Interface/IOpiumPositionToken.sol": {
      "content": "pragma solidity 0.8.5;\nimport \"../Lib/LibDerivative.sol\";\n\ninterface IOpiumPositionToken {\n    struct OpiumPositionTokenParams {\n        LibDerivative.Derivative derivative;\n        LibDerivative.PositionType positionType;\n        bytes32 derivativeHash;\n    }\n\n    function initialize(\n        bytes32 _derivativeHash,\n        LibDerivative.PositionType _positionType,\n        LibDerivative.Derivative calldata _derivative\n    ) external;\n\n    function mint(address _address, uint256 _amount) external;\n\n    function burn(address _address, uint256 _amount) external;\n\n    function getFactoryAddress() external view returns (address);\n\n    function getPositionTokenData() external view returns (OpiumPositionTokenParams memory opiumPositionTokenParams);\n}\n"
    },
    "contracts/Interface/ISyntheticAggregator.sol": {
      "content": "pragma solidity 0.8.5;\nimport \"../Lib/LibDerivative.sol\";\n\ninterface ISyntheticAggregator {\n    struct SyntheticCache {\n        uint256 buyerMargin;\n        uint256 sellerMargin;\n        uint256 commission; // rename it to author commission for clarity\n        address authorAddress;\n        bool init;\n        // SyntheticTypes typeByHash;\n    }\n\n    function getSyntheticCache(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\n        external\n        returns (SyntheticCache memory);\n\n    function getMargin(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\n        external\n        returns (uint256 buyerMargin, uint256 sellerMargin);\n}\n"
    },
    "contracts/Interface/IOracleAggregator.sol": {
      "content": "pragma solidity 0.8.5;\n\ninterface IOracleAggregator {\n    function __callback(uint256 timestamp, uint256 data) external;\n\n    function getData(address oracleId, uint256 timestamp) external view returns (uint256 dataResult);\n\n    function hasData(address oracleId, uint256 timestamp) external view returns (bool);\n}\n"
    },
    "contracts/Interface/IDerivativeLogic.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"../Lib/LibDerivative.sol\";\n\n/// @title Opium.Interface.IDerivativeLogic contract is an interface that every syntheticId should implement\nabstract contract IDerivativeLogic {\n    /// @notice Validates ticker\n    /// @param _derivative Derivative Instance of derivative to validate\n    /// @return Returns boolean whether ticker is valid\n    function validateInput(LibDerivative.Derivative memory _derivative) public view virtual returns (bool);\n\n    /// @notice Calculates margin required for derivative creation\n    /// @param _derivative Derivative Instance of derivative\n    /// @return buyerMargin uint256 Margin needed from buyer (LONG position)\n    /// @return sellerMargin uint256 Margin needed from seller (SHORT position)\n    function getMargin(LibDerivative.Derivative memory _derivative)\n        public\n        view\n        virtual\n        returns (uint256 buyerMargin, uint256 sellerMargin);\n\n    /// @notice Calculates payout for derivative execution\n    /// @param _derivative Derivative Instance of derivative\n    /// @param _result uint256 Data retrieved from oracleId on the maturity\n    /// @return buyerPayout uint256 Payout in ratio for buyer (LONG position holder)\n    /// @return sellerPayout uint256 Payout in ratio for seller (SHORT position holder)\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\n        public\n        view\n        virtual\n        returns (uint256 buyerPayout, uint256 sellerPayout);\n\n    /// @notice Returns syntheticId author address for Opium commissions\n    /// @return authorAddress address The address of syntheticId address\n    function getAuthorAddress() public view virtual returns (address authorAddress);\n\n    /// @notice Returns syntheticId author commission in base of COMMISSION_BASE\n    /// @return commission uint256 Author commission\n    function getAuthorCommission() public view virtual returns (uint256 commission);\n\n    /// @notice Returns whether thirdparty could execute on derivative's owner's behalf\n    /// @param _derivativeOwner address Derivative owner address\n    /// @return Returns boolean whether _derivativeOwner allowed third party execution\n    function thirdpartyExecutionAllowed(address _derivativeOwner) public view virtual returns (bool);\n\n    /// @notice Sets whether thirds parties are allowed or not to execute derivative's on msg.sender's behalf\n    /// @param _allow bool Flag for execution allowance\n    function allowThirdpartyExecution(bool _allow) public virtual;\n\n    // Event with syntheticId metadata JSON string (for DIB.ONE derivative explorer)\n    event MetadataSet(string metadata);\n}\n"
    },
    "contracts/Interface/IRegistry.sol": {
      "content": "pragma solidity 0.8.5;\nimport \"../Registry/RegistryEntities.sol\";\n\ninterface IRegistry {\n    function getCore() external view returns (address);\n\n    function getOracleAggregator() external view returns (address);\n\n    function isWhitelisted(address _address) external view returns (bool);\n\n    function getProtocolAddresses() external view returns (RegistryEntities.ProtocolAddressesArgs memory);\n\n    function getProtocolCommissionParams() external view returns (RegistryEntities.ProtocolCommissionArgs memory);\n\n    function isPaused() external view returns (bool);\n}\n"
    },
    "contracts/Lib/LibDerivative.sol": {
      "content": "pragma solidity 0.8.5;\n\n/// @title Opium.Lib.LibDerivative contract should be inherited by contracts that use Derivative structure and calculate derivativeHash\nlibrary LibDerivative {\n    enum PositionType {\n        SHORT,\n        LONG\n    }\n    \n    // Opium derivative structure (ticker) definition\n    struct Derivative {\n        // Margin parameter for syntheticId\n        uint256 margin;\n        // Maturity of derivative\n        uint256 endTime;\n        // Additional parameters for syntheticId\n        uint256[] params;\n        // oracleId of derivative\n        address oracleId;\n        // Margin token address of derivative\n        address token;\n        // syntheticId of derivative\n        address syntheticId;\n    }\n\n    /// @notice Calculates hash of provided Derivative\n    /// @param _derivative Derivative Instance of derivative to hash\n    /// @return derivativeHash bytes32 Derivative hash\n    function getDerivativeHash(Derivative memory _derivative) internal pure returns (bytes32 derivativeHash) {\n        derivativeHash = keccak256(abi.encodePacked(\n            _derivative.margin,\n            _derivative.endTime,\n            _derivative.params,\n            _derivative.oracleId,\n            _derivative.token,\n            _derivative.syntheticId\n        ));\n    }\n}\n"
    },
    "contracts/Lib/LibPosition.sol": {
      "content": "pragma solidity ^0.8.5;\n\nimport \"openzeppelin-solidity/contracts/proxy/Clones.sol\";\n\nlibrary LibPosition {\n  function predictDeterministicAddress(\n    bytes32 _derivativeHash,\n    bool _isLong, \n    address _positionImplementationAddress, \n    address _factoryAddress\n  ) internal pure returns(address) {\n    bytes32 salt = keccak256(abi.encodePacked( _derivativeHash, _isLong ? \"L\" : \"S\"));\n    return Clones.predictDeterministicAddress(_positionImplementationAddress, salt, _factoryAddress);\n  }\n\n  function deployOpiumPosition(\n    bytes32 _derivativeHash, \n    bool _isLong,\n    address _positionImplementationAddress\n  ) internal returns(address) {\n    bytes32 salt = keccak256(abi.encodePacked( _derivativeHash, _isLong ? \"L\" : \"S\"));\n    return Clones.cloneDeterministic(_positionImplementationAddress, salt);\n  }\n}\n"
    },
    "contracts/Lib/LibCalculator.sol": {
      "content": "pragma solidity 0.8.5;\n\nlibrary LibCalculator {\n    function mulWithPrecisionFactor(uint256 _precisionFactor, uint256 _x, uint256 _y) internal pure returns (uint256) {\n        return (_x * _y) / _precisionFactor;\n    }\n\n    function modWithPrecisionFactor(uint256 _precisionFactor, uint256 _x) internal pure returns (uint256) {\n        return _x % _precisionFactor;\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/Interface/ITokenSpender.sol": {
      "content": "pragma solidity 0.8.5;\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface ITokenSpender {\n    function claimTokens(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n}\n"
    },
    "openzeppelin-solidity/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/test/upgradeability/TestCoreUpgrade.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"../../Core/Core.sol\";\n\n/// @title Opium.Core contract creates positions, holds and distributes margin at the maturity\ncontract TestCoreUpgrade is Core {\n    function placeholder() external pure returns (string memory) {\n        return \"upgraded\";\n    }\n}\n"
    },
    "contracts/OpiumProxyFactory.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./Lib/LibDerivative.sol\";\nimport \"./Lib/LibPosition.sol\";\nimport \"./Interface/IOpiumPositionToken.sol\";\nimport \"./Interface/IRegistry.sol\";\nimport \"./OpiumPositionToken.sol\";\nimport \"hardhat/console.sol\";\n\n/// @title Opium.OpiumProxyFactory contract manages the deployment of ERC20 LONG/SHORT positions for a given `LibDerivative.Derivative` structure and it's responsible for minting and burning positions according to the parameters supplied by `Opium.Core`\ncontract OpiumProxyFactory is Initializable {\n    using LibDerivative for LibDerivative.Derivative;\n    using LibPosition for bytes32;\n    event LogShortPositionTokenAddress(bytes32 _derivativeHash, address indexed _positionAddress);\n    event LogLongPositionTokenAddress(bytes32 _derivativeHash, address indexed _positionAddress);\n    event LogMintShortPosition(address indexed _positionAddress, uint256 _amount);\n    event LogMintLongPosition(address indexed _positionAddress, uint256 _amount);\n    // event LogMintShortPosition(address indexed _positionAddress, uint256 _amount);\n    // event LogMintLongPosition(address indexed _positionAddress, uint256 _amount);\n\n    IRegistry private registry;\n\n    address private opiumPositionTokenImplementation;\n\n    /// @notice it restricts access to the consumer functions to the Opium.Core contract\n    modifier onlyCore() {\n        require(msg.sender == registry.getCore(), \"U1\"); //only core\n        _;\n    }\n\n    /// @notice it is called only once upon deployment of the contract\n    /// @dev it sets the the address of the implementation of the OpiumPositionToken contract which will be used for the factory-deployment of erc20 positions via the minimal proxy contract\n    /// @param _registry address of Opium.Registry\n    function initialize(address _registry) external initializer {\n        opiumPositionTokenImplementation = address(new OpiumPositionToken());\n        registry = IRegistry(_registry);\n    }\n\n    /// @notice read-only getter to retrieve the information about the underlying derivative\n    /// @return _opiumPositionTokenParams OpiumPositionTokenParams struct which contains `LibDerivative.Derivative` schema of the derivative, the ` LibDerivative.PositionType` of the present ERC20 token and the bytes32 hash `derivativeHash` of the `LibDerivative.Derivative` derivative\n    function getImplementationAddress() external view returns (address) {\n        return opiumPositionTokenImplementation;\n    }\n\n    /// @notice checks whether a contract has already been deployed at a specific address\n    /// @return bool true if a contract has been deployed at a specific address and false otherwise\n    function _isContract(address _address) private view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(_address)\n        }\n        return size > 0;\n    }\n\n    /// @notice it creates a specified amount of LONG/SHORT position tokens on behalf of the buyer(LONG) and seller(SHORT) - the specified amount can be 0 in which case the ERC20 contract of the position tokens will only be deployed\n    /// @dev the ERC20 position token's address is calculated via create2 - if a contract already exists at the create2 address of either the LONG or SHORT position then the entire function reverts\n    /// @param _buyer address of the recipient of the LONG position tokens\n    /// @param _seller address of the recipient of the SHORT position tokens\n    /// @param _amount amount of position tokens to be minted to the _positionHolder\n    /// @param _derivativeHash bytes32 hash of `LibDerivative.Derivative`\n    /// @param _derivative LibDerivative.Derivative Derivative definition\n    function create(\n        address _buyer,\n        address _seller,\n        uint256 _amount,\n        bytes32 _derivativeHash,\n        LibDerivative.Derivative calldata _derivative\n    ) external onlyCore {\n        address shortPositionAddress = _derivativeHash.deployOpiumPosition(false, opiumPositionTokenImplementation);\n        address longPositionAddress = _derivativeHash.deployOpiumPosition(true, opiumPositionTokenImplementation);\n        IOpiumPositionToken(longPositionAddress).initialize(\n            _derivativeHash,\n            LibDerivative.PositionType.LONG,\n            _derivative\n        );\n        IOpiumPositionToken(shortPositionAddress).initialize(\n            _derivativeHash,\n            LibDerivative.PositionType.SHORT,\n            _derivative\n        );\n        if (_amount > 0) {\n            IOpiumPositionToken(longPositionAddress).mint(_buyer, _amount);\n            IOpiumPositionToken(shortPositionAddress).mint(_seller, _amount);\n            emit LogMintShortPosition(longPositionAddress, _amount);\n            emit LogMintLongPosition(shortPositionAddress, _amount);\n        }\n        emit LogLongPositionTokenAddress(_derivativeHash, longPositionAddress);\n        emit LogShortPositionTokenAddress(_derivativeHash, shortPositionAddress);\n    }\n\n    /// @notice it creates a specified amount of LONG/SHORT position tokens on behalf of the buyer(LONG) and seller(SHORT) - the specified amount can be 0 in which case the ERC20 contract of the position tokens will only be deployed\n    /// @dev the ERC20 position token's address is calculated via create2 - if a contract already exists at the create2 address of either the LONG or SHORT position then the function reverts\n    /// @param _buyer address of the recipient of the LONG position tokens\n    /// @param _seller address of the recipient of the SHORT position tokens\n    /// @param _longPositionAddress address of the deployed LONG position token\n    /// @param _shortPositionAddress address of the deployed SHORT position token\n    /// @param _amount amount of position tokens to be minted to the _positionHolder\n    function mintPair(\n        address _buyer,\n        address _seller,\n        address _longPositionAddress,\n        address _shortPositionAddress,\n        uint256 _amount\n    ) external onlyCore {\n        require(_isContract(_longPositionAddress) == true, \"O1\");\n        require(_isContract(_shortPositionAddress) == true, \"O1\");\n        IOpiumPositionToken(_longPositionAddress).mint(_buyer, _amount);\n        IOpiumPositionToken(_shortPositionAddress).mint(_seller, _amount);\n        emit LogMintShortPosition(_longPositionAddress, _amount);\n        emit LogMintLongPosition(_shortPositionAddress, _amount);\n    }\n\n    /// @notice it burns specified amount of a specific position tokens on behalf of a specified owner\n    /// @notice it is consumed by Opium.Core to execute or cancel a specific position type\n    /// @dev the ERC20 position token's address is calculated via create2 - if a contract already exists at the create2 address of either the LONG or SHORT position then the entire function reverts\n    /// @param _positionOwner address of the owner of the specified position token\n    /// @param _positionAddress address of the position token to be burnt\n    /// @param _amount amount of position tokens to be minted to the _positionHolder\n    function burn(\n        address _positionOwner,\n        address _positionAddress,\n        uint256 _amount\n    ) external onlyCore {\n        IOpiumPositionToken(_positionAddress).burn(_positionOwner, _amount);\n    }\n\n    /// @notice it burns specified amount of LONG/SHORT position tokens on behalf of a specified owner\n    /// @notice it is consumed by Opium.Core to redeem market neutral position pairs\n    /// @param _positionOwner address of the owner of the LONG/SHORT position tokens\n    /// @param _longPositionAddress address of the deployed LONG position token\n    /// @param _shortPositionAddress address of the deployed SHORT position token\n    /// @param _amount amount of position tokens to be minted to the _positionHolder\n    function burnPair(\n        address _positionOwner,\n        address _longPositionAddress,\n        address _shortPositionAddress,\n        uint256 _amount\n    ) external onlyCore {\n        IOpiumPositionToken(_longPositionAddress).burn(_positionOwner, _amount);\n        IOpiumPositionToken(_shortPositionAddress).burn(_positionOwner, _amount);\n    }\n}\n"
    },
    "contracts/OpiumPositionToken.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"./Lib/LibDerivative.sol\";\n\n/// @title Opium.OpiumPositionToken is Opium.OpiumProxyFactory's child contract. It inherits of ERC20Upgradeable and represents a specific position (either LONG or SHORT) for a given `LibDerivative.Derivative` derivative\ncontract OpiumPositionToken is ERC20Upgradeable {\n    using LibDerivative for LibDerivative.Derivative;\n\n    address private factory;\n\n    struct OpiumPositionTokenParams {\n        LibDerivative.Derivative derivative;\n        LibDerivative.PositionType positionType;\n        bytes32 derivativeHash;\n    }\n\n    OpiumPositionTokenParams private opiumPositionTokenParams;\n\n    /// @notice `it is called only once upon deployment of the contract\n    /// @dev it sets the state variables that are meant to be read-only and should be consumed by other contracts to retrieve information about the derivative\n    /// @param _derivativeHash bytes32 hash of `LibDerivative.Derivative`\n    /// @param _positionType  LibDerivative.PositionType _positionType describes whether the present ERC20 token is SHORT or LONG\n    /// @param _derivative LibDerivative.Derivative Derivative definition\n    function initialize(\n        bytes32 _derivativeHash,\n        LibDerivative.PositionType _positionType,\n        LibDerivative.Derivative calldata _derivative\n    ) external initializer {\n        // string memory addressToString = toAsciiString(address(this));\n        _positionType == LibDerivative.PositionType.LONG\n            ? __ERC20_init(\"OPIUM LONG TOKEN\", \"OPLN\")\n            : __ERC20_init(\"OPIUM SHORT TOKEN\", \"OPSH\");\n        factory = msg.sender;\n        opiumPositionTokenParams = OpiumPositionTokenParams({\n            derivative: _derivative,\n            positionType: _positionType,\n            derivativeHash: _derivativeHash\n        });\n    }\n\n    modifier isFactory() {\n        require(factory != address(0), \"FACTORY_IS_NULL\");\n        require(msg.sender == factory, \"NOT_FACTORY\");\n        _;\n    }\n\n    /// @notice it mints a specified amount of tokens to the given address\n    /// @dev can only be called by the factory contract set in the `initialize` function\n    /// @param _positionHolder address of the recipient of the position tokens\n    /// @param _amount amount of position tokens to be minted to the _positionHolder\n    function mint(address _positionHolder, uint256 _amount) external isFactory {\n        _mint(_positionHolder, _amount);\n    }\n\n    /// @notice it burns a specified amount of tokens owned by the given address\n    /// @dev can only be called by the factory contract set in the `initialize` function\n    /// @param _positionHolder address of the owner of the position tokens\n    /// @param _amount amount of position tokens to be burnt\n    function burn(address _positionHolder, uint256 _amount) external isFactory {\n        _burn(_positionHolder, _amount);\n    }\n\n    //GETTERS\n\n    /// @notice read-only getter to retrieve the address of the factory contract set in the `initialize` function\n    /// @return address of factory contract (OpiumProxyFactory)\n    function getFactoryAddress() external view returns (address) {\n        return factory;\n    }\n\n    /// @notice read-only getter to retrieve the information about the underlying derivative\n    /// @return _opiumPositionTokenParams OpiumPositionTokenParams struct which contains `LibDerivative.Derivative` schema of the derivative, the `LibDerivative.PositionType` of the present ERC20 token and the bytes32 hash `derivativeHash` of the `LibDerivative.Derivative` derivative\n    function getPositionTokenData() external view returns (OpiumPositionTokenParams memory _opiumPositionTokenParams) {\n        return opiumPositionTokenParams;\n    }\n\n    function toAsciiString(address x) private view returns (string memory) {\n        bytes memory s = new bytes(40);\n        for (uint256 i = 0; i < 20; i++) {\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\n            bytes1 hi = bytes1(uint8(b) / 16);\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n            s[2 * i] = char(hi);\n            s[2 * i + 1] = char(lo);\n        }\n        return string(s);\n    }\n\n    function char(bytes1 b) internal view returns (bytes1 c) {\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n        else return bytes1(uint8(b) + 0x57);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/SyntheticAggregator.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./Interface/IDerivativeLogic.sol\";\nimport \"./Interface/IRegistry.sol\";\nimport \"./Lib/LibDerivative.sol\";\n\n/// @notice Opium.SyntheticAggregator contract initialized, identifies and caches syntheticId sensitive data\ncontract SyntheticAggregator is Initializable {\n    using LibDerivative for LibDerivative.Derivative;\n    // Emitted when new ticker is initialized\n    event LogSyntheticInit(LibDerivative.Derivative derivative, bytes32 derivativeHash);\n\n    IRegistry private registry;\n\n    struct SyntheticCache {\n        uint256 buyerMargin;\n        uint256 sellerMargin;\n        uint256 commission;\n        address authorAddress;\n        bool init;\n    }\n    mapping(bytes32 => SyntheticCache) private syntheticCaches;\n\n    // EXTERNAL FUNCTIONS\n\n    function initialize(address _registry) external initializer {\n        registry = IRegistry(_registry);\n    }\n\n    /// @notice Initializes ticker, if was not initialized and returns buyer and seller margin from cache\n    /// @param _derivativeHash bytes32 Hash of derivative\n    /// @param _derivative Derivative Derivative itself\n    /// @return buyerMargin uint256 Margin of buyer\n    /// @return sellerMargin uint256 Margin of seller\n    function getMargin(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\n        external\n        returns (uint256 buyerMargin, uint256 sellerMargin)\n    {\n        // Initialize derivative if wasn't initialized before\n        _initDerivative(_derivativeHash, _derivative);\n        SyntheticCache memory syntheticCache = syntheticCaches[_derivativeHash];\n        return (syntheticCache.buyerMargin, syntheticCache.sellerMargin);\n    }\n\n    /// @notice Initializes ticker, if was not initialized and returns `syntheticId` author address from cache\n    function getSyntheticCache(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\n        external\n        returns (SyntheticCache memory)\n    {\n        _initDerivative(_derivativeHash, _derivative);\n        return syntheticCaches[_derivativeHash];\n    }\n\n    // PRIVATE FUNCTIONS\n\n    /// @notice Initializes ticker: caches syntheticId type, margin, author address and commission\n    /// @param _derivativeHash bytes32 Hash of derivative\n    /// @param _derivative Derivative Derivative itself\n    function _initDerivative(bytes32 _derivativeHash, LibDerivative.Derivative memory _derivative) private {\n        if (syntheticCaches[_derivativeHash].init == true) {\n            return;\n        }\n        // For security reasons we calculate hash of provided _derivative\n        bytes32 derivativeHash = _derivative.getDerivativeHash();\n        require(derivativeHash == _derivativeHash, \"S1\"); //ERROR_SYNTHETIC_AGGREGATOR_DERIVATIVE_HASH_NOT_MATCH\n\n        // Get margin from SyntheticId\n        (uint256 buyerMargin, uint256 sellerMargin) = IDerivativeLogic(_derivative.syntheticId).getMargin(_derivative);\n        // We are not allowing both margins to be equal to 0\n        require(buyerMargin != 0 || sellerMargin != 0, \"S2\"); //ERROR_SYNTHETIC_AGGREGATOR_WRONG_MARGIN\n\n        // AUTHOR COMMISSION\n        // Get commission from syntheticId\n        uint256 commission = IDerivativeLogic(_derivative.syntheticId).getAuthorCommission();\n        // Check if commission is not set > 100%\n        RegistryEntities.ProtocolCommissionArgs memory protocolCommissionArgs = registry.getProtocolCommissionParams();\n        require(\n            commission <= protocolCommissionArgs.derivativeAuthorCommissionBase,\n            \"S3\" //ERROR_SYNTHETIC_AGGREGATOR_COMMISSION_TOO_BIG\n        );\n        // Cache values by derivative hash\n        syntheticCaches[derivativeHash] = SyntheticCache({\n            buyerMargin: buyerMargin,\n            sellerMargin: sellerMargin,\n            commission: commission,\n            authorAddress: IDerivativeLogic(_derivative.syntheticId).getAuthorAddress(),\n            init: true\n        });\n\n        // If we are here, this basically means this ticker was not used before, so we emit an event for Dapps developers about new ticker (derivative) and it's hash\n        emit LogSyntheticInit(_derivative, derivativeHash);\n    }\n}\n"
    },
    "contracts/test/upgradeability/TestSyntheticAggregatorUpgrade.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"../../SyntheticAggregator.sol\";\n\ncontract TestSyntheticAggregatorUpgrade is SyntheticAggregator {\n    function placeholder() external pure returns (string memory) {\n        return \"upgraded\";\n    }\n}\n"
    },
    "contracts/test/OracleIdMock.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"../Interface/IOracleId.sol\";\nimport \"../Interface/IRegistry.sol\";\nimport \"../Interface/IOracleAggregator.sol\";\n\ncontract OracleIdMock is IOracleId {\n    uint256 fetchPrice;\n    IRegistry registry;\n\n    constructor(uint256 _fetchPrice, address _registry) {\n        fetchPrice = _fetchPrice;\n        registry = IRegistry(_registry);\n    }\n\n    function triggerCallback(uint256 timestamp, uint256 returnData) external {\n        IOracleAggregator(registry.getOracleAggregator()).__callback(timestamp, returnData);\n    }\n\n    function fetchData(uint256 timestamp) external payable override {}\n\n    function recursivelyFetchData(\n        uint256 timestamp,\n        uint256 period,\n        uint256 times\n    ) external payable override {}\n\n    function calculateFetchPrice() external override returns (uint256) {\n        return fetchPrice;\n    }\n}\n"
    },
    "contracts/Interface/IOracleId.sol": {
      "content": "pragma solidity 0.8.5;\n\n/// @title Opium.Interface.IOracleId contract is an interface that every oracleId should implement\ninterface IOracleId {\n    /// @notice Requests data from `oracleId` one time\n    /// @param timestamp uint256 Timestamp at which data are needed\n    function fetchData(uint256 timestamp) external payable;\n\n    /// @notice Requests data from `oracleId` multiple times\n    /// @param timestamp uint256 Timestamp at which data are needed for the first time\n    /// @param period uint256 Period in seconds between multiple timestamps\n    /// @param times uint256 How many timestamps are requested\n    function recursivelyFetchData(\n        uint256 timestamp,\n        uint256 period,\n        uint256 times\n    ) external payable;\n\n    /// @notice Requests and returns price in ETH for one request. This function could be called as `view` function. Oraclize API for price calculations restricts making this function as view.\n    /// @return fetchPrice uint256 Price of one data request in ETH\n    function calculateFetchPrice() external returns (uint256 fetchPrice);\n\n    // Event with oracleId metadata JSON string (for DIB.ONE derivative explorer)\n    event MetadataSet(string metadata);\n}\n"
    },
    "contracts/Registry/Registry.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"./RegistryStorageUpgradeable.sol\";\nimport \"../Lib/LibRoles.sol\";\nimport \"../Interface/IOpiumProxyFactory.sol\";\nimport \"../Interface/ISyntheticAggregator.sol\";\nimport \"../Interface/IOracleAggregator.sol\";\nimport \"../Interface/ITokenSpender.sol\";\n\n/**\n    Error codes:\n    - R5 = ERROR_REGISTRY_NOT_PAUSED\n    - R6 = ERROR_REGISTRY_ALREADY_PAUSED\n */\n\ncontract RegistryUpgradeable is RegistryStorageUpgradeable {\n    //add events\n    event LogOpiumCommissionChange(uint256 _opiumCommission);\n    event LogNoDataCancellationPeriodChange(uint256 _noDataCancellationPeriod);\n    event LogWhitelistAccount(address _whitelisted);\n    event LogWhitelistAccountRemoved(address _whitelisted);\n\n    /// @notice it is called only once upon deployment of the contract plus the protocol's fee receiver. It initializes the registry storage with the given governor address as the admin role\n    /// @dev Calls RegistryStorageUpgradeable.__RegistryStorage__init\n    /// @param _governor address of the governance account which will be assigned the initial admin role\n    function initialize(address _governor) external initializer {\n        __RegistryStorage__init(_governor);\n    }\n\n    /// @notice it allows the PROTOCOL_REGISTER role to set the addresses of Opium Protocol's contracts\n    /// @dev the contracts' addresses are set using their respective interfaces\n    /// @param _opiumProxyFactory address of Opium.OpiumProxyFactory\n    /// @param _core address of Opium.Core\n    /// @param _oracleAggregator address of Opium.OracleAggregator\n    /// @param _syntheticAggregator address of Opium.SyntheticAggregator\n    /// @param _tokenSpender address of Opium.TokenSpender\n    /// @param _protocolFeeReceiver address of the recipient of Opium Protocol's fees\n    function registerProtocol(\n        address _opiumProxyFactory,\n        address _core,\n        address _oracleAggregator,\n        address _syntheticAggregator,\n        address _tokenSpender,\n        address _protocolFeeReceiver\n    ) external onlyProtocolRegister {\n        require(\n            _opiumProxyFactory != address(0) &&\n                _core != address(0) &&\n                _oracleAggregator != address(0) &&\n                _syntheticAggregator != address(0) &&\n                _tokenSpender != address(0) &&\n                _protocolFeeReceiver != address(0),\n            \"R5\" //ERROR_REGISTRY_CANT_BE_ZERO_ADDRESS\n        );\n\n        protocolAddressesArgs = RegistryEntities.ProtocolAddressesArgs({\n            opiumProxyFactory: IOpiumProxyFactory(_opiumProxyFactory),\n            core: _core,\n            oracleAggregator: IOracleAggregator(_oracleAggregator),\n            syntheticAggregator: ISyntheticAggregator(_syntheticAggregator),\n            tokenSpender: ITokenSpender(_tokenSpender),\n            protocolFeeReceiver: _protocolFeeReceiver\n        });\n    }\n\n    // SETTERS\n\n    /// @notice allows the GUARDIAN role to pause the Opium Protocol\n    /// @dev it fails if the protocol is already paused\n    function pause() external onlyGuardian {\n        require(protocolCommissionArgs.paused == false, \"R6\"); //already paused\n        protocolCommissionArgs.paused = true;\n    }\n\n    /// @notice allows the GUARDIAN role to unpause the Opium Protocol\n    /// @dev it fails if the protocol is not paused\n    function unpause() external onlyGuardian {\n        require(protocolCommissionArgs.paused == true, \"R7\"); //not paused\n        protocolCommissionArgs.paused = false;\n    }\n\n    /// @notice it allows the WHITELISTER role to add an address to the whitelist\n    function addToWhitelist(address _whitelisted) external onlyWhitelister {\n        whitelist[_whitelisted] = true;\n        emit LogWhitelistAccount(_whitelisted);\n    }\n\n    /// @notice it allows the WHITELISTER role to remove an address from the whitelist\n    function removeFromWhitelist(address _whitelisted) external onlyWhitelister {\n        delete whitelist[_whitelisted];\n        emit LogWhitelistAccountRemoved(_whitelisted);\n    }\n\n    /// @notice allows the COMMISSIONER role to change the protocolReceiver's fee\n    function setOpiumCommissionPart(uint8 _protocolCommissionPart) external onlyCommissionSetter {\n        protocolCommissionArgs.protocolCommissionPart = _protocolCommissionPart;\n        emit LogOpiumCommissionChange(_protocolCommissionPart);\n    }\n\n    /// @notice allows the COMMISSIONER role to change the noDataCancellationPeriod (the timeframe after which a derivative can be cancelled if the oracle has not provided any data)\n    function setNoDataCancellationPeriod(uint32 _noDataCancellationPeriod) external onlyCommissionSetter {\n        protocolCommissionArgs.noDataCancellationPeriod = _noDataCancellationPeriod;\n        emit LogNoDataCancellationPeriodChange(_noDataCancellationPeriod);\n    }\n\n    // GETTERS\n\n    /// @notice Returns all the commission-related parameters of the Opium protocol contracts\n    ///@return RegistryEntities.ProtocolAddressesArgs struct that packs all the interfaces of the Opium Protocol.\n    function getProtocolCommissionParams() external view returns (RegistryEntities.ProtocolCommissionArgs memory) {\n        return protocolCommissionArgs;\n    }\n\n    /// @notice Returns the interfaces of the Opium protocol contracts\n    ///@return RegistryEntities.ProtocolAddressesArgs struct that packs all the interfaces of the Opium Protocol\n    function getProtocolAddresses() external view returns (RegistryEntities.ProtocolAddressesArgs memory) {\n        return protocolAddressesArgs;\n    }\n\n    /// @notice Returns address of Opium.Core\n    function getCore() external view returns (address) {\n        return protocolAddressesArgs.core;\n    }\n\n    /// @notice Returns address of Opium.OracleAggregator\n    function getOracleAggregator() external view returns (address) {\n        return address(protocolAddressesArgs.oracleAggregator);\n    }\n\n    /// @notice Returns whether the Opium protocol is paused\n    function isPaused() external view returns (bool) {\n        return protocolCommissionArgs.paused;\n    }\n\n    /// @notice Returns whether a given address is whitelisted\n    function isWhitelisted(address _address) external view returns (bool) {\n        return whitelist[_address];\n    }\n}\n"
    },
    "contracts/Registry/RegistryStorageUpgradeable.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../Lib/LibRoles.sol\";\nimport \"./RegistryEntities.sol\";\n\n/**\n    Error codes:\n    - R1 = ERROR_REGISTRY_ONLY_PROTOCOL_REGISTER_ROLE\n    - R2 = ERROR_REGISTRY_ONLY_GUARDIAN\n    - R3 = ERROR_REGISTRY_ONLY_WHITELISTER_ROLE\n    - R4 = ERROR_REGISTRY_ONLY_COMMISSION_SETTER_ROLE\n */\n\ncontract RegistryStorageUpgradeable is AccessControlUpgradeable {\n    RegistryEntities.ProtocolCommissionArgs internal protocolCommissionArgs;\n    RegistryEntities.ProtocolAddressesArgs internal protocolAddressesArgs;\n    mapping(address => bool) internal whitelist;\n\n    modifier onlyProtocolRegister() {\n        require(hasRole(LibRoles.PROTOCOL_REGISTER_ROLE, msg.sender), \"R1\");\n        _;\n    }\n\n    modifier onlyGuardian() {\n        require(hasRole(LibRoles.GUARDIAN_ROLE, msg.sender), \"R2\");\n        _;\n    }\n\n    modifier onlyWhitelister() {\n        require(hasRole(LibRoles.WHITELISTER_ROLE, msg.sender), \"R3\");\n        _;\n    }\n\n    modifier onlyCommissionSetter() {\n        require(hasRole(LibRoles.COMMISSION_SETTER_ROLE, msg.sender), \"R4\");\n        _;\n    }\n\n    /// @notice internal init function that it is called only once upon deployment of the Opium.Registry contract. It initializes the DEFAULT_ADMIN_ROLE with the given governor address\n    /// @dev internally, it assigns all the setters roles to the DEFAULT_ADMIN_ROLE and it sets the initial protocol parameters\n    /// @param _governor address of the governance account which will be assigned the initial admin role\n    function __RegistryStorage__init(address _governor) internal initializer {\n        __AccessControl_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, _governor);\n        _setupRole(LibRoles.PROTOCOL_REGISTER_ROLE, _governor);\n        _setupRole(LibRoles.GUARDIAN_ROLE, _governor);\n        _setupRole(LibRoles.WHITELISTER_ROLE, _governor);\n        _setupRole(LibRoles.COMMISSION_SETTER_ROLE, _governor);\n\n        protocolCommissionArgs = RegistryEntities.ProtocolCommissionArgs({\n            derivativeAuthorCommissionBase: 10000,\n            noDataCancellationPeriod: 2 weeks,\n            protocolFeeCommissionBase: 10,\n            protocolCommissionPart: 1,\n            precisionFactor: 18,\n            paused: false\n        });\n    }\n}\n"
    },
    "contracts/Lib/LibRoles.sol": {
      "content": "pragma solidity 0.8.5;\n\nlibrary LibRoles {\n    bytes32 internal constant PROTOCOL_REGISTER_ROLE = keccak256(\"PROTOCOL_REGISTER_ROLE\");\n    bytes32 internal constant GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\n    bytes32 internal constant WHITELISTER_ROLE = keccak256(\"WHITELISTER_ROLE\"); \n    bytes32 internal constant COMMISSION_SETTER_ROLE = keccak256(\"COMMISSION_SETTER_ROLE\");\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/test/upgradeability/TestRegistryUpgrade.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"../../Registry/Registry.sol\";\n\ncontract TestRegistryUpgrade is RegistryUpgradeable {\n    function placeholder() external pure returns (string memory) {\n        return \"upgraded\";\n    }\n}\n"
    },
    "contracts/test/upgradeability/TestTokenSpenderUpgrade.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"../../TokenSpender.sol\";\n\ncontract TestTokenSpenderUpgrade is TokenSpender {\n    function placeholder() external pure returns (string memory) {\n        return \"upgraded\";\n    }\n}\n"
    },
    "contracts/Interface/ICore.sol": {
      "content": "pragma solidity 0.8.5;\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"../Lib/LibDerivative.sol\";\n\ninterface ICore {\n    function withdrawFee(address _tokenAddress) external;\n\n    function create(\n        LibDerivative.Derivative calldata _derivative,\n        uint256 _amount,\n        address[2] calldata _addresses\n    ) external;\n\n    function mint(uint256 _amount, address[2] calldata _positionAddresses) external;\n\n    function execute(address _positionAddress, uint256 _amount) external;\n\n    function execute(\n        address _positionOwner,\n        address _positionAddress,\n        uint256 _amount\n    ) external;\n\n    function execute(address[] calldata _positionsAddresses, uint256[] calldata _amounts) external;\n\n    function execute(\n        address _positionsOwner,\n        address[] calldata _positionsAddresses,\n        uint256[] calldata _amounts\n    ) external;\n\n    function redeem(address[2] calldata _positionAddresses, uint256 _amount) external;\n\n    function redeem(address[2][] calldata _positionsAddresses, uint256[] calldata _amounts) external;\n\n    function cancel(address _positionAddress, uint256 _amount) external;\n\n    function cancel(address[] calldata _positionsAddresses, uint256[] calldata _amounts) external;\n}\n"
    },
    "contracts/OracleAggregator.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"./Interface/IOracleId.sol\";\n\n/// @title Opium.OracleAggregator contract requests and caches the data from `oracleId`s and provides them to the Core for positions execution\ncontract OracleAggregator {\n    // Storage for the `oracleId` results\n    // dataCache[oracleId][timestamp] => data\n    mapping(address => mapping(uint256 => uint256)) private dataCache;\n\n    // Flags whether data were provided\n    // dataExist[oracleId][timestamp] => bool\n    mapping(address => mapping(uint256 => bool)) private dataExist;\n\n    // EXTERNAL FUNCTIONS\n\n    /// @notice Receives and caches data from `msg.sender`\n    /// @param timestamp uint256 Timestamp of data\n    /// @param data uint256 Data itself\n    function __callback(uint256 timestamp, uint256 data) external {\n        // Don't allow to push data twice\n        require(!dataExist[msg.sender][timestamp], \"O1\"); //ERROR_ORACLE_AGGREGATOR_DATA_ALREADY_EXIST\n\n        // Saving data\n        dataCache[msg.sender][timestamp] = data;\n\n        // Flagging that data were received\n        dataExist[msg.sender][timestamp] = true;\n    }\n\n    // VIEW FUNCTIONS\n\n    /// @notice Returns cached data if they exist, or reverts with an error\n    /// @param oracleId address Address of the `oracleId` smart contract\n    /// @param timestamp uint256 Timestamp at which data were requested\n    /// @return dataResult uint256 Cached data provided by `oracleId`\n    function getData(address oracleId, uint256 timestamp) external view returns (uint256 dataResult) {\n        // Check if Opium.OracleAggregator has data\n        require(hasData(oracleId, timestamp), \"O2\"); //ERROR_ORACLE_AGGREGATOR_DATA_DOESNT_EXIST\n\n        // Return cached data\n        dataResult = dataCache[oracleId][timestamp];\n    }\n\n    /// @notice Getter for dataExist mapping\n    /// @param oracleId address Address of the `oracleId` smart contract\n    /// @param timestamp uint256 Timestamp at which data were requested\n    /// @param result bool Returns whether data were provided already\n    function hasData(address oracleId, uint256 timestamp) public view returns (bool result) {\n        return dataExist[oracleId][timestamp];\n    }\n}\n"
    },
    "contracts/test/upgradeability/TestOracleAggregatorUpgrade.sol": {
      "content": "pragma solidity 0.8.5;\nimport \"../../OracleAggregator.sol\";\n\ncontract TestOracleAggregatorUpgrade is OracleAggregator {\n    function placeholder() external pure returns (string memory) {\n        return \"upgraded\";\n    }\n}\n"
    },
    "contracts/test/OptionCallSyntheticIdMock.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\";\n\nimport \"../Interface/IDerivativeLogic.sol\";\n\nimport \"../Helpers/ExecutableByThirdParty.sol\";\nimport \"../Helpers/HasCommission.sol\";\n\ncontract OptionCallSyntheticIdMock is IDerivativeLogic, ExecutableByThirdParty, HasCommission {\n    using SafeMath for uint256;\n\n    uint256 constant BASE_PPT = 1 ether;\n\n    constructor() {\n        /*\n        {\n            \"author\": \"DIB.ONE\",\n            \"type\": \"option\",\n            \"subtype\": \"call\",\n            \"description\": \"Option Call logic contract\"\n        }\n        */\n        emit MetadataSet(\n            '{\"author\":\"DIB.ONE\",\"type\":\"option\",\"subtype\":\"call\",\"description\":\"Option Call logic contract\"}'\n        );\n    }\n\n    /// @notice Getter for syntheticId author address\n    /// @return address syntheticId author address\n    function getAuthorAddress() public view virtual override(IDerivativeLogic, HasCommission) returns (address) {\n        return HasCommission.getAuthorAddress();\n    }\n\n    /// @notice Getter for syntheticId author commission\n    /// @return uint26 syntheticId author commission\n    function getAuthorCommission() public view override(IDerivativeLogic, HasCommission) returns (uint256) {\n        return HasCommission.getAuthorCommission();\n    }\n\n    function validateInput(LibDerivative.Derivative memory _derivative) public view override returns (bool) {\n        if (_derivative.params.length < 1) {\n            return false;\n        }\n\n        uint256 ppt;\n\n        if (_derivative.params.length == 2) {\n            ppt = _derivative.params[1];\n        } else {\n            ppt = BASE_PPT;\n        }\n\n        uint256 strikePrice = _derivative.params[0];\n        return (_derivative.margin > 0 && _derivative.endTime > block.timestamp && strikePrice > 0 && ppt > 0);\n    }\n\n    function getMargin(LibDerivative.Derivative memory _derivative)\n        public\n        view\n        override\n        returns (uint256 buyerMargin, uint256 sellerMargin)\n    {\n        buyerMargin = 0;\n        sellerMargin = _derivative.margin;\n    }\n\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\n        public\n        view\n        override\n        returns (uint256 buyerPayout, uint256 sellerPayout)\n    {\n        uint256 ppt;\n\n        uint256 strikePrice = _derivative.params[0];\n\n        if (_derivative.params.length == 2) {\n            ppt = _derivative.params[1];\n        } else {\n            ppt = BASE_PPT;\n        }\n\n        if (_result > strikePrice) {\n            uint256 profit = _result.sub(strikePrice);\n            profit = profit.mul(ppt).div(BASE_PPT);\n\n            if (profit < _derivative.margin) {\n                buyerPayout = profit;\n                sellerPayout = _derivative.margin.sub(profit);\n            } else {\n                buyerPayout = _derivative.margin;\n                sellerPayout = 0;\n            }\n        } else {\n            buyerPayout = 0;\n            sellerPayout = _derivative.margin;\n        }\n    }\n\n    function allowThirdpartyExecution(bool allow) public virtual override(IDerivativeLogic, ExecutableByThirdParty) {\n        ExecutableByThirdParty.allowThirdpartyExecution(allow);\n    }\n\n    function thirdpartyExecutionAllowed(address derivativeOwner)\n        public\n        view\n        virtual\n        override(IDerivativeLogic, ExecutableByThirdParty)\n        returns (bool)\n    {\n        return ExecutableByThirdParty.thirdpartyExecutionAllowed(derivativeOwner);\n    }\n}\n"
    },
    "openzeppelin-solidity/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/Helpers/ExecutableByThirdParty.sol": {
      "content": "pragma solidity 0.8.5;\n\n/// @title Opium.Helpers.ExecutableByThirdParty contract helps to syntheticId development and responsible for getting and setting thirdparty execution settings\ncontract ExecutableByThirdParty {\n    // Mapping holds whether position owner allows thirdparty execution\n    mapping(address => bool) internal thirdpartyExecutionAllowance;\n\n    /// @notice Getter for thirdparty execution allowance\n    /// @param derivativeOwner Address of position holder that's going to be executed\n    /// @return bool Returns whether thirdparty execution is allowed by derivativeOwner\n    function thirdpartyExecutionAllowed(address derivativeOwner) public view virtual returns (bool) {\n        return thirdpartyExecutionAllowance[derivativeOwner];\n    }\n\n    /// @notice Sets third party execution settings for `msg.sender`\n    /// @param allow Indicates whether thirdparty execution should be allowed or not\n    function allowThirdpartyExecution(bool allow) public virtual {\n        thirdpartyExecutionAllowance[msg.sender] = allow;\n    }\n}\n"
    },
    "contracts/Helpers/HasCommission.sol": {
      "content": "pragma solidity 0.8.5;\n\n/// @title Opium.Helpers.HasCommission contract helps to syntheticId development and responsible for commission and author address\ncontract HasCommission {\n    // Address of syntheticId author\n    address internal author;\n    // Commission is in Opium.Lib.LibCommission.COMMISSION_BASE base\n    uint256 internal constant AUTHOR_COMMISSION = 25; // 0.25% of profit\n\n    /// @notice Sets `msg.sender` as syntheticId author\n    constructor() {\n        author = msg.sender;\n    }\n\n    /// @notice Getter for syntheticId author address\n    /// @return address syntheticId author address\n    function getAuthorAddress() public view virtual returns (address) {\n        return author;\n    }\n\n    /// @notice Getter for syntheticId author commission\n    /// @return uint26 syntheticId author commission\n    function getAuthorCommission() public view virtual returns (uint256) {\n        return AUTHOR_COMMISSION;\n    }\n}\n"
    },
    "contracts/test/DummySyntheticIdMock.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\";\n\nimport \"../Interface/IDerivativeLogic.sol\";\n\nimport \"../Helpers/ExecutableByThirdParty.sol\";\nimport \"../Helpers/HasCommission.sol\";\n\ncontract DummySyntheticIdMock is IDerivativeLogic, ExecutableByThirdParty, HasCommission {\n    constructor() {\n        /*\n        {\n            \"author\": \"opium.team\",\n            \"type\": \"synthetic\",\n            \"subtype\": \"none\",\n            \"description\": \"Dummy synthetic for testing purposes\"\n        }\n        */\n        emit MetadataSet(\n            '{\"author\":\"opium.team\",\"type\":\"synthetic\",\"subtype\":\"none\",\"description\":\"Dummy synthetic for testing purposes\"}'\n        );\n    }\n\n    /// @notice Getter for syntheticId author address\n    /// @return address syntheticId author address\n    function getAuthorAddress() public view virtual override(IDerivativeLogic, HasCommission) returns (address) {\n        return HasCommission.getAuthorAddress();\n    }\n\n    /// @notice Getter for syntheticId author commission\n    /// @return uint26 syntheticId author commission\n    function getAuthorCommission() public view override(IDerivativeLogic, HasCommission) returns (uint256) {\n        return HasCommission.getAuthorCommission();\n    }\n\n    function validateInput(LibDerivative.Derivative memory _derivative) public view override returns (bool) {\n        _derivative;\n        return true;\n    }\n\n    function getMargin(LibDerivative.Derivative memory _derivative)\n        public\n        view\n        override\n        returns (uint256 buyerMargin, uint256 sellerMargin)\n    {\n        buyerMargin = _derivative.margin;\n        sellerMargin = _derivative.margin;\n    }\n\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\n        public\n        view\n        override\n        returns (uint256 buyerPayout, uint256 sellerPayout)\n    {\n        buyerPayout = _derivative.margin;\n        sellerPayout = _derivative.margin;\n        _result;\n    }\n\n    function allowThirdpartyExecution(bool allow) public virtual override(IDerivativeLogic, ExecutableByThirdParty) {\n        ExecutableByThirdParty.allowThirdpartyExecution(allow);\n    }\n\n    function thirdpartyExecutionAllowed(address derivativeOwner)\n        public\n        view\n        virtual\n        override(IDerivativeLogic, ExecutableByThirdParty)\n        returns (bool)\n    {\n        return ExecutableByThirdParty.thirdpartyExecutionAllowed(derivativeOwner);\n    }\n}\n"
    },
    "contracts/Helpers/PayoutHelper.sol": {
      "content": "pragma solidity 0.8.5;\n\nimport \"../Interface/IDerivativeLogic.sol\";\nimport \"../Lib/LibDerivative.sol\";\n\ncontract PayoutHelper {\n    struct ExecutionPayout {\n        uint256 buyerPayout;\n        uint256 sellerPayout;\n    }\n\n    function getExecutionPayouts(LibDerivative.Derivative calldata _derivative, uint256[] calldata _results)\n        external\n        view\n        returns (ExecutionPayout[] memory executionPayouts)\n    {\n        IDerivativeLogic logic = IDerivativeLogic(_derivative.syntheticId);\n\n        executionPayouts = new ExecutionPayout[](_results.length);\n\n        for (uint256 i = 0; i < _results.length; i++) {\n            (uint256 buyerPayout, uint256 sellerPayout) = logic.getExecutionPayout(_derivative, _results[i]);\n            executionPayouts[i] = ExecutionPayout(buyerPayout, sellerPayout);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
