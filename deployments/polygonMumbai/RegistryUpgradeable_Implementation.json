{
  "address": "0x9E5900bA0f35EcDCbf75d819B2C80E8FeA05537e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_noDataCancellationPeriod",
          "type": "uint256"
        }
      ],
      "name": "LogNoDataCancellationPeriodChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_opiumCommission",
          "type": "uint256"
        }
      ],
      "name": "LogOpiumCommissionChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_whitelisted",
          "type": "address"
        }
      ],
      "name": "LogWhitelistAccount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_whitelisted",
          "type": "address"
        }
      ],
      "name": "LogWhitelistAccountRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelisted",
          "type": "address"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolAddresses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "core",
              "type": "address"
            },
            {
              "internalType": "contract IOpiumProxyFactory",
              "name": "opiumProxyFactory",
              "type": "address"
            },
            {
              "internalType": "contract IOracleAggregator",
              "name": "oracleAggregator",
              "type": "address"
            },
            {
              "internalType": "contract ISyntheticAggregator",
              "name": "syntheticAggregator",
              "type": "address"
            },
            {
              "internalType": "contract ITokenSpender",
              "name": "tokenSpender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolFeeReceiver",
              "type": "address"
            }
          ],
          "internalType": "struct RegistryEntities.ProtocolAddressesArgs",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolCommissionParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "derivativeAuthorCommissionBase",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "noDataCancellationPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "protocolFeeCommissionBase",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "protocolCommissionPart",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "precisionFactor",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            }
          ],
          "internalType": "struct RegistryEntities.ProtocolCommissionArgs",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_opiumProxyFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleAggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_syntheticAggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenSpender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "name": "registerProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelisted",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_noDataCancellationPeriod",
          "type": "uint32"
        }
      ],
      "name": "setNoDataCancellationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_protocolCommissionPart",
          "type": "uint8"
        }
      ],
      "name": "setOpiumCommissionPart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f30caf8fa9e660f898ff2638633f6db97aa2b66a631fadaefe0abe6454b197a",
  "receipt": {
    "to": null,
    "from": "0x4497C837663970d9B9fC274342D15be1A2f96D1D",
    "contractAddress": "0x9E5900bA0f35EcDCbf75d819B2C80E8FeA05537e",
    "transactionIndex": 2,
    "gasUsed": "1315962",
    "logsBloom": "0x
    "blockHash": "0x597e0a39c3795735da5a208159a11aaa4a86522b71a66307ba1af265dfa4273d",
    "transactionHash": "0x3f30caf8fa9e660f898ff2638633f6db97aa2b66a631fadaefe0abe6454b197a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 20497320,
        "transactionHash": "0x3f30caf8fa9e660f898ff2638633f6db97aa2b66a631fadaefe0abe6454b197a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004497c837663970d9b9fc274342d15be1a2f96d1d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000e0694d6a4cc00000000000000000000000000000000000000000000000000455c69702dcbea000000000000000000000000000000000000000000000001ad168ad52ec6ba03da000000000000000000000000000000000000000000000000454e62db57271e000000000000000000000000000000000000000000000001ad1698dbc39d5ecfda",
        "logIndex": 4,
        "blockHash": "0x597e0a39c3795735da5a208159a11aaa4a86522b71a66307ba1af265dfa4273d"
      }
    ],
    "blockNumber": 20497320,
    "cumulativeGasUsed": "1445588",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "658042053585c715e56757d0a4fb45c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_noDataCancellationPeriod\",\"type\":\"uint256\"}],\"name\":\"LogNoDataCancellationPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_opiumCommission\",\"type\":\"uint256\"}],\"name\":\"LogOpiumCommissionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"LogWhitelistAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"LogWhitelistAccountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"core\",\"type\":\"address\"},{\"internalType\":\"contract IOpiumProxyFactory\",\"name\":\"opiumProxyFactory\",\"type\":\"address\"},{\"internalType\":\"contract IOracleAggregator\",\"name\":\"oracleAggregator\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticAggregator\",\"name\":\"syntheticAggregator\",\"type\":\"address\"},{\"internalType\":\"contract ITokenSpender\",\"name\":\"tokenSpender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolFeeReceiver\",\"type\":\"address\"}],\"internalType\":\"struct RegistryEntities.ProtocolAddressesArgs\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolCommissionParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"derivativeAuthorCommissionBase\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"noDataCancellationPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"protocolFeeCommissionBase\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"protocolCommissionPart\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"precisionFactor\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"internalType\":\"struct RegistryEntities.ProtocolCommissionArgs\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opiumProxyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_syntheticAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSpender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"registerProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_noDataCancellationPeriod\",\"type\":\"uint32\"}],\"name\":\"setNoDataCancellationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolCommissionPart\",\"type\":\"uint8\"}],\"name\":\"setOpiumCommissionPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getProtocolAddresses()\":{\"returns\":{\"_0\":\"RegistryEntities.ProtocolAddressesArgs struct that packs all the interfaces of the Opium Protocol\"}},\"getProtocolCommissionParams()\":{\"returns\":{\"_0\":\"RegistryEntities.ProtocolAddressesArgs struct that packs all the interfaces of the Opium Protocol.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address)\":{\"details\":\"Calls RegistryStorageUpgradeable.__RegistryStorage__init\",\"params\":{\"_governor\":\"address of the governance account which will be assigned the initial admin role\"}},\"pause()\":{\"details\":\"it fails if the protocol is already paused\"},\"registerProtocol(address,address,address,address,address,address)\":{\"details\":\"the contracts' addresses are set using their respective interfaces\",\"params\":{\"_core\":\"address of Opium.Core\",\"_opiumProxyFactory\":\"address of Opium.OpiumProxyFactory\",\"_oracleAggregator\":\"address of Opium.OracleAggregator\",\"_protocolFeeReceiver\":\"address of the recipient of Opium Protocol's fees\",\"_syntheticAggregator\":\"address of Opium.SyntheticAggregator\",\"_tokenSpender\":\"address of Opium.TokenSpender\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"it fails if the protocol is not paused\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToWhitelist(address)\":{\"notice\":\"it allows the WHITELISTER role to add an address to the whitelist\"},\"getCore()\":{\"notice\":\"Returns address of Opium.Core\"},\"getOracleAggregator()\":{\"notice\":\"Returns address of Opium.OracleAggregator\"},\"getProtocolAddresses()\":{\"notice\":\"Returns the interfaces of the Opium protocol contracts\"},\"getProtocolCommissionParams()\":{\"notice\":\"Returns all the commission-related parameters of the Opium protocol contracts\"},\"initialize(address)\":{\"notice\":\"it is called only once upon deployment of the contract plus the protocol's fee receiver. It initializes the registry storage with the given governor address as the admin role\"},\"isPaused()\":{\"notice\":\"Returns whether the Opium protocol is paused\"},\"isWhitelisted(address)\":{\"notice\":\"Returns whether a given address is whitelisted\"},\"pause()\":{\"notice\":\"allows the GUARDIAN role to pause the Opium Protocol\"},\"registerProtocol(address,address,address,address,address,address)\":{\"notice\":\"it allows the PROTOCOL_REGISTER role to set the addresses of Opium Protocol's contracts\"},\"removeFromWhitelist(address)\":{\"notice\":\"it allows the WHITELISTER role to remove an address from the whitelist\"},\"setNoDataCancellationPeriod(uint32)\":{\"notice\":\"allows the COMMISSIONER role to change the noDataCancellationPeriod (the timeframe after which a derivative can be cancelled if the oracle has not provided any data)\"},\"setOpiumCommissionPart(uint8)\":{\"notice\":\"allows the COMMISSIONER role to change the protocolReceiver's fee\"},\"unpause()\":{\"notice\":\"allows the GUARDIAN role to unpause the Opium Protocol\"}},\"notice\":\"Error codes: - R5 = ERROR_REGISTRY_NOT_PAUSED - R6 = ERROR_REGISTRY_ALREADY_PAUSED\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry/Registry.sol\":\"RegistryUpgradeable\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/Interface/IOpiumProxyFactory.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\ninterface IOpiumProxyFactory {\\n    function getImplementationAddress() external view returns (address);\\n\\n    function create(\\n        address _buyer,\\n        address _seller,\\n        uint256 _amount,\\n        bytes32 _derivativeHash,\\n        LibDerivative.Derivative calldata _derivative\\n    ) external;\\n\\n    function mintPair(\\n        address _buyer,\\n        address _seller,\\n        address _longPositionAddress,\\n        address _shortPositionAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function burnPair(\\n        address _tokenOwner,\\n        address _longToken,\\n        address _shortToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        address _tokenOwner,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb5cd1d493bda48bb8974196c7dc77c1f67b334adee59020d252907808ddce74\"},\"contracts/Interface/IOracleAggregator.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\ninterface IOracleAggregator {\\n    function __callback(uint256 timestamp, uint256 data) external;\\n\\n    function getData(address oracleId, uint256 timestamp) external view returns (uint256 dataResult);\\n\\n    function hasData(address oracleId, uint256 timestamp) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf7c9726dd6474c8c52bebc84aee87e000514a26bd19d74786b86df981664cdd5\"},\"contracts/Interface/ISyntheticAggregator.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\ninterface ISyntheticAggregator {\\n    struct SyntheticCache {\\n        uint256 buyerMargin;\\n        uint256 sellerMargin;\\n        uint256 commission; // rename it to author commission for clarity\\n        address authorAddress;\\n        bool init;\\n        // SyntheticTypes typeByHash;\\n    }\\n\\n    function getSyntheticCache(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (SyntheticCache memory);\\n\\n    function getMargin(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (uint256 buyerMargin, uint256 sellerMargin);\\n}\\n\",\"keccak256\":\"0x0dc6de045cb931209ed9e629be93b919634b241b8785726788dfe1fdcfa9d114\"},\"contracts/Interface/ITokenSpender.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITokenSpender {\\n    function claimTokens(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x28849197d4a2ac4ce19a2b9a01ba9cf3f9d83462e827b8588e96e104ce686298\"},\"contracts/Lib/LibDerivative.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\n/// @title Opium.Lib.LibDerivative contract should be inherited by contracts that use Derivative structure and calculate derivativeHash\\nlibrary LibDerivative {\\n    enum PositionType {\\n        SHORT,\\n        LONG\\n    }\\n    \\n    // Opium derivative structure (ticker) definition\\n    struct Derivative {\\n        // Margin parameter for syntheticId\\n        uint256 margin;\\n        // Maturity of derivative\\n        uint256 endTime;\\n        // Additional parameters for syntheticId\\n        uint256[] params;\\n        // oracleId of derivative\\n        address oracleId;\\n        // Margin token address of derivative\\n        address token;\\n        // syntheticId of derivative\\n        address syntheticId;\\n    }\\n\\n    /// @notice Calculates hash of provided Derivative\\n    /// @param _derivative Derivative Instance of derivative to hash\\n    /// @return derivativeHash bytes32 Derivative hash\\n    function getDerivativeHash(Derivative memory _derivative) internal pure returns (bytes32 derivativeHash) {\\n        derivativeHash = keccak256(abi.encodePacked(\\n            _derivative.margin,\\n            _derivative.endTime,\\n            _derivative.params,\\n            _derivative.oracleId,\\n            _derivative.token,\\n            _derivative.syntheticId\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x9c8656fb850636580a40cebb4c7b564a76d09ee43ad5ee564b5e59235f5eccfa\"},\"contracts/Lib/LibRoles.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nlibrary LibRoles {\\n    bytes32 internal constant PROTOCOL_REGISTER_ROLE = keccak256(\\\"PROTOCOL_REGISTER_ROLE\\\");\\n    bytes32 internal constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    bytes32 internal constant WHITELISTER_ROLE = keccak256(\\\"WHITELISTER_ROLE\\\"); \\n    bytes32 internal constant COMMISSION_SETTER_ROLE = keccak256(\\\"COMMISSION_SETTER_ROLE\\\");\\n}\",\"keccak256\":\"0x34d19966b66bea154e7cd45a36d038c71ec6cf40bf7b49b6438be202c39719a5\"},\"contracts/Registry/Registry.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"./RegistryStorageUpgradeable.sol\\\";\\nimport \\\"../Lib/LibRoles.sol\\\";\\nimport \\\"../Interface/IOpiumProxyFactory.sol\\\";\\nimport \\\"../Interface/ISyntheticAggregator.sol\\\";\\nimport \\\"../Interface/IOracleAggregator.sol\\\";\\nimport \\\"../Interface/ITokenSpender.sol\\\";\\n\\n/**\\n    Error codes:\\n    - R5 = ERROR_REGISTRY_NOT_PAUSED\\n    - R6 = ERROR_REGISTRY_ALREADY_PAUSED\\n */\\n\\ncontract RegistryUpgradeable is RegistryStorageUpgradeable {\\n    //add events\\n    event LogOpiumCommissionChange(uint256 _opiumCommission);\\n    event LogNoDataCancellationPeriodChange(uint256 _noDataCancellationPeriod);\\n    event LogWhitelistAccount(address _whitelisted);\\n    event LogWhitelistAccountRemoved(address _whitelisted);\\n\\n    /// @notice it is called only once upon deployment of the contract plus the protocol's fee receiver. It initializes the registry storage with the given governor address as the admin role\\n    /// @dev Calls RegistryStorageUpgradeable.__RegistryStorage__init\\n    /// @param _governor address of the governance account which will be assigned the initial admin role\\n    function initialize(address _governor) external initializer {\\n        __RegistryStorage__init(_governor);\\n    }\\n\\n    /// @notice it allows the PROTOCOL_REGISTER role to set the addresses of Opium Protocol's contracts\\n    /// @dev the contracts' addresses are set using their respective interfaces\\n    /// @param _opiumProxyFactory address of Opium.OpiumProxyFactory\\n    /// @param _core address of Opium.Core\\n    /// @param _oracleAggregator address of Opium.OracleAggregator\\n    /// @param _syntheticAggregator address of Opium.SyntheticAggregator\\n    /// @param _tokenSpender address of Opium.TokenSpender\\n    /// @param _protocolFeeReceiver address of the recipient of Opium Protocol's fees\\n    function registerProtocol(\\n        address _opiumProxyFactory,\\n        address _core,\\n        address _oracleAggregator,\\n        address _syntheticAggregator,\\n        address _tokenSpender,\\n        address _protocolFeeReceiver\\n    ) external onlyProtocolRegister {\\n        require(\\n            _opiumProxyFactory != address(0) &&\\n                _core != address(0) &&\\n                _oracleAggregator != address(0) &&\\n                _syntheticAggregator != address(0) &&\\n                _tokenSpender != address(0) &&\\n                _protocolFeeReceiver != address(0),\\n            \\\"R5\\\" //ERROR_REGISTRY_CANT_BE_ZERO_ADDRESS\\n        );\\n\\n        protocolAddressesArgs = RegistryEntities.ProtocolAddressesArgs({\\n            opiumProxyFactory: IOpiumProxyFactory(_opiumProxyFactory),\\n            core: _core,\\n            oracleAggregator: IOracleAggregator(_oracleAggregator),\\n            syntheticAggregator: ISyntheticAggregator(_syntheticAggregator),\\n            tokenSpender: ITokenSpender(_tokenSpender),\\n            protocolFeeReceiver: _protocolFeeReceiver\\n        });\\n    }\\n\\n    // SETTERS\\n\\n    /// @notice allows the GUARDIAN role to pause the Opium Protocol\\n    /// @dev it fails if the protocol is already paused\\n    function pause() external onlyGuardian {\\n        require(protocolCommissionArgs.paused == false, \\\"R6\\\"); //already paused\\n        protocolCommissionArgs.paused = true;\\n    }\\n\\n    /// @notice allows the GUARDIAN role to unpause the Opium Protocol\\n    /// @dev it fails if the protocol is not paused\\n    function unpause() external onlyGuardian {\\n        require(protocolCommissionArgs.paused == true, \\\"R7\\\"); //not paused\\n        protocolCommissionArgs.paused = false;\\n    }\\n\\n    /// @notice it allows the WHITELISTER role to add an address to the whitelist\\n    function addToWhitelist(address _whitelisted) external onlyWhitelister {\\n        whitelist[_whitelisted] = true;\\n        emit LogWhitelistAccount(_whitelisted);\\n    }\\n\\n    /// @notice it allows the WHITELISTER role to remove an address from the whitelist\\n    function removeFromWhitelist(address _whitelisted) external onlyWhitelister {\\n        delete whitelist[_whitelisted];\\n        emit LogWhitelistAccountRemoved(_whitelisted);\\n    }\\n\\n    /// @notice allows the COMMISSIONER role to change the protocolReceiver's fee\\n    function setOpiumCommissionPart(uint8 _protocolCommissionPart) external onlyCommissionSetter {\\n        protocolCommissionArgs.protocolCommissionPart = _protocolCommissionPart;\\n        emit LogOpiumCommissionChange(_protocolCommissionPart);\\n    }\\n\\n    /// @notice allows the COMMISSIONER role to change the noDataCancellationPeriod (the timeframe after which a derivative can be cancelled if the oracle has not provided any data)\\n    function setNoDataCancellationPeriod(uint32 _noDataCancellationPeriod) external onlyCommissionSetter {\\n        protocolCommissionArgs.noDataCancellationPeriod = _noDataCancellationPeriod;\\n        emit LogNoDataCancellationPeriodChange(_noDataCancellationPeriod);\\n    }\\n\\n    // GETTERS\\n\\n    /// @notice Returns all the commission-related parameters of the Opium protocol contracts\\n    ///@return RegistryEntities.ProtocolAddressesArgs struct that packs all the interfaces of the Opium Protocol.\\n    function getProtocolCommissionParams() external view returns (RegistryEntities.ProtocolCommissionArgs memory) {\\n        return protocolCommissionArgs;\\n    }\\n\\n    /// @notice Returns the interfaces of the Opium protocol contracts\\n    ///@return RegistryEntities.ProtocolAddressesArgs struct that packs all the interfaces of the Opium Protocol\\n    function getProtocolAddresses() external view returns (RegistryEntities.ProtocolAddressesArgs memory) {\\n        return protocolAddressesArgs;\\n    }\\n\\n    /// @notice Returns address of Opium.Core\\n    function getCore() external view returns (address) {\\n        return protocolAddressesArgs.core;\\n    }\\n\\n    /// @notice Returns address of Opium.OracleAggregator\\n    function getOracleAggregator() external view returns (address) {\\n        return address(protocolAddressesArgs.oracleAggregator);\\n    }\\n\\n    /// @notice Returns whether the Opium protocol is paused\\n    function isPaused() external view returns (bool) {\\n        return protocolCommissionArgs.paused;\\n    }\\n\\n    /// @notice Returns whether a given address is whitelisted\\n    function isWhitelisted(address _address) external view returns (bool) {\\n        return whitelist[_address];\\n    }\\n}\\n\",\"keccak256\":\"0xbef2a6939e97546a4c01bcb15a6aeb51b336966a7fdc1c2f1b27fb474a267ce0\"},\"contracts/Registry/RegistryEntities.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"../Interface/IOpiumProxyFactory.sol\\\";\\nimport \\\"../Interface/ISyntheticAggregator.sol\\\";\\nimport \\\"../Interface/IOracleAggregator.sol\\\";\\nimport \\\"../Interface/ITokenSpender.sol\\\";\\n\\nlibrary RegistryEntities {\\n    struct ProtocolCommissionArgs {\\n        // Represents 100% base for commissions calculation\\n        uint32 derivativeAuthorCommissionBase;\\n        // Period of time after which ticker could be canceled if no data was provided to the `oracleId`\\n        uint32 noDataCancellationPeriod;\\n        // Represents 100% base for Opium commission\\n        uint8 protocolFeeCommissionBase;\\n        // Represents which part of `syntheticId` author commissions goes to opium\\n        uint8 protocolCommissionPart;\\n        // scaling factor\\n        uint8 precisionFactor;\\n        bool paused;\\n    }\\n\\n    struct ProtocolAddressesArgs {\\n        // Address of Opium.Core contract\\n        address core;\\n        // Address of Opium.OpiumProxyFactory contract\\n        IOpiumProxyFactory opiumProxyFactory;\\n        // Address of Opium.OracleAggregator contract\\n        IOracleAggregator oracleAggregator;\\n        // Address of Opium.SyntheticAggregator contract\\n        ISyntheticAggregator syntheticAggregator;\\n        // Address of Opium.TokenSpender contract\\n        ITokenSpender tokenSpender;\\n        // Address of protocol commission receiver\\n        address protocolFeeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x5c842f2678e0ab1c8e19ff0e097572984bd56658de6bfeb9d387623bbe35c3ae\"},\"contracts/Registry/RegistryStorageUpgradeable.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../Lib/LibRoles.sol\\\";\\nimport \\\"./RegistryEntities.sol\\\";\\n\\n/**\\n    Error codes:\\n    - R1 = ERROR_REGISTRY_ONLY_PROTOCOL_REGISTER_ROLE\\n    - R2 = ERROR_REGISTRY_ONLY_GUARDIAN\\n    - R3 = ERROR_REGISTRY_ONLY_WHITELISTER_ROLE\\n    - R4 = ERROR_REGISTRY_ONLY_COMMISSION_SETTER_ROLE\\n */\\n\\ncontract RegistryStorageUpgradeable is AccessControlUpgradeable {\\n    RegistryEntities.ProtocolCommissionArgs internal protocolCommissionArgs;\\n    RegistryEntities.ProtocolAddressesArgs internal protocolAddressesArgs;\\n    mapping(address => bool) internal whitelist;\\n\\n    modifier onlyProtocolRegister() {\\n        require(hasRole(LibRoles.PROTOCOL_REGISTER_ROLE, msg.sender), \\\"R1\\\");\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(hasRole(LibRoles.GUARDIAN_ROLE, msg.sender), \\\"R2\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelister() {\\n        require(hasRole(LibRoles.WHITELISTER_ROLE, msg.sender), \\\"R3\\\");\\n        _;\\n    }\\n\\n    modifier onlyCommissionSetter() {\\n        require(hasRole(LibRoles.COMMISSION_SETTER_ROLE, msg.sender), \\\"R4\\\");\\n        _;\\n    }\\n\\n    /// @notice internal init function that it is called only once upon deployment of the Opium.Registry contract. It initializes the DEFAULT_ADMIN_ROLE with the given governor address\\n    /// @dev internally, it assigns all the setters roles to the DEFAULT_ADMIN_ROLE and it sets the initial protocol parameters\\n    /// @param _governor address of the governance account which will be assigned the initial admin role\\n    function __RegistryStorage__init(address _governor) internal initializer {\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _governor);\\n        _setupRole(LibRoles.PROTOCOL_REGISTER_ROLE, _governor);\\n        _setupRole(LibRoles.GUARDIAN_ROLE, _governor);\\n        _setupRole(LibRoles.WHITELISTER_ROLE, _governor);\\n        _setupRole(LibRoles.COMMISSION_SETTER_ROLE, _governor);\\n\\n        protocolCommissionArgs = RegistryEntities.ProtocolCommissionArgs({\\n            derivativeAuthorCommissionBase: 10000,\\n            noDataCancellationPeriod: 2 weeks,\\n            protocolFeeCommissionBase: 10,\\n            protocolCommissionPart: 1,\\n            precisionFactor: 18,\\n            paused: false\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0x47f8f407eb4f7ba38f71c39109be4a86c7d0b786f11402769333c528792f2124\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506116df806100206000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806391d14854116100d8578063c4d66de81161008c578063d547741f11610066578063d547741f14610509578063da4fbe521461051c578063e43252d71461052d57600080fd5b8063c4d66de8146104be578063c6676d6d146104d1578063d34ac2bc146104e457600080fd5b8063a217fddf116100bd578063a217fddf14610491578063a319239514610499578063b187bd26146104ac57600080fd5b806391d148541461036f578063a1774da0146103a857600080fd5b80633af32abf1161012f5780633f4ba83a116101145780633f4ba83a1461034c5780638456cb59146103545780638ab1d6811461035c57600080fd5b80633af32abf146102105780633c2ff9e41461023c57600080fd5b8063248a9ca311610160578063248a9ca3146101b95780632f2ff15d146101ea57806336568abe146101fd57600080fd5b806301ffc9a71461017c5780632420d332146101a4575b600080fd5b61018f61018a3660046114c2565b610540565b60405190151581526020015b60405180910390f35b6101b76101b2366004611512565b610577565b005b6101dc6101c736600461147d565b60009081526065602052604090206001015490565b60405190815260200161019b565b6101b76101f8366004611496565b610640565b6101b761020b366004611496565b61066b565b61018f61021e3660046113ee565b6001600160a01b03166000908152609e602052604090205460ff1690565b6102eb6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c08101825260975463ffffffff8082168352640100000000820416602083015260ff68010000000000000000820481169383019390935269010000000000000000008104831660608301526a0100000000000000000000810483166080830152600160581b9004909116151560a082015290565b60405161019b9190600060c08201905063ffffffff8084511683528060208501511660208401525060ff604084015116604083015260ff606084015116606083015260ff608084015116608083015260a0830151151560a083015292915050565b6101b76106f7565b6101b76107b4565b6101b761036a3660046113ee565b610873565b61018f61037d366004611496565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6104306040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c0810182526098546001600160a01b03908116825260995481166020830152609a54811692820192909252609b5482166060820152609c5482166080820152609d5490911660a082015290565b60405161019b9190600060c0820190506001600160a01b038084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525092915050565b6101dc600081565b6101b76104a73660046114ec565b610927565b609754600160581b900460ff1661018f565b6101b76104cc3660046113ee565b6109e0565b6101b76104df366004611409565b610a9c565b609a546001600160a01b03165b6040516001600160a01b03909116815260200161019b565b6101b7610517366004611496565b610c53565b6098546001600160a01b03166104f1565b6101b761053b3660046113ee565b610c79565b60006001600160e01b03198216637965db0b60e01b148061057157506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081527fd0e0b7a135c76b464828dc9d8bd671c6d2e8a5ebef926d6c214cb2718fbba078602052604090205460ff166105df5760405162461bcd60e51b8152602060048201526002602482015261148d60f21b60448201526064015b60405180910390fd5b6097805469ff0000000000000000001916690100000000000000000060ff8416908102919091179091556040519081527f581e8a0876b053b6ffd11b3bc8477b4a99a47b3d70f376cc02c0e4f565d12ef3906020015b60405180910390a150565b60008281526065602052604090206001015461065c8133610d30565b6106668383610db0565b505050565b6001600160a01b03811633146106e95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105d6565b6106f38282610e52565b5050565b3360009081527f069cdf9dfc2229276970916c1858214fdc1e7fbd582c817d68d15a269f9e469c602052604090205460ff1661075a5760405162461bcd60e51b8152602060048201526002602482015261291960f11b60448201526064016105d6565b609754600160581b900460ff16151560011461079d5760405162461bcd60e51b8152602060048201526002602482015261523760f01b60448201526064016105d6565b609780546bff000000000000000000000019169055565b3360009081527f069cdf9dfc2229276970916c1858214fdc1e7fbd582c817d68d15a269f9e469c602052604090205460ff166108175760405162461bcd60e51b8152602060048201526002602482015261291960f11b60448201526064016105d6565b609754600160581b900460ff16156108565760405162461bcd60e51b8152602060048201526002602482015261291b60f11b60448201526064016105d6565b609780546bff00000000000000000000001916600160581b179055565b3360009081527f2f54fa84bcabe2f54c105880df04fd8c3dc2d1a0ff002170576ebe448676343c602052604090205460ff166108d65760405162461bcd60e51b8152602060048201526002602482015261523360f01b60448201526064016105d6565b6001600160a01b0381166000818152609e6020908152604091829020805460ff1916905590519182527f9b20e7185aa7ad29f95184f81058e9e13bd095755c5b343fb2883a9d8b8ed9b29101610635565b3360009081527fd0e0b7a135c76b464828dc9d8bd671c6d2e8a5ebef926d6c214cb2718fbba078602052604090205460ff1661098a5760405162461bcd60e51b8152602060048201526002602482015261148d60f21b60448201526064016105d6565b6097805467ffffffff00000000191664010000000063ffffffff8416908102919091179091556040519081527fdf6662a0cff2fd6bada268038ef2afd3b85fb8111f741b174b70aa5ace6f419f90602001610635565b600054610100900460ff16806109f9575060005460ff16155b610a5c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d6565b600054610100900460ff16158015610a7e576000805461ffff19166101011790555b610a8782610ed5565b80156106f3576000805461ff00191690555050565b3360009081527f3aacdcebcc0b47449d9086fb19f58dfa148ee461549ae856ff2b95b720475693602052604090205460ff16610aff5760405162461bcd60e51b8152602060048201526002602482015261523160f01b60448201526064016105d6565b6001600160a01b03861615801590610b1f57506001600160a01b03851615155b8015610b3357506001600160a01b03841615155b8015610b4757506001600160a01b03831615155b8015610b5b57506001600160a01b03821615155b8015610b6f57506001600160a01b03811615155b610ba05760405162461bcd60e51b8152602060048201526002602482015261523560f01b60448201526064016105d6565b6040805160c0810182526001600160a01b039687168082529787166020820181905295871691810182905293861660608501819052928616608085018190529190951660a0909301839052609880547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169097179055609980548716909417909355609a80548616909417909355609b80548516909317909255609c805484169091179055609d8054909216179055565b600082815260656020526040902060010154610c6f8133610d30565b6106668383610e52565b3360009081527f2f54fa84bcabe2f54c105880df04fd8c3dc2d1a0ff002170576ebe448676343c602052604090205460ff16610cdc5760405162461bcd60e51b8152602060048201526002602482015261523360f01b60448201526064016105d6565b6001600160a01b0381166000818152609e6020908152604091829020805460ff1916600117905590519182527f72a9179019a18e39f5015c58ef0ea3cfe01f7978344f5203c5709706a7c497949101610635565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166106f357610d6e816001600160a01b0316601461109c565b610d7983602061109c565b604051602001610d8a929190611535565b60408051601f198184030181529082905262461bcd60e51b82526105d6916004016115b6565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166106f35760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610e0e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156106f35760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680610eee575060005460ff16155b610f515760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d6565b600054610100900460ff16158015610f73576000805461ffff19166101011790555b610f7b61124c565b610f86600083611317565b610fb07f523807b0e14b2fdb694a9155924ffe8f35f22c2cc67fcced3d2c681938e6124c83611317565b610fda7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504183611317565b6110047f8619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a83611317565b61102e7facba87e2a940d441e330bf0eb2d5ce612db851ffca550e82933626be5abd397283611317565b6040805160c0810182526127108152621275006020820152600a918101919091526001606082015260126080820152600060a090910152609780546bffffffffffffffffffffffff19166a12010a001275000000271017905580156106f3576000805461ff00191690555050565b606060006110ab836002611601565b6110b69060026115e9565b67ffffffffffffffff8111156110ce576110ce611693565b6040519080825280601f01601f1916602001820160405280156110f8576020820181803683370190505b509050600360fc1b816000815181106111135761111361167d565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111425761114261167d565b60200101906001600160f81b031916908160001a9053506000611166846002611601565b6111719060016115e9565b90505b60018111156111f6577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106111b2576111b261167d565b1a60f81b8282815181106111c8576111c861167d565b60200101906001600160f81b031916908160001a90535060049490941c936111ef81611650565b9050611174565b5083156112455760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105d6565b9392505050565b600054610100900460ff1680611265575060005460ff16155b6112c85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d6565b600054610100900460ff161580156112ea576000805461ffff19166101011790555b6112f2611321565b6112fa611321565b611302611321565b8015611314576000805461ff00191690555b50565b6106f38282610db0565b600054610100900460ff168061133a575060005460ff16155b61139d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d6565b600054610100900460ff16158015611302576000805461ffff19166101011790558015611314576000805461ff001916905550565b80356001600160a01b03811681146113e957600080fd5b919050565b60006020828403121561140057600080fd5b611245826113d2565b60008060008060008060c0878903121561142257600080fd5b61142b876113d2565b9550611439602088016113d2565b9450611447604088016113d2565b9350611455606088016113d2565b9250611463608088016113d2565b915061147160a088016113d2565b90509295509295509295565b60006020828403121561148f57600080fd5b5035919050565b600080604083850312156114a957600080fd5b823591506114b9602084016113d2565b90509250929050565b6000602082840312156114d457600080fd5b81356001600160e01b03198116811461124557600080fd5b6000602082840312156114fe57600080fd5b813563ffffffff8116811461124557600080fd5b60006020828403121561152457600080fd5b813560ff8116811461124557600080fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161156d816017850160208801611620565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516115aa816028840160208801611620565b01602801949350505050565b60208152600082518060208401526115d5816040850160208701611620565b601f01601f19169190910160400192915050565b600082198211156115fc576115fc611667565b500190565b600081600019048311821515161561161b5761161b611667565b500290565b60005b8381101561163b578181015183820152602001611623565b8381111561164a576000848401525b50505050565b60008161165f5761165f611667565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212208814fb928ae1ffd413f8d28ba1b096d5d02562fbc06d645f8f1ca6e4137e5b4c64736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c806391d14854116100d8578063c4d66de81161008c578063d547741f11610066578063d547741f14610509578063da4fbe521461051c578063e43252d71461052d57600080fd5b8063c4d66de8146104be578063c6676d6d146104d1578063d34ac2bc146104e457600080fd5b8063a217fddf116100bd578063a217fddf14610491578063a319239514610499578063b187bd26146104ac57600080fd5b806391d148541461036f578063a1774da0146103a857600080fd5b80633af32abf1161012f5780633f4ba83a116101145780633f4ba83a1461034c5780638456cb59146103545780638ab1d6811461035c57600080fd5b80633af32abf146102105780633c2ff9e41461023c57600080fd5b8063248a9ca311610160578063248a9ca3146101b95780632f2ff15d146101ea57806336568abe146101fd57600080fd5b806301ffc9a71461017c5780632420d332146101a4575b600080fd5b61018f61018a3660046114c2565b610540565b60405190151581526020015b60405180910390f35b6101b76101b2366004611512565b610577565b005b6101dc6101c736600461147d565b60009081526065602052604090206001015490565b60405190815260200161019b565b6101b76101f8366004611496565b610640565b6101b761020b366004611496565b61066b565b61018f61021e3660046113ee565b6001600160a01b03166000908152609e602052604090205460ff1690565b6102eb6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c08101825260975463ffffffff8082168352640100000000820416602083015260ff68010000000000000000820481169383019390935269010000000000000000008104831660608301526a0100000000000000000000810483166080830152600160581b9004909116151560a082015290565b60405161019b9190600060c08201905063ffffffff8084511683528060208501511660208401525060ff604084015116604083015260ff606084015116606083015260ff608084015116608083015260a0830151151560a083015292915050565b6101b76106f7565b6101b76107b4565b6101b761036a3660046113ee565b610873565b61018f61037d366004611496565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6104306040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c0810182526098546001600160a01b03908116825260995481166020830152609a54811692820192909252609b5482166060820152609c5482166080820152609d5490911660a082015290565b60405161019b9190600060c0820190506001600160a01b038084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525092915050565b6101dc600081565b6101b76104a73660046114ec565b610927565b609754600160581b900460ff1661018f565b6101b76104cc3660046113ee565b6109e0565b6101b76104df366004611409565b610a9c565b609a546001600160a01b03165b6040516001600160a01b03909116815260200161019b565b6101b7610517366004611496565b610c53565b6098546001600160a01b03166104f1565b6101b761053b3660046113ee565b610c79565b60006001600160e01b03198216637965db0b60e01b148061057157506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081527fd0e0b7a135c76b464828dc9d8bd671c6d2e8a5ebef926d6c214cb2718fbba078602052604090205460ff166105df5760405162461bcd60e51b8152602060048201526002602482015261148d60f21b60448201526064015b60405180910390fd5b6097805469ff0000000000000000001916690100000000000000000060ff8416908102919091179091556040519081527f581e8a0876b053b6ffd11b3bc8477b4a99a47b3d70f376cc02c0e4f565d12ef3906020015b60405180910390a150565b60008281526065602052604090206001015461065c8133610d30565b6106668383610db0565b505050565b6001600160a01b03811633146106e95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105d6565b6106f38282610e52565b5050565b3360009081527f069cdf9dfc2229276970916c1858214fdc1e7fbd582c817d68d15a269f9e469c602052604090205460ff1661075a5760405162461bcd60e51b8152602060048201526002602482015261291960f11b60448201526064016105d6565b609754600160581b900460ff16151560011461079d5760405162461bcd60e51b8152602060048201526002602482015261523760f01b60448201526064016105d6565b609780546bff000000000000000000000019169055565b3360009081527f069cdf9dfc2229276970916c1858214fdc1e7fbd582c817d68d15a269f9e469c602052604090205460ff166108175760405162461bcd60e51b8152602060048201526002602482015261291960f11b60448201526064016105d6565b609754600160581b900460ff16156108565760405162461bcd60e51b8152602060048201526002602482015261291b60f11b60448201526064016105d6565b609780546bff00000000000000000000001916600160581b179055565b3360009081527f2f54fa84bcabe2f54c105880df04fd8c3dc2d1a0ff002170576ebe448676343c602052604090205460ff166108d65760405162461bcd60e51b8152602060048201526002602482015261523360f01b60448201526064016105d6565b6001600160a01b0381166000818152609e6020908152604091829020805460ff1916905590519182527f9b20e7185aa7ad29f95184f81058e9e13bd095755c5b343fb2883a9d8b8ed9b29101610635565b3360009081527fd0e0b7a135c76b464828dc9d8bd671c6d2e8a5ebef926d6c214cb2718fbba078602052604090205460ff1661098a5760405162461bcd60e51b8152602060048201526002602482015261148d60f21b60448201526064016105d6565b6097805467ffffffff00000000191664010000000063ffffffff8416908102919091179091556040519081527fdf6662a0cff2fd6bada268038ef2afd3b85fb8111f741b174b70aa5ace6f419f90602001610635565b600054610100900460ff16806109f9575060005460ff16155b610a5c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d6565b600054610100900460ff16158015610a7e576000805461ffff19166101011790555b610a8782610ed5565b80156106f3576000805461ff00191690555050565b3360009081527f3aacdcebcc0b47449d9086fb19f58dfa148ee461549ae856ff2b95b720475693602052604090205460ff16610aff5760405162461bcd60e51b8152602060048201526002602482015261523160f01b60448201526064016105d6565b6001600160a01b03861615801590610b1f57506001600160a01b03851615155b8015610b3357506001600160a01b03841615155b8015610b4757506001600160a01b03831615155b8015610b5b57506001600160a01b03821615155b8015610b6f57506001600160a01b03811615155b610ba05760405162461bcd60e51b8152602060048201526002602482015261523560f01b60448201526064016105d6565b6040805160c0810182526001600160a01b039687168082529787166020820181905295871691810182905293861660608501819052928616608085018190529190951660a0909301839052609880547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169097179055609980548716909417909355609a80548616909417909355609b80548516909317909255609c805484169091179055609d8054909216179055565b600082815260656020526040902060010154610c6f8133610d30565b6106668383610e52565b3360009081527f2f54fa84bcabe2f54c105880df04fd8c3dc2d1a0ff002170576ebe448676343c602052604090205460ff16610cdc5760405162461bcd60e51b8152602060048201526002602482015261523360f01b60448201526064016105d6565b6001600160a01b0381166000818152609e6020908152604091829020805460ff1916600117905590519182527f72a9179019a18e39f5015c58ef0ea3cfe01f7978344f5203c5709706a7c497949101610635565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166106f357610d6e816001600160a01b0316601461109c565b610d7983602061109c565b604051602001610d8a929190611535565b60408051601f198184030181529082905262461bcd60e51b82526105d6916004016115b6565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166106f35760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610e0e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156106f35760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680610eee575060005460ff16155b610f515760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d6565b600054610100900460ff16158015610f73576000805461ffff19166101011790555b610f7b61124c565b610f86600083611317565b610fb07f523807b0e14b2fdb694a9155924ffe8f35f22c2cc67fcced3d2c681938e6124c83611317565b610fda7f55435dd261a4b9b3364963f7738a7a662ad9c84396d64be3365284bb7f0a504183611317565b6110047f8619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a83611317565b61102e7facba87e2a940d441e330bf0eb2d5ce612db851ffca550e82933626be5abd397283611317565b6040805160c0810182526127108152621275006020820152600a918101919091526001606082015260126080820152600060a090910152609780546bffffffffffffffffffffffff19166a12010a001275000000271017905580156106f3576000805461ff00191690555050565b606060006110ab836002611601565b6110b69060026115e9565b67ffffffffffffffff8111156110ce576110ce611693565b6040519080825280601f01601f1916602001820160405280156110f8576020820181803683370190505b509050600360fc1b816000815181106111135761111361167d565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111425761114261167d565b60200101906001600160f81b031916908160001a9053506000611166846002611601565b6111719060016115e9565b90505b60018111156111f6577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106111b2576111b261167d565b1a60f81b8282815181106111c8576111c861167d565b60200101906001600160f81b031916908160001a90535060049490941c936111ef81611650565b9050611174565b5083156112455760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105d6565b9392505050565b600054610100900460ff1680611265575060005460ff16155b6112c85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d6565b600054610100900460ff161580156112ea576000805461ffff19166101011790555b6112f2611321565b6112fa611321565b611302611321565b8015611314576000805461ff00191690555b50565b6106f38282610db0565b600054610100900460ff168061133a575060005460ff16155b61139d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d6565b600054610100900460ff16158015611302576000805461ffff19166101011790558015611314576000805461ff001916905550565b80356001600160a01b03811681146113e957600080fd5b919050565b60006020828403121561140057600080fd5b611245826113d2565b60008060008060008060c0878903121561142257600080fd5b61142b876113d2565b9550611439602088016113d2565b9450611447604088016113d2565b9350611455606088016113d2565b9250611463608088016113d2565b915061147160a088016113d2565b90509295509295509295565b60006020828403121561148f57600080fd5b5035919050565b600080604083850312156114a957600080fd5b823591506114b9602084016113d2565b90509250929050565b6000602082840312156114d457600080fd5b81356001600160e01b03198116811461124557600080fd5b6000602082840312156114fe57600080fd5b813563ffffffff8116811461124557600080fd5b60006020828403121561152457600080fd5b813560ff8116811461124557600080fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161156d816017850160208801611620565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516115aa816028840160208801611620565b01602801949350505050565b60208152600082518060208401526115d5816040850160208701611620565b601f01601f19169190910160400192915050565b600082198211156115fc576115fc611667565b500190565b600081600019048311821515161561161b5761161b611667565b500290565b60005b8381101561163b578181015183820152602001611623565b8381111561164a576000848401525b50505050565b60008161165f5761165f611667565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212208814fb928ae1ffd413f8d28ba1b096d5d02562fbc06d645f8f1ca6e4137e5b4c64736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getProtocolAddresses()": {
        "returns": {
          "_0": "RegistryEntities.ProtocolAddressesArgs struct that packs all the interfaces of the Opium Protocol"
        }
      },
      "getProtocolCommissionParams()": {
        "returns": {
          "_0": "RegistryEntities.ProtocolAddressesArgs struct that packs all the interfaces of the Opium Protocol."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address)": {
        "details": "Calls RegistryStorageUpgradeable.__RegistryStorage__init",
        "params": {
          "_governor": "address of the governance account which will be assigned the initial admin role"
        }
      },
      "pause()": {
        "details": "it fails if the protocol is already paused"
      },
      "registerProtocol(address,address,address,address,address,address)": {
        "details": "the contracts' addresses are set using their respective interfaces",
        "params": {
          "_core": "address of Opium.Core",
          "_opiumProxyFactory": "address of Opium.OpiumProxyFactory",
          "_oracleAggregator": "address of Opium.OracleAggregator",
          "_protocolFeeReceiver": "address of the recipient of Opium Protocol's fees",
          "_syntheticAggregator": "address of Opium.SyntheticAggregator",
          "_tokenSpender": "address of Opium.TokenSpender"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "it fails if the protocol is not paused"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToWhitelist(address)": {
        "notice": "it allows the WHITELISTER role to add an address to the whitelist"
      },
      "getCore()": {
        "notice": "Returns address of Opium.Core"
      },
      "getOracleAggregator()": {
        "notice": "Returns address of Opium.OracleAggregator"
      },
      "getProtocolAddresses()": {
        "notice": "Returns the interfaces of the Opium protocol contracts"
      },
      "getProtocolCommissionParams()": {
        "notice": "Returns all the commission-related parameters of the Opium protocol contracts"
      },
      "initialize(address)": {
        "notice": "it is called only once upon deployment of the contract plus the protocol's fee receiver. It initializes the registry storage with the given governor address as the admin role"
      },
      "isPaused()": {
        "notice": "Returns whether the Opium protocol is paused"
      },
      "isWhitelisted(address)": {
        "notice": "Returns whether a given address is whitelisted"
      },
      "pause()": {
        "notice": "allows the GUARDIAN role to pause the Opium Protocol"
      },
      "registerProtocol(address,address,address,address,address,address)": {
        "notice": "it allows the PROTOCOL_REGISTER role to set the addresses of Opium Protocol's contracts"
      },
      "removeFromWhitelist(address)": {
        "notice": "it allows the WHITELISTER role to remove an address from the whitelist"
      },
      "setNoDataCancellationPeriod(uint32)": {
        "notice": "allows the COMMISSIONER role to change the noDataCancellationPeriod (the timeframe after which a derivative can be cancelled if the oracle has not provided any data)"
      },
      "setOpiumCommissionPart(uint8)": {
        "notice": "allows the COMMISSIONER role to change the protocolReceiver's fee"
      },
      "unpause()": {
        "notice": "allows the GUARDIAN role to unpause the Opium Protocol"
      }
    },
    "notice": "Error codes: - R5 = ERROR_REGISTRY_NOT_PAUSED - R6 = ERROR_REGISTRY_ALREADY_PAUSED",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1699,
        "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1948,
        "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5545,
        "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
        "label": "protocolCommissionArgs",
        "offset": 0,
        "slot": "151",
        "type": "t_struct(ProtocolCommissionArgs)5516_storage"
      },
      {
        "astId": 5548,
        "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
        "label": "protocolAddressesArgs",
        "offset": 0,
        "slot": "152",
        "type": "t_struct(ProtocolAddressesArgs)5533_storage"
      },
      {
        "astId": 5552,
        "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
        "label": "whitelist",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOpiumProxyFactory)4149": {
        "encoding": "inplace",
        "label": "contract IOpiumProxyFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IOracleAggregator)4177": {
        "encoding": "inplace",
        "label": "contract IOracleAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticAggregator)4283": {
        "encoding": "inplace",
        "label": "contract ISyntheticAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenSpender)4299": {
        "encoding": "inplace",
        "label": "contract ITokenSpender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_struct(ProtocolAddressesArgs)5533_storage": {
        "encoding": "inplace",
        "label": "struct RegistryEntities.ProtocolAddressesArgs",
        "members": [
          {
            "astId": 5518,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "core",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5521,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "opiumProxyFactory",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IOpiumProxyFactory)4149"
          },
          {
            "astId": 5524,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "oracleAggregator",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IOracleAggregator)4177"
          },
          {
            "astId": 5527,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "syntheticAggregator",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(ISyntheticAggregator)4283"
          },
          {
            "astId": 5530,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "tokenSpender",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(ITokenSpender)4299"
          },
          {
            "astId": 5532,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "protocolFeeReceiver",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ProtocolCommissionArgs)5516_storage": {
        "encoding": "inplace",
        "label": "struct RegistryEntities.ProtocolCommissionArgs",
        "members": [
          {
            "astId": 5505,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "derivativeAuthorCommissionBase",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5507,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "noDataCancellationPeriod",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5509,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "protocolFeeCommissionBase",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5511,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "protocolCommissionPart",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5513,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "precisionFactor",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5515,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "paused",
            "offset": 11,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/Registry/Registry.sol:RegistryUpgradeable",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
