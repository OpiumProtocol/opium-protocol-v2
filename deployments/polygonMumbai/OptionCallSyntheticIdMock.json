{
  "address": "0xB73346aEb81dF6Cd055E6115bbED17dce711A56F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "MetadataSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "allowThirdpartyExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorCommission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_result",
          "type": "uint256"
        }
      ],
      "name": "getExecutionPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyerPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellerPayout",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        }
      ],
      "name": "getMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyerMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellerMargin",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "derivativeOwner",
          "type": "address"
        }
      ],
      "name": "thirdpartyExecutionAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        }
      ],
      "name": "validateInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xef9e9b1cfc1ca5326fa8bcb4ee391c8f3dd24cbc361c5a3bbf26c265fd0daf81",
  "receipt": {
    "to": null,
    "from": "0x4497C837663970d9B9fC274342D15be1A2f96D1D",
    "contractAddress": "0xB73346aEb81dF6Cd055E6115bbED17dce711A56F",
    "transactionIndex": 1,
    "gasUsed": "426103",
    "logsBloom": "0x
    "blockHash": "0xeaac61e225653ab4ea700b4c1d1706fa55546057f1932cb78cd943187ad2a7c5",
    "transactionHash": "0xef9e9b1cfc1ca5326fa8bcb4ee391c8f3dd24cbc361c5a3bbf26c265fd0daf81",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 20497431,
        "transactionHash": "0xef9e9b1cfc1ca5326fa8bcb4ee391c8f3dd24cbc361c5a3bbf26c265fd0daf81",
        "address": "0xB73346aEb81dF6Cd055E6115bbED17dce711A56F",
        "topics": ["0x69354b8b791679340802bbe48036393ca1a4cdc6c29e8352bfb1e845c3c03108"],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000607b22617574686f72223a224449422e4f4e45222c2274797065223a226f7074696f6e222c2273756274797065223a2263616c6c222c226465736372697074696f6e223a224f7074696f6e2043616c6c206c6f67696320636f6e7472616374227d",
        "logIndex": 2,
        "blockHash": "0xeaac61e225653ab4ea700b4c1d1706fa55546057f1932cb78cd943187ad2a7c5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 20497431,
        "transactionHash": "0xef9e9b1cfc1ca5326fa8bcb4ee391c8f3dd24cbc361c5a3bbf26c265fd0daf81",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004497c837663970d9b9fc274342d15be1a2f96d1d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000048a9d81dbb20000000000000000000000000000000000000000000000000044ce8045c94f220000000000000000000000000000000000000000000000000000d523b3d595a51000000000000000000000000000000000000000000000000044c9f5a84773700000000000000000000000000000000000000000000000000000d9ae5157715710",
        "logIndex": 3,
        "blockHash": "0xeaac61e225653ab4ea700b4c1d1706fa55546057f1932cb78cd943187ad2a7c5"
      }
    ],
    "blockNumber": 20497431,
    "cumulativeGasUsed": "447103",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "658042053585c715e56757d0a4fb45c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MetadataSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowThirdpartyExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"getExecutionPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"}],\"name\":\"getMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerMargin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"derivativeOwner\",\"type\":\"address\"}],\"name\":\"thirdpartyExecutionAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"}],\"name\":\"validateInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAuthorAddress()\":{\"returns\":{\"_0\":\"address syntheticId author address\"}},\"getAuthorCommission()\":{\"returns\":{\"_0\":\"uint26 syntheticId author commission\"}},\"getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)\":{\"params\":{\"_derivative\":\"Derivative Instance of derivative\",\"_result\":\"uint256 Data retrieved from oracleId on the maturity\"},\"returns\":{\"buyerPayout\":\"uint256 Payout in ratio for buyer (LONG position holder)\",\"sellerPayout\":\"uint256 Payout in ratio for seller (SHORT position holder)\"}},\"getMargin((uint256,uint256,uint256[],address,address,address))\":{\"params\":{\"_derivative\":\"Derivative Instance of derivative\"},\"returns\":{\"buyerMargin\":\"uint256 Margin needed from buyer (LONG position)\",\"sellerMargin\":\"uint256 Margin needed from seller (SHORT position)\"}},\"validateInput((uint256,uint256,uint256[],address,address,address))\":{\"params\":{\"_derivative\":\"Derivative Instance of derivative to validate\"},\"returns\":{\"_0\":\"Returns boolean whether ticker is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAuthorAddress()\":{\"notice\":\"Getter for syntheticId author address\"},\"getAuthorCommission()\":{\"notice\":\"Getter for syntheticId author commission\"},\"getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)\":{\"notice\":\"Calculates payout for derivative execution\"},\"getMargin((uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Calculates margin required for derivative creation\"},\"validateInput((uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Validates ticker\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/OptionCallSyntheticIdMock.sol\":\"OptionCallSyntheticIdMock\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Helpers/ExecutableByThirdParty.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\n/// @title Opium.Helpers.ExecutableByThirdParty contract helps to syntheticId development and responsible for getting and setting thirdparty execution settings\\ncontract ExecutableByThirdParty {\\n    // Mapping holds whether position owner allows thirdparty execution\\n    mapping(address => bool) internal thirdpartyExecutionAllowance;\\n\\n    /// @notice Getter for thirdparty execution allowance\\n    /// @param derivativeOwner Address of position holder that's going to be executed\\n    /// @return bool Returns whether thirdparty execution is allowed by derivativeOwner\\n    function thirdpartyExecutionAllowed(address derivativeOwner) public view virtual returns (bool) {\\n        return thirdpartyExecutionAllowance[derivativeOwner];\\n    }\\n\\n    /// @notice Sets third party execution settings for `msg.sender`\\n    /// @param allow Indicates whether thirdparty execution should be allowed or not\\n    function allowThirdpartyExecution(bool allow) public virtual {\\n        thirdpartyExecutionAllowance[msg.sender] = allow;\\n    }\\n}\\n\",\"keccak256\":\"0x864ad987578c410256a71f464e9c354617b3f881a281a918803a012d1d5fba4c\"},\"contracts/Helpers/HasCommission.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\n/// @title Opium.Helpers.HasCommission contract helps to syntheticId development and responsible for commission and author address\\ncontract HasCommission {\\n    // Address of syntheticId author\\n    address internal author;\\n    // Commission is in Opium.Lib.LibCommission.COMMISSION_BASE base\\n    uint256 internal constant AUTHOR_COMMISSION = 25; // 0.25% of profit\\n\\n    /// @notice Sets `msg.sender` as syntheticId author\\n    constructor() {\\n        author = msg.sender;\\n    }\\n\\n    /// @notice Getter for syntheticId author address\\n    /// @return address syntheticId author address\\n    function getAuthorAddress() public view virtual returns (address) {\\n        return author;\\n    }\\n\\n    /// @notice Getter for syntheticId author commission\\n    /// @return uint26 syntheticId author commission\\n    function getAuthorCommission() public view virtual returns (uint256) {\\n        return AUTHOR_COMMISSION;\\n    }\\n}\\n\",\"keccak256\":\"0xad6d132b15a5bcf1bf7a0ff62618d266d9fcc21d30e8c6bc39e4f44548cf139d\"},\"contracts/Interface/IDerivativeLogic.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\n/// @title Opium.Interface.IDerivativeLogic contract is an interface that every syntheticId should implement\\nabstract contract IDerivativeLogic {\\n    /// @notice Validates ticker\\n    /// @param _derivative Derivative Instance of derivative to validate\\n    /// @return Returns boolean whether ticker is valid\\n    function validateInput(LibDerivative.Derivative memory _derivative) public view virtual returns (bool);\\n\\n    /// @notice Calculates margin required for derivative creation\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @return buyerMargin uint256 Margin needed from buyer (LONG position)\\n    /// @return sellerMargin uint256 Margin needed from seller (SHORT position)\\n    function getMargin(LibDerivative.Derivative memory _derivative)\\n        public\\n        view\\n        virtual\\n        returns (uint256 buyerMargin, uint256 sellerMargin);\\n\\n    /// @notice Calculates payout for derivative execution\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @param _result uint256 Data retrieved from oracleId on the maturity\\n    /// @return buyerPayout uint256 Payout in ratio for buyer (LONG position holder)\\n    /// @return sellerPayout uint256 Payout in ratio for seller (SHORT position holder)\\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\\n        public\\n        view\\n        virtual\\n        returns (uint256 buyerPayout, uint256 sellerPayout);\\n\\n    /// @notice Returns syntheticId author address for Opium commissions\\n    /// @return authorAddress address The address of syntheticId address\\n    function getAuthorAddress() public view virtual returns (address authorAddress);\\n\\n    /// @notice Returns syntheticId author commission in base of COMMISSION_BASE\\n    /// @return commission uint256 Author commission\\n    function getAuthorCommission() public view virtual returns (uint256 commission);\\n\\n    /// @notice Returns whether thirdparty could execute on derivative's owner's behalf\\n    /// @param _derivativeOwner address Derivative owner address\\n    /// @return Returns boolean whether _derivativeOwner allowed third party execution\\n    function thirdpartyExecutionAllowed(address _derivativeOwner) public view virtual returns (bool);\\n\\n    /// @notice Sets whether thirds parties are allowed or not to execute derivative's on msg.sender's behalf\\n    /// @param _allow bool Flag for execution allowance\\n    function allowThirdpartyExecution(bool _allow) public virtual;\\n\\n    // Event with syntheticId metadata JSON string (for DIB.ONE derivative explorer)\\n    event MetadataSet(string metadata);\\n}\\n\",\"keccak256\":\"0x1488c41956c63f69592eeccf9428f17b8380f66b8c12d7a4ca167ba93e479f37\"},\"contracts/Lib/LibDerivative.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\n/// @title Opium.Lib.LibDerivative contract should be inherited by contracts that use Derivative structure and calculate derivativeHash\\nlibrary LibDerivative {\\n    enum PositionType {\\n        SHORT,\\n        LONG\\n    }\\n    \\n    // Opium derivative structure (ticker) definition\\n    struct Derivative {\\n        // Margin parameter for syntheticId\\n        uint256 margin;\\n        // Maturity of derivative\\n        uint256 endTime;\\n        // Additional parameters for syntheticId\\n        uint256[] params;\\n        // oracleId of derivative\\n        address oracleId;\\n        // Margin token address of derivative\\n        address token;\\n        // syntheticId of derivative\\n        address syntheticId;\\n    }\\n\\n    /// @notice Calculates hash of provided Derivative\\n    /// @param _derivative Derivative Instance of derivative to hash\\n    /// @return derivativeHash bytes32 Derivative hash\\n    function getDerivativeHash(Derivative memory _derivative) internal pure returns (bytes32 derivativeHash) {\\n        derivativeHash = keccak256(abi.encodePacked(\\n            _derivative.margin,\\n            _derivative.endTime,\\n            _derivative.params,\\n            _derivative.oracleId,\\n            _derivative.token,\\n            _derivative.syntheticId\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x9c8656fb850636580a40cebb4c7b564a76d09ee43ad5ee564b5e59235f5eccfa\"},\"contracts/test/OptionCallSyntheticIdMock.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../Interface/IDerivativeLogic.sol\\\";\\n\\nimport \\\"../Helpers/ExecutableByThirdParty.sol\\\";\\nimport \\\"../Helpers/HasCommission.sol\\\";\\n\\ncontract OptionCallSyntheticIdMock is IDerivativeLogic, ExecutableByThirdParty, HasCommission {\\n    using SafeMath for uint256;\\n\\n    uint256 constant BASE_PPT = 1 ether;\\n\\n    constructor() {\\n        /*\\n        {\\n            \\\"author\\\": \\\"DIB.ONE\\\",\\n            \\\"type\\\": \\\"option\\\",\\n            \\\"subtype\\\": \\\"call\\\",\\n            \\\"description\\\": \\\"Option Call logic contract\\\"\\n        }\\n        */\\n        emit MetadataSet(\\n            '{\\\"author\\\":\\\"DIB.ONE\\\",\\\"type\\\":\\\"option\\\",\\\"subtype\\\":\\\"call\\\",\\\"description\\\":\\\"Option Call logic contract\\\"}'\\n        );\\n    }\\n\\n    /// @notice Getter for syntheticId author address\\n    /// @return address syntheticId author address\\n    function getAuthorAddress() public view virtual override(IDerivativeLogic, HasCommission) returns (address) {\\n        return HasCommission.getAuthorAddress();\\n    }\\n\\n    /// @notice Getter for syntheticId author commission\\n    /// @return uint26 syntheticId author commission\\n    function getAuthorCommission() public view override(IDerivativeLogic, HasCommission) returns (uint256) {\\n        return HasCommission.getAuthorCommission();\\n    }\\n\\n    function validateInput(LibDerivative.Derivative memory _derivative) public view override returns (bool) {\\n        if (_derivative.params.length < 1) {\\n            return false;\\n        }\\n\\n        uint256 ppt;\\n\\n        if (_derivative.params.length == 2) {\\n            ppt = _derivative.params[1];\\n        } else {\\n            ppt = BASE_PPT;\\n        }\\n\\n        uint256 strikePrice = _derivative.params[0];\\n        return (_derivative.margin > 0 && _derivative.endTime > block.timestamp && strikePrice > 0 && ppt > 0);\\n    }\\n\\n    function getMargin(LibDerivative.Derivative memory _derivative)\\n        public\\n        view\\n        override\\n        returns (uint256 buyerMargin, uint256 sellerMargin)\\n    {\\n        buyerMargin = 0;\\n        sellerMargin = _derivative.margin;\\n    }\\n\\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\\n        public\\n        view\\n        override\\n        returns (uint256 buyerPayout, uint256 sellerPayout)\\n    {\\n        uint256 ppt;\\n\\n        uint256 strikePrice = _derivative.params[0];\\n\\n        if (_derivative.params.length == 2) {\\n            ppt = _derivative.params[1];\\n        } else {\\n            ppt = BASE_PPT;\\n        }\\n\\n        if (_result > strikePrice) {\\n            uint256 profit = _result.sub(strikePrice);\\n            profit = profit.mul(ppt).div(BASE_PPT);\\n\\n            if (profit < _derivative.margin) {\\n                buyerPayout = profit;\\n                sellerPayout = _derivative.margin.sub(profit);\\n            } else {\\n                buyerPayout = _derivative.margin;\\n                sellerPayout = 0;\\n            }\\n        } else {\\n            buyerPayout = 0;\\n            sellerPayout = _derivative.margin;\\n        }\\n    }\\n\\n    function allowThirdpartyExecution(bool allow) public virtual override(IDerivativeLogic, ExecutableByThirdParty) {\\n        ExecutableByThirdParty.allowThirdpartyExecution(allow);\\n    }\\n\\n    function thirdpartyExecutionAllowed(address derivativeOwner)\\n        public\\n        view\\n        virtual\\n        override(IDerivativeLogic, ExecutableByThirdParty)\\n        returns (bool)\\n    {\\n        return ExecutableByThirdParty.thirdpartyExecutionAllowed(derivativeOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xf7b853e843788357330cca84a7c7f60bd9a2c4ff784a67b0756c656f90044a66\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b031916331790556040517f69354b8b791679340802bbe48036393ca1a4cdc6c29e8352bfb1e845c3c03108906100d090602080825260609082018190527f7b22617574686f72223a224449422e4f4e45222c2274797065223a226f70746960408301527f6f6e222c2273756274797065223a2263616c6c222c226465736372697074696f908201527f6e223a224f7074696f6e2043616c6c206c6f67696320636f6e7472616374227d608082015260a00190565b60405180910390a1610641806100e76000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633a84543e1161005b5780633a84543e14610101578063a4300ee514610110578063dd0060fd14610130578063f22430e81461014357600080fd5b80630433fe45146100825780630e49dee8146100b05780633a6f60a9146100de575b600080fd5b61009661009036600461049d565b51600091565b604080519283526020830191909152015b60405180910390f35b6100dc6100be36600461047b565b336000908152602081905260409020805460ff191682151517905550565b005b6100f16100ec36600461049d565b61016f565b60405190151581526020016100a7565b604051601981526020016100a7565b610118610227565b6040516001600160a01b0390911681526020016100a7565b61009661013e3660046104d2565b61023b565b6100f1610151366004610460565b6001600160a01b031660009081526020819052604090205460ff1690565b60006001826040015151101561018757506000919050565b6000826040015151600214156101bd5782604001516001815181106101ae576101ae6105df565b602002602001015190506101c8565b50670de0b6b3a76400005b600083604001516000815181106101e1576101e16105df565b60200260200101519050600084600001511180156102025750428460200151115b801561020e5750600081115b801561021a5750600082115b949350505050565b905090565b60006102226001546001600160a01b031690565b6000806000808560400151600081518110610258576102586105df565b6020026020010151905085604001515160021415610296578560400151600181518110610287576102876105df565b602002602001015191506102a2565b670de0b6b3a764000091505b808511156103075760006102b68683610319565b90506102d4670de0b6b3a76400006102ce838661032c565b90610338565b87519091508110156102f857865190945084906102f19082610319565b9350610301565b86519450600093505b50610310565b85516000945092505b50509250929050565b600061032582846105b2565b9392505050565b60006103258284610593565b60006103258284610571565b80356001600160a01b038116811461035b57600080fd5b919050565b600060c0828403121561037257600080fd5b61037a610517565b90508135815260208083013581830152604083013567ffffffffffffffff808211156103a557600080fd5b818501915085601f8301126103b957600080fd5b8135818111156103cb576103cb6105f5565b8060051b91506103dc848301610540565b8181528481019084860184860187018a10156103f757600080fd5b600095505b8386101561041a5780358352600195909501949186019186016103fc565b5080604088015250505050505061043360608301610344565b606082015261044460808301610344565b608082015261045560a08301610344565b60a082015292915050565b60006020828403121561047257600080fd5b61032582610344565b60006020828403121561048d57600080fd5b8135801515811461032557600080fd5b6000602082840312156104af57600080fd5b813567ffffffffffffffff8111156104c657600080fd5b61021a84828501610360565b600080604083850312156104e557600080fd5b823567ffffffffffffffff8111156104fc57600080fd5b61050885828601610360565b95602094909401359450505050565b60405160c0810167ffffffffffffffff8111828210171561053a5761053a6105f5565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610569576105696105f5565b604052919050565b60008261058e57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156105ad576105ad6105c9565b500290565b6000828210156105c4576105c46105c9565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212201d53e170e16e245c56bd85fb22f821aed4b7e882d7c6ea90a205cbdf1f44f63c64736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80633a84543e1161005b5780633a84543e14610101578063a4300ee514610110578063dd0060fd14610130578063f22430e81461014357600080fd5b80630433fe45146100825780630e49dee8146100b05780633a6f60a9146100de575b600080fd5b61009661009036600461049d565b51600091565b604080519283526020830191909152015b60405180910390f35b6100dc6100be36600461047b565b336000908152602081905260409020805460ff191682151517905550565b005b6100f16100ec36600461049d565b61016f565b60405190151581526020016100a7565b604051601981526020016100a7565b610118610227565b6040516001600160a01b0390911681526020016100a7565b61009661013e3660046104d2565b61023b565b6100f1610151366004610460565b6001600160a01b031660009081526020819052604090205460ff1690565b60006001826040015151101561018757506000919050565b6000826040015151600214156101bd5782604001516001815181106101ae576101ae6105df565b602002602001015190506101c8565b50670de0b6b3a76400005b600083604001516000815181106101e1576101e16105df565b60200260200101519050600084600001511180156102025750428460200151115b801561020e5750600081115b801561021a5750600082115b949350505050565b905090565b60006102226001546001600160a01b031690565b6000806000808560400151600081518110610258576102586105df565b6020026020010151905085604001515160021415610296578560400151600181518110610287576102876105df565b602002602001015191506102a2565b670de0b6b3a764000091505b808511156103075760006102b68683610319565b90506102d4670de0b6b3a76400006102ce838661032c565b90610338565b87519091508110156102f857865190945084906102f19082610319565b9350610301565b86519450600093505b50610310565b85516000945092505b50509250929050565b600061032582846105b2565b9392505050565b60006103258284610593565b60006103258284610571565b80356001600160a01b038116811461035b57600080fd5b919050565b600060c0828403121561037257600080fd5b61037a610517565b90508135815260208083013581830152604083013567ffffffffffffffff808211156103a557600080fd5b818501915085601f8301126103b957600080fd5b8135818111156103cb576103cb6105f5565b8060051b91506103dc848301610540565b8181528481019084860184860187018a10156103f757600080fd5b600095505b8386101561041a5780358352600195909501949186019186016103fc565b5080604088015250505050505061043360608301610344565b606082015261044460808301610344565b608082015261045560a08301610344565b60a082015292915050565b60006020828403121561047257600080fd5b61032582610344565b60006020828403121561048d57600080fd5b8135801515811461032557600080fd5b6000602082840312156104af57600080fd5b813567ffffffffffffffff8111156104c657600080fd5b61021a84828501610360565b600080604083850312156104e557600080fd5b823567ffffffffffffffff8111156104fc57600080fd5b61050885828601610360565b95602094909401359450505050565b60405160c0810167ffffffffffffffff8111828210171561053a5761053a6105f5565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610569576105696105f5565b604052919050565b60008261058e57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156105ad576105ad6105c9565b500290565b6000828210156105c4576105c46105c9565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212201d53e170e16e245c56bd85fb22f821aed4b7e882d7c6ea90a205cbdf1f44f63c64736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAuthorAddress()": {
        "returns": {
          "_0": "address syntheticId author address"
        }
      },
      "getAuthorCommission()": {
        "returns": {
          "_0": "uint26 syntheticId author commission"
        }
      },
      "getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)": {
        "params": {
          "_derivative": "Derivative Instance of derivative",
          "_result": "uint256 Data retrieved from oracleId on the maturity"
        },
        "returns": {
          "buyerPayout": "uint256 Payout in ratio for buyer (LONG position holder)",
          "sellerPayout": "uint256 Payout in ratio for seller (SHORT position holder)"
        }
      },
      "getMargin((uint256,uint256,uint256[],address,address,address))": {
        "params": {
          "_derivative": "Derivative Instance of derivative"
        },
        "returns": {
          "buyerMargin": "uint256 Margin needed from buyer (LONG position)",
          "sellerMargin": "uint256 Margin needed from seller (SHORT position)"
        }
      },
      "validateInput((uint256,uint256,uint256[],address,address,address))": {
        "params": {
          "_derivative": "Derivative Instance of derivative to validate"
        },
        "returns": {
          "_0": "Returns boolean whether ticker is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAuthorAddress()": {
        "notice": "Getter for syntheticId author address"
      },
      "getAuthorCommission()": {
        "notice": "Getter for syntheticId author commission"
      },
      "getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)": {
        "notice": "Calculates payout for derivative execution"
      },
      "getMargin((uint256,uint256,uint256[],address,address,address))": {
        "notice": "Calculates margin required for derivative creation"
      },
      "validateInput((uint256,uint256,uint256[],address,address,address))": {
        "notice": "Validates ticker"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3732,
        "contract": "contracts/test/OptionCallSyntheticIdMock.sol:OptionCallSyntheticIdMock",
        "label": "thirdpartyExecutionAllowance",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3765,
        "contract": "contracts/test/OptionCallSyntheticIdMock.sol:OptionCallSyntheticIdMock",
        "label": "author",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
