{
  "address": "0xF5515b3f564453Fcd0d195066CCc99D3CFbb1409",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_derivativeHash",
          "type": "bytes32"
        }
      ],
      "name": "LogCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_derivativeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "LogCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_positionsOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_positionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "LogExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_derivativeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "LogMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_derivativeHash",
          "type": "bytes32"
        }
      ],
      "name": "LogRedeem",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_positionsAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address[2]",
          "name": "_addresses",
          "type": "address[2]"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_positionsAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionsOwner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_positionsAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_positionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feesVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address[2]",
          "name": "_positionAddresses",
          "type": "address[2]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "p2pVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[2]",
          "name": "_positionAddresses",
          "type": "address[2]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[2][]",
          "name": "_positionsAddresses",
          "type": "address[2][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x413897a863ac599cbc0121911129e4d338b54e591e7892613dbe5134e4e0e354",
  "receipt": {
    "to": null,
    "from": "0x4497C837663970d9B9fC274342D15be1A2f96D1D",
    "contractAddress": "0xF5515b3f564453Fcd0d195066CCc99D3CFbb1409",
    "transactionIndex": 3,
    "gasUsed": "3623503",
    "logsBloom": "0x
    "blockHash": "0xcb1dafa327ed50e5fef9e15f120d55014a19e914758c25b3f64ebb9264638624",
    "transactionHash": "0x413897a863ac599cbc0121911129e4d338b54e591e7892613dbe5134e4e0e354",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 20497326,
        "transactionHash": "0x413897a863ac599cbc0121911129e4d338b54e591e7892613dbe5134e4e0e354",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004497c837663970d9b9fc274342d15be1a2f96d1d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000269eab9b7902000000000000000000000000000000000000000000000000004546c2208a3144000000000000000000000000000000000000000000000001ad170c4f38756dffda00000000000000000000000000000000000000000000000045202374eeb842000000000000000000000000000000000000000000000001ad1732ede410e701da",
        "logIndex": 6,
        "blockHash": "0xcb1dafa327ed50e5fef9e15f120d55014a19e914758c25b3f64ebb9264638624"
      }
    ],
    "blockNumber": 20497326,
    "cumulativeGasUsed": "3804778",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "658042053585c715e56757d0a4fb45c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_derivativeHash\",\"type\":\"bytes32\"}],\"name\":\"LogCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_derivativeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_positionsOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_positionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_derivativeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_derivativeHash\",\"type\":\"bytes32\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_positionsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"_addresses\",\"type\":\"address[2]\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_positionsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionsOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_positionsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feesVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"_positionAddresses\",\"type\":\"address[2]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"p2pVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"_positionAddresses\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2][]\",\"name\":\"_positionsAddresses\",\"type\":\"address[2][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancel(address,uint256)\":{\"params\":{\"_amount\":\"uint256 Amount of positions to cancel\",\"_positionAddress\":\"PositionType of positions to be canceled\"}},\"cancel(address[],uint256[])\":{\"params\":{\"_amounts\":\"uint256[] Amount of positions to cancel for each `positionAddress`\",\"_positionsAddresses\":\"PositionTypes of positions to be canceled\"}},\"create((uint256,uint256,uint256[],address,address,address),uint256,address[2])\":{\"params\":{\"_addresses\":\"address[2] Addresses of buyer and seller [0] - buyer address [1] - seller address\",\"_amount\":\"uint256 Amount of positions to create\",\"_derivative\":\"LibDerivative.Derivative Derivative definition\"}},\"execute(address,address,uint256)\":{\"params\":{\"_amount\":\"uint256 Amount of positions to execute\",\"_positionAddress\":\"address `positionAddress` of positions that needs to be executed\",\"_positionOwner\":\"address Address of the owner of positions\"}},\"execute(address,address[],uint256[])\":{\"params\":{\"_amounts\":\"uint256[] Amount of positions to execute for each `positionAddresses`\",\"_positionsAddresses\":\"address[] `positionAddresses` of positions that need to be executed\",\"_positionsOwner\":\"address Address of the owner of positions\"}},\"execute(address,uint256)\":{\"params\":{\"_amount\":\"uint256 Amount of positions to execute\",\"_positionAddress\":\"address `positionAddress` of position that needs to be executed\"}},\"execute(address[],uint256[])\":{\"params\":{\"_amounts\":\"uint256[] Amount of positions to execute for each `positionAddress`\",\"_positionsAddresses\":\"address[] `positionAddresses` of positions that need to be executed\"}},\"mint(uint256,address[2])\":{\"params\":{\"_amount\":\"uint256 Amount of positions to create\",\"_positionAddresses\":\"address[2] Addresses of buyer and seller [0] - LONG erc20 position address [1] - SHORT erc20 position address\"}},\"redeem(address[2],uint256)\":{\"params\":{\"_amount\":\"uint256 Amount of tokens to redeem\",\"_positionAddresses\":\"address[2] `_positionAddresses` of the positions that need to be redeemed\"}},\"redeem(address[2][],uint256[])\":{\"params\":{\"_amounts\":\"uint256[] Amount of tokens to redeem for each position pair\",\"_positionsAddresses\":\"address[2][] `_positionsAddresses` of the positions that need to be redeemed\"}},\"withdrawFee(address)\":{\"params\":{\"_tokenAddress\":\"address Address of an ERC20 token to withdraw\"}}},\"title\":\"Opium.Core contract creates positions, holds and distributes margin at the maturity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancel(address,uint256)\":{\"notice\":\"Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`\"},\"cancel(address[],uint256[])\":{\"notice\":\"Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`\"},\"create((uint256,uint256,uint256[],address,address,address),uint256,address[2])\":{\"notice\":\"This function deploys two ERC20 contracts representing respectively the LONG and SHORT position of the provided `LibDerivative.Derivative` derivative and mints the provided amount of SHORT positions to a seller and LONG positions to a buyer\"},\"execute(address,address,uint256)\":{\"notice\":\"Executes a single position of `_positionsOwner` with specified `positionAddress`\"},\"execute(address,address[],uint256[])\":{\"notice\":\"Executes several positions of `_positionsOwner` with different `positionAddresses`\"},\"execute(address,uint256)\":{\"notice\":\"Executes a single position of `msg.sender` with specified `positionAddress`\"},\"execute(address[],uint256[])\":{\"notice\":\"Executes several positions of `msg.sender` with different `positionAddresses`\"},\"initialize(address)\":{\"notice\":\"sets registry and protocolCommissionArgs\"},\"mint(uint256,address[2])\":{\"notice\":\"This function mints the provided amount of LONG/SHORT positions to msg.sender for a previously deployed pair of LONG/SHORT ERC20 contracts\"},\"redeem(address[2],uint256)\":{\"notice\":\"Redeems a single market neutral position pair\"},\"redeem(address[2][],uint256[])\":{\"notice\":\"Redeems several market neutral position pairs\"},\"withdrawFee(address)\":{\"notice\":\"This function allows fee recipients to withdraw their fees\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/Core.sol\":\"Core\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"contracts/Core/Core.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../TokenSpender.sol\\\";\\nimport \\\"../Registry/RegistryEntities.sol\\\";\\nimport \\\"../Interface/IOpiumProxyFactory.sol\\\";\\nimport \\\"../Interface/IOpiumPositionToken.sol\\\";\\nimport \\\"../Interface/ISyntheticAggregator.sol\\\";\\nimport \\\"../Interface/IOracleAggregator.sol\\\";\\nimport \\\"../Interface/IDerivativeLogic.sol\\\";\\nimport \\\"../Interface/IRegistry.sol\\\";\\nimport \\\"../Lib/LibDerivative.sol\\\";\\nimport \\\"../Lib/LibPosition.sol\\\";\\nimport \\\"../Lib/LibCalculator.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title Opium.Core contract creates positions, holds and distributes margin at the maturity\\ncontract Core is ReentrancyGuardUpgradeable {\\n    using LibDerivative for LibDerivative.Derivative;\\n    using LibCalculator for uint256;\\n    using LibPosition for bytes32;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // Emitted when Core creates a new LONG/SHORT position pair\\n    event LogCreated(address _buyer, address _seller, bytes32 _derivativeHash, uint256 _amount);\\n    // Emitted when Core mints an amount of LONG/SHORT positions\\n    event LogMinted(bytes32 _derivativeHash, uint256 _amount);\\n    // Emitted when Core executes positions\\n    event LogExecuted(address _positionsOwner, address _positionAddress, uint256 _amount);\\n    // Emitted when Core cancels ticker for the first time\\n    event LogCanceled(bytes32 _derivativeHash);\\n    // Emitted when Core redeems an amount of market neutral positions\\n    event LogRedeem(uint256 _amount, bytes32 _derivativeHash);\\n\\n    IRegistry private registry;\\n\\n    RegistryEntities.ProtocolCommissionArgs private protocolCommissionArgs;\\n    RegistryEntities.ProtocolAddressesArgs private protocolAddressesArgs;\\n\\n    // Vaults for p2p derivatives\\n    // This mapping holds balances of p2p positions\\n    // p2pVaults[derivativeHash] => availableBalance\\n    mapping(bytes32 => uint256) public p2pVaults;\\n\\n    // Derivative payouts cache\\n    // Once paid out (executed), the payout ratio is stored in cache\\n    mapping(bytes32 => uint256[2]) private derivativePayouts;\\n\\n    // Vaults for fees\\n    // This mapping holds balances of fee recipients\\n    // feesVaults[feeRecipientAddress][tokenAddress] => availableBalance\\n    mapping(address => mapping(address => uint256)) public feesVaults;\\n\\n    // Hashes of cancelled tickers\\n    mapping(bytes32 => bool) private cancelled;\\n\\n    modifier whenNotPaused() {\\n        require(registry.isPaused() == false, \\\"U4\\\"); //paused\\n        _;\\n    }\\n\\n    modifier onlyOpiumFactoryTokens(address _tokenAddress) {\\n        require(\\n            IOpiumPositionToken(_tokenAddress).getFactoryAddress() == address(protocolAddressesArgs.opiumProxyFactory),\\n            \\\"U3\\\"\\n        ); // only proxy factory\\n        _;\\n    }\\n\\n    /// @notice sets registry and protocolCommissionArgs\\n    function initialize(address _registry) external initializer {\\n        registry = IRegistry(_registry);\\n        protocolCommissionArgs = registry.getProtocolCommissionParams();\\n    }\\n\\n    // ****************** EXTERNAL FUNCTIONS ******************\\n\\n    /// @notice This function allows fee recipients to withdraw their fees\\n    /// @param _tokenAddress address Address of an ERC20 token to withdraw\\n    function withdrawFee(address _tokenAddress) external nonReentrant whenNotPaused {\\n        uint256 balance = feesVaults[msg.sender][_tokenAddress];\\n        feesVaults[msg.sender][_tokenAddress] = 0;\\n        IERC20Upgradeable(_tokenAddress).safeTransfer(msg.sender, balance);\\n    }\\n\\n    /// @notice This function deploys two ERC20 contracts representing respectively the LONG and SHORT position of the provided `LibDerivative.Derivative` derivative and mints the provided amount of SHORT positions to a seller and LONG positions to a buyer\\n    /// @param _derivative LibDerivative.Derivative Derivative definition\\n    /// @param _amount uint256 Amount of positions to create\\n    /// @param _addresses address[2] Addresses of buyer and seller\\n    /// [0] - buyer address\\n    /// [1] - seller address\\n    function create(\\n        LibDerivative.Derivative calldata _derivative,\\n        uint256 _amount,\\n        address[2] calldata _addresses\\n    ) external whenNotPaused nonReentrant {\\n        _setProtocolAddresses();\\n        uint256 _multiplier = 10**protocolCommissionArgs.precisionFactor;\\n        require(_multiplier.modWithPrecisionFactor(_derivative.margin * _amount) == 0, \\\"C5\\\"); //wrong mod\\n\\n        // Generate hash for derivative\\n        bytes32 derivativeHash = _derivative.getDerivativeHash();\\n\\n        // Check if ticker was canceled\\n        require(!cancelled[derivativeHash], \\\"C7\\\"); //ERROR_CORE_TICKER_WAS_CANCELLED\\n\\n        // Validate input data against Derivative logic (`syntheticId`)\\n        require(IDerivativeLogic(_derivative.syntheticId).validateInput(_derivative), \\\"C8\\\"); //ERROR_CORE_SYNTHETIC_VALIDATION_ERROR\\n\\n        uint256[2] memory margins;\\n        // Get cached margin required according to logic from Opium.SyntheticAggregator\\n        // margins[0] - buyerMargin\\n        // margins[1] - sellerMargin\\n        (margins[0], margins[1]) = ISyntheticAggregator(protocolAddressesArgs.syntheticAggregator).getMargin(\\n            derivativeHash,\\n            _derivative\\n        );\\n\\n        uint256 totalMargin = _multiplier.mulWithPrecisionFactor(margins[0] + margins[1], _amount);\\n\\n        // Check ERC20 tokens allowance: (margins[0] + margins[1]) * amount\\n        // `msg.sender` must provide margin for position creation\\n        require(\\n            IERC20Upgradeable(_derivative.token).allowance(msg.sender, address(protocolAddressesArgs.tokenSpender)) >=\\n                totalMargin,\\n            \\\"C12\\\" //ERROR_CORE_NOT_ENOUGH_TOKEN_ALLOWANCE\\n        );\\n\\n        // Take ERC20 tokens from msg.sender, should never revert in correct ERC20 implementation\\n        protocolAddressesArgs.tokenSpender.claimTokens(\\n            IERC20Upgradeable(_derivative.token),\\n            msg.sender,\\n            address(this),\\n            totalMargin\\n        );\\n\\n        // Increment p2p positions balance by collected margin: vault += (margins[0] + margins[1]) * _amount\\n        _increaseP2PVault(derivativeHash, totalMargin);\\n\\n        // Mint LONG and SHORT positions tokens\\n        protocolAddressesArgs.opiumProxyFactory.create(\\n            _addresses[0],\\n            _addresses[1],\\n            _amount,\\n            derivativeHash,\\n            _derivative\\n        );\\n\\n        emit LogCreated(_addresses[0], _addresses[1], derivativeHash, _amount);\\n    }\\n\\n    /// @notice This function mints the provided amount of LONG/SHORT positions to msg.sender for a previously deployed pair of LONG/SHORT ERC20 contracts\\n    /// @param _amount uint256 Amount of positions to create\\n    /// @param _positionAddresses address[2] Addresses of buyer and seller\\n    /// [0] - LONG erc20 position address\\n    /// [1] - SHORT erc20 position address\\n    function mint(uint256 _amount, address[2] calldata _positionAddresses)\\n        external\\n        whenNotPaused\\n        onlyOpiumFactoryTokens(_positionAddresses[0])\\n        onlyOpiumFactoryTokens(_positionAddresses[1])\\n        nonReentrant\\n    {\\n        _setProtocolAddresses();\\n        uint256 _multiplier = 10**protocolCommissionArgs.precisionFactor;\\n\\n        IOpiumPositionToken.OpiumPositionTokenParams memory opiumPositionTokenParams = IOpiumPositionToken(\\n            _positionAddresses[0]\\n        ).getPositionTokenData();\\n        IOpiumPositionToken.OpiumPositionTokenParams memory longOpiumPositionTokenParams = IOpiumPositionToken(\\n            _positionAddresses[1]\\n        ).getPositionTokenData();\\n        require(_multiplier.modWithPrecisionFactor(opiumPositionTokenParams.derivative.margin * _amount) == 0, \\\"C5\\\"); //wrong mod\\n        require(opiumPositionTokenParams.derivativeHash == longOpiumPositionTokenParams.derivativeHash, \\\"C2\\\"); //WRONG_HASH\\n        require(\\n            opiumPositionTokenParams.positionType == LibDerivative.PositionType.SHORT,\\n            \\\"C3\\\" //WRONG_POSITION_TYPE\\n        );\\n        require(\\n            longOpiumPositionTokenParams.positionType == LibDerivative.PositionType.LONG,\\n            \\\"C3\\\" //WRONG_POSITION_TYPE\\n        );\\n\\n        // Check if ticker was canceled\\n        require(!cancelled[opiumPositionTokenParams.derivativeHash], \\\"C7\\\"); //ERROR_CORE_TICKER_WAS_CANCELLED\\n\\n        // Validate input data against Derivative logic (`syntheticId`)\\n        require(\\n            IDerivativeLogic(opiumPositionTokenParams.derivative.syntheticId).validateInput(\\n                opiumPositionTokenParams.derivative\\n            ),\\n            \\\"C8\\\"\\n        ); //ERROR_CORE_SYNTHETIC_VALIDATION_ERROR\\n\\n        uint256[2] memory margins;\\n        // Get cached margin required according to logic from Opium.SyntheticAggregator\\n        // margins[0] - buyerMargin\\n        // margins[1] - sellerMargin\\n        (margins[0], margins[1]) = ISyntheticAggregator(protocolAddressesArgs.syntheticAggregator).getMargin(\\n            opiumPositionTokenParams.derivativeHash,\\n            opiumPositionTokenParams.derivative\\n        );\\n\\n        uint256 totalMargin = _multiplier.mulWithPrecisionFactor(margins[0] + margins[1], _amount);\\n\\n        // Check ERC20 tokens allowance: (margins[0] + margins[1]) * amount\\n        // `msg.sender` must provide margin for position creation\\n        require(\\n            IERC20Upgradeable(opiumPositionTokenParams.derivative.token).allowance(\\n                msg.sender,\\n                address(protocolAddressesArgs.tokenSpender)\\n            ) >= totalMargin,\\n            \\\"C12\\\" //ERROR_CORE_NOT_ENOUGH_TOKEN_ALLOWANCE\\n        );\\n\\n        // Take ERC20 tokens from msg.sender, should never revert in correct ERC20 implementation\\n        protocolAddressesArgs.tokenSpender.claimTokens(\\n            IERC20Upgradeable(opiumPositionTokenParams.derivative.token),\\n            msg.sender,\\n            address(this),\\n            totalMargin\\n        );\\n\\n        // Increment p2p positions balance by collected margin: vault += (margins[0] + margins[1]) * _amount\\n        _increaseP2PVault(opiumPositionTokenParams.derivativeHash, totalMargin);\\n\\n        // Mint LONG and SHORT positions tokens\\n        protocolAddressesArgs.opiumProxyFactory.mintPair(\\n            msg.sender,\\n            msg.sender,\\n            _positionAddresses[0],\\n            _positionAddresses[1],\\n            _amount\\n        );\\n\\n        emit LogMinted(opiumPositionTokenParams.derivativeHash, _amount);\\n    }\\n\\n    /// @notice Executes a single position of `msg.sender` with specified `positionAddress`\\n    /// @param _positionAddress address `positionAddress` of position that needs to be executed\\n    /// @param _amount uint256 Amount of positions to execute\\n    function execute(address _positionAddress, uint256 _amount) external nonReentrant {\\n        _execute(msg.sender, _positionAddress, _amount);\\n    }\\n\\n    /// @notice Executes a single position of `_positionsOwner` with specified `positionAddress`\\n    /// @param _positionOwner address Address of the owner of positions\\n    /// @param _positionAddress address `positionAddress` of positions that needs to be executed\\n    /// @param _amount uint256 Amount of positions to execute\\n    function execute(\\n        address _positionOwner,\\n        address _positionAddress,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        _execute(_positionOwner, _positionAddress, _amount);\\n    }\\n\\n    /// @notice Executes several positions of `msg.sender` with different `positionAddresses`\\n    /// @param _positionsAddresses address[] `positionAddresses` of positions that need to be executed\\n    /// @param _amounts uint256[] Amount of positions to execute for each `positionAddress`\\n    function execute(address[] calldata _positionsAddresses, uint256[] calldata _amounts) external nonReentrant {\\n        require(_positionsAddresses.length == _amounts.length, \\\"C1\\\"); //ERROR_CORE_ADDRESSES_AND_AMOUNTS_LENGTH_DO_NOT_MATCH\\n        for (uint256 i; i < _positionsAddresses.length; i++) {\\n            _execute(msg.sender, _positionsAddresses[i], _amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Executes several positions of `_positionsOwner` with different `positionAddresses`\\n    /// @param _positionsOwner address Address of the owner of positions\\n    /// @param _positionsAddresses address[] `positionAddresses` of positions that need to be executed\\n    /// @param _amounts uint256[] Amount of positions to execute for each `positionAddresses`\\n    function execute(\\n        address _positionsOwner,\\n        address[] calldata _positionsAddresses,\\n        uint256[] calldata _amounts\\n    ) external nonReentrant {\\n        require(_positionsAddresses.length == _amounts.length, \\\"C1\\\"); //ERROR_CORE_ADDRESSES_AND_AMOUNTS_LENGTH_DO_NOT_MATCH\\n        for (uint256 i; i < _positionsAddresses.length; i++) {\\n            _execute(_positionsOwner, _positionsAddresses[i], _amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Redeems a single market neutral position pair\\n    /// @param _positionAddresses address[2] `_positionAddresses` of the positions that need to be redeemed\\n    /// @param _amount uint256 Amount of tokens to redeem\\n    function redeem(address[2] calldata _positionAddresses, uint256 _amount) external nonReentrant {\\n        _redeem(msg.sender, _positionAddresses, _amount);\\n    }\\n\\n    /// @notice Redeems several market neutral position pairs\\n    /// @param _positionsAddresses address[2][] `_positionsAddresses` of the positions that need to be redeemed\\n    /// @param _amounts uint256[] Amount of tokens to redeem for each position pair\\n    function redeem(address[2][] calldata _positionsAddresses, uint256[] calldata _amounts) external nonReentrant {\\n        require(_positionsAddresses.length == _amounts.length, \\\"C1\\\"); //ERROR_CORE_ADDRESSES_AND_AMOUNTS_LENGTH_DO_NOT_MATCH\\n        for (uint256 i = 0; i < _positionsAddresses.length; i++) {\\n            _redeem(msg.sender, _positionsAddresses[i], _amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`\\n    /// @param _positionAddress PositionType of positions to be canceled\\n    /// @param _amount uint256 Amount of positions to cancel\\n    function cancel(address _positionAddress, uint256 _amount) external nonReentrant {\\n        _cancel(_positionAddress, _amount);\\n    }\\n\\n    /// @notice Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`\\n    /// @param _positionsAddresses PositionTypes of positions to be canceled\\n    /// @param _amounts uint256[] Amount of positions to cancel for each `positionAddress`\\n    function cancel(address[] calldata _positionsAddresses, uint256[] calldata _amounts) external nonReentrant {\\n        require(_positionsAddresses.length == _amounts.length, \\\"C1\\\");\\n        for (uint256 i; i < _positionsAddresses.length; i++) {\\n            _cancel(_positionsAddresses[i], _amounts[i]);\\n        }\\n    }\\n\\n    // ****************** PRIVATE FUNCTIONS ******************\\n\\n    /// @notice Redeems market neutral position for a `_positionAddresses` pair\\n    /// @param _positionsOwner address `positionsOwner` owner of the `positionAddresses` pair\\n    /// @param _positionAddresses address[2] `positionAddresses` of the position that needs to be burnt\\n    function _redeem(\\n        address _positionsOwner,\\n        address[2] memory _positionAddresses,\\n        uint256 _amount\\n    ) private whenNotPaused {\\n        _setProtocolAddresses();\\n        uint256 shortBalance = IERC20Upgradeable(_positionAddresses[0]).balanceOf(_positionsOwner);\\n        uint256 longBalance = IERC20Upgradeable(_positionAddresses[1]).balanceOf(_positionsOwner);\\n        IOpiumPositionToken.OpiumPositionTokenParams memory opiumPositionTokenParams = IOpiumPositionToken(\\n            _positionAddresses[0]\\n        ).getPositionTokenData();\\n        IOpiumPositionToken.OpiumPositionTokenParams memory longOpiumPositionTokenParams = IOpiumPositionToken(\\n            _positionAddresses[1]\\n        ).getPositionTokenData();\\n        require(opiumPositionTokenParams.derivativeHash == longOpiumPositionTokenParams.derivativeHash, \\\"C2\\\"); //WRONG_HASH\\n        require(\\n            opiumPositionTokenParams.positionType == LibDerivative.PositionType.SHORT,\\n            \\\"C3\\\" //WRONG_POSITION_TYPE\\n        );\\n        require(\\n            longOpiumPositionTokenParams.positionType == LibDerivative.PositionType.LONG,\\n            \\\"C3\\\" //WRONG_POSITION_TYPE\\n        );\\n        require(shortBalance >= _amount, \\\"C4\\\"); //NOT_ENOUGH_POSITIONS\\n        require(longBalance >= _amount, \\\"C4\\\"); //NOT_ENOUGH_POSITIONS\\n\\n        ISyntheticAggregator.SyntheticCache memory syntheticCache = protocolAddressesArgs\\n            .syntheticAggregator\\n            .getSyntheticCache(opiumPositionTokenParams.derivativeHash, opiumPositionTokenParams.derivative);\\n\\n        uint256 totalMargin = (10**protocolCommissionArgs.precisionFactor).mulWithPrecisionFactor(\\n            syntheticCache.buyerMargin + syntheticCache.sellerMargin,\\n            _amount\\n        );\\n        uint256 fees = _getFees(\\n            syntheticCache.authorAddress,\\n            syntheticCache.commission,\\n            opiumPositionTokenParams.derivative.token,\\n            totalMargin\\n        );\\n\\n        IERC20Upgradeable(opiumPositionTokenParams.derivative.token).safeTransfer(_positionsOwner, totalMargin - fees);\\n        protocolAddressesArgs.opiumProxyFactory.burnPair(\\n            _positionsOwner,\\n            _positionAddresses[0],\\n            _positionAddresses[1],\\n            _amount\\n        );\\n        emit LogRedeem(_amount, opiumPositionTokenParams.derivativeHash);\\n    }\\n\\n    /// @notice Executes several positions of `_positionOwner` with different `positionAddresses`\\n    /// @param _positionOwner address Address of the owner of positions\\n    /// @param _positionAddress address[] `positionAddresses` of positions that needs to be executed\\n    /// @param _amount uint256 Amount of positions to execute for each `positionAddress`\\n    function _execute(\\n        address _positionOwner,\\n        address _positionAddress,\\n        uint256 _amount\\n    ) private onlyOpiumFactoryTokens(_positionAddress) whenNotPaused {\\n        _setProtocolAddresses();\\n        IOpiumPositionToken.OpiumPositionTokenParams memory opiumPositionTokenParams = IOpiumPositionToken(\\n            _positionAddress\\n        ).getPositionTokenData();\\n\\n        // Check if execution is performed after endTime\\n        require(block.timestamp > opiumPositionTokenParams.derivative.endTime, \\\"C10\\\"); //ERROR_CORE_EXECUTION_BEFORE_MATURITY_NOT_ALLOWED\\n\\n        // Checking whether execution is performed by `_positionsOwner` or `_positionsOwner` allowed third party executions on it's behalf\\n        require(\\n            _positionOwner == msg.sender ||\\n                IDerivativeLogic(opiumPositionTokenParams.derivative.syntheticId).thirdpartyExecutionAllowed(\\n                    _positionOwner\\n                ),\\n            \\\"C11\\\" //ERROR_CORE_SYNTHETIC_EXECUTION_WAS_NOT_ALLOWED\\n        );\\n\\n        // Returns payout for all positions\\n        uint256 payout = _getPayout(\\n            opiumPositionTokenParams,\\n            _amount,\\n            protocolAddressesArgs.syntheticAggregator,\\n            protocolAddressesArgs.oracleAggregator\\n        );\\n\\n        // Transfer payout\\n        if (payout > 0) {\\n            IERC20Upgradeable(opiumPositionTokenParams.derivative.token).safeTransfer(_positionOwner, payout);\\n        }\\n        // Burn executed position tokens\\n        protocolAddressesArgs.opiumProxyFactory.burn(_positionOwner, _positionAddress, _amount);\\n\\n        emit LogExecuted(_positionOwner, _positionAddress, _amount);\\n    }\\n\\n    /// @notice Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`\\n    /// @param _positionAddress PositionTypes of positions to be canceled\\n    /// @param _amount uint256[] Amount of positions to cancel for each `positionAddress`\\n    function _cancel(address _positionAddress, uint256 _amount)\\n        private\\n        onlyOpiumFactoryTokens(_positionAddress)\\n        whenNotPaused\\n    {\\n        _setProtocolAddresses();\\n        uint256 _multiplier = 10**protocolCommissionArgs.precisionFactor;\\n        IOpiumPositionToken.OpiumPositionTokenParams memory opiumPositionTokenParams = IOpiumPositionToken(\\n            _positionAddress\\n        ).getPositionTokenData();\\n        // Don't allow to cancel tickers with \\\"dummy\\\" oracleIds\\n        require(opiumPositionTokenParams.derivative.oracleId != address(0), \\\"C6\\\"); //ERROR_CORE_CANT_CANCEL_DUMMY_ORACLE_ID\\n\\n        // Check if cancellation is called after `protocolCommissionArgs.noDataCancellationPeriod` and `oracleId` didn't provided data\\n        require(\\n            opiumPositionTokenParams.derivative.endTime + protocolCommissionArgs.noDataCancellationPeriod <=\\n                block.timestamp &&\\n                !protocolAddressesArgs.oracleAggregator.hasData(\\n                    opiumPositionTokenParams.derivative.oracleId,\\n                    opiumPositionTokenParams.derivative.endTime\\n                ),\\n            \\\"C13\\\" //ERROR_CORE_CANCELLATION_IS_NOT_ALLOWED\\n        );\\n\\n        // Emit `Canceled` event only once and mark ticker as canceled\\n        if (!cancelled[opiumPositionTokenParams.derivativeHash]) {\\n            cancelled[opiumPositionTokenParams.derivativeHash] = true;\\n            emit LogCanceled(opiumPositionTokenParams.derivativeHash);\\n        }\\n\\n        uint256[2] memory margins;\\n        // Get cached margin required according to logic from Opium.SyntheticAggregator\\n        // margins[0] - buyerMargin\\n        // margins[1] - sellerMargin\\n        (margins[0], margins[1]) = protocolAddressesArgs.syntheticAggregator.getMargin(\\n            opiumPositionTokenParams.derivativeHash,\\n            opiumPositionTokenParams.derivative\\n        );\\n\\n        uint256 payout;\\n        // Check if `_positionAddresses` is a LONG position\\n        if (opiumPositionTokenParams.positionType == LibDerivative.PositionType.LONG) {\\n            // Set payout to buyerPayout\\n            payout = _multiplier.mulWithPrecisionFactor(margins[0], _amount);\\n\\n            // Check if `positionAddress` is a SHORT position\\n        } else {\\n            // Set payout to sellerPayout\\n            payout = _multiplier.mulWithPrecisionFactor(margins[1], _amount);\\n        }\\n        _decreaseP2PVault(opiumPositionTokenParams.derivativeHash, payout);\\n\\n        // Transfer payout * _amounts[i]\\n        if (payout > 0) {\\n            IERC20Upgradeable(opiumPositionTokenParams.derivative.token).safeTransfer(msg.sender, payout);\\n        }\\n\\n        // Burn canceled position tokens\\n        protocolAddressesArgs.opiumProxyFactory.burn(msg.sender, _positionAddress, _amount);\\n    }\\n\\n    function _getPayout(\\n        IOpiumPositionToken.OpiumPositionTokenParams memory _opiumPositionTokenParams,\\n        uint256 _amount,\\n        ISyntheticAggregator _syntheticAggregator,\\n        IOracleAggregator _oracleAggregator\\n    ) private returns (uint256 payout) {\\n        // // Check if ticker was canceled\\n        require(!cancelled[_opiumPositionTokenParams.derivativeHash], \\\"C7\\\"); //ERROR_CORE_TICKER_WAS_CANCELLED\\n\\n        // Trying to getData from Opium.OracleAggregator, could be reverted\\n        // Opium allows to use \\\"dummy\\\" oracleIds, in this case data is set to `0`\\n        uint256 data;\\n        if (_opiumPositionTokenParams.derivative.oracleId != address(0)) {\\n            data = _oracleAggregator.getData(\\n                _opiumPositionTokenParams.derivative.oracleId,\\n                _opiumPositionTokenParams.derivative.endTime\\n            );\\n        } else {\\n            data = 0;\\n        }\\n\\n        if (\\n            derivativePayouts[_opiumPositionTokenParams.derivativeHash][0] == 0 &&\\n            derivativePayouts[_opiumPositionTokenParams.derivativeHash][1] == 0\\n        ) {\\n            // Get payout ratio from Derivative logic\\n            // payoutRatio[0] - buyerPayout\\n            // payoutRatio[1] - sellerPayout\\n            (uint256 buyerPayout, uint256 sellerPayout) = IDerivativeLogic(\\n                _opiumPositionTokenParams.derivative.syntheticId\\n            ).getExecutionPayout(_opiumPositionTokenParams.derivative, data);\\n            // Cache buyer payout\\n            derivativePayouts[_opiumPositionTokenParams.derivativeHash][0] = buyerPayout;\\n            // Cache seller payout\\n            derivativePayouts[_opiumPositionTokenParams.derivativeHash][1] = sellerPayout;\\n        }\\n\\n        uint256 buyerPayoutRatio = derivativePayouts[_opiumPositionTokenParams.derivativeHash][0];\\n        uint256 sellerPayoutRatio = derivativePayouts[_opiumPositionTokenParams.derivativeHash][1];\\n\\n        ISyntheticAggregator.SyntheticCache memory syntheticCache = ISyntheticAggregator(_syntheticAggregator)\\n            .getSyntheticCache(_opiumPositionTokenParams.derivativeHash, _opiumPositionTokenParams.derivative);\\n\\n        uint256[2] memory payouts;\\n        // Calculate payouts from ratio\\n        // payouts[0] -> buyerPayout = (buyerMargin + sellerMargin) * buyerPayoutRatio / (buyerPayoutRatio + sellerPayoutRatio)\\n        // payouts[1] -> sellerPayout = (buyerMargin + sellerMargin) * sellerPayoutRatio / (buyerPayoutRatio + sellerPayoutRatio)\\n        payouts[0] =\\n            ((syntheticCache.buyerMargin + syntheticCache.sellerMargin) * buyerPayoutRatio) /\\n            (buyerPayoutRatio + sellerPayoutRatio);\\n        payouts[1] =\\n            ((syntheticCache.buyerMargin + syntheticCache.sellerMargin) * sellerPayoutRatio) /\\n            (buyerPayoutRatio + sellerPayoutRatio);\\n\\n        uint256 _multiplier = 10**protocolCommissionArgs.precisionFactor;\\n\\n        // Check if `_positionType` is LONG\\n        if (_opiumPositionTokenParams.positionType == LibDerivative.PositionType.LONG) {\\n            // Set payout to buyerPayout\\n            payout = payouts[0];\\n\\n            // Multiply payout by amount\\n            payout = _multiplier.mulWithPrecisionFactor(payout, _amount);\\n\\n            uint256 longMargin = _multiplier.mulWithPrecisionFactor(syntheticCache.buyerMargin, _amount);\\n\\n            // Take fees only from profit makers\\n            // Check: payout > buyerMargin * amount\\n            if (payout > longMargin) {\\n                // Get Opium and `syntheticId` author fees and subtract it from payout\\n                payout =\\n                    payout -\\n                    (\\n                        _getFees(\\n                            syntheticCache.authorAddress,\\n                            syntheticCache.commission,\\n                            _opiumPositionTokenParams.derivative.token,\\n                            payout - longMargin\\n                        )\\n                    );\\n            }\\n\\n            // Check if `_positionType` is a SHORT position\\n        } else {\\n            // Set payout to sellerPayout\\n            payout = payouts[1];\\n\\n            // Multiply payout by amount\\n            payout = _multiplier.mulWithPrecisionFactor(payout, _amount);\\n            uint256 shortMargin = _multiplier.mulWithPrecisionFactor(syntheticCache.sellerMargin, _amount);\\n\\n            // Take fees only from profit makers\\n            // Check: payout > sellerMargin * amount\\n\\n            if (payout > shortMargin) {\\n                // Get Opium fees and subtract it from payout\\n                payout =\\n                    payout -\\n                    (\\n                        _getFees(\\n                            syntheticCache.authorAddress,\\n                            syntheticCache.commission,\\n                            _opiumPositionTokenParams.derivative.token,\\n                            payout - shortMargin\\n                        )\\n                    );\\n            }\\n        }\\n        _decreaseP2PVault(_opiumPositionTokenParams.derivativeHash, payout);\\n    }\\n\\n    /// @notice Calculates `syntheticId` author and opium fees from profit makers\\n    /// @param _profit uint256 payout of one position\\n    /// @return fee uint256 Opium and `syntheticId` author fee\\n    function _getFees(\\n        address _authorAddress,\\n        uint256 _authorCommission,\\n        address _tokenAddress,\\n        uint256 _profit\\n    ) private returns (uint256 fee) {\\n        // Calculate fee\\n        // fee = profit * commission / COMMISSION_BASE\\n        fee = (_profit * _authorCommission) / protocolCommissionArgs.derivativeAuthorCommissionBase;\\n\\n        // If commission is zero, finish\\n        if (fee == 0) {\\n            return 0;\\n        }\\n\\n        // Calculate opium fee\\n        // opiumFee = fee * OPIUM_COMMISSION_PART / OPIUM_COMMISSION_BASE\\n        uint256 opiumFee = (fee * protocolCommissionArgs.protocolCommissionPart) /\\n            protocolCommissionArgs.protocolFeeCommissionBase;\\n\\n        // Calculate author fee\\n        // authorFee = fee - opiumFee\\n        uint256 authorFee = fee - opiumFee;\\n\\n        // Update feeVault for Opium team\\n        // feesVault[opium][token] += opiumFee\\n        feesVaults[protocolAddressesArgs.protocolFeeReceiver][_tokenAddress] =\\n            feesVaults[protocolAddressesArgs.protocolFeeReceiver][_tokenAddress] +\\n            opiumFee;\\n\\n        // Update feeVault for `syntheticId` author\\n        // feeVault[author][token] += authorFee\\n        feesVaults[_authorAddress][_tokenAddress] = feesVaults[_authorAddress][_tokenAddress] + authorFee;\\n    }\\n\\n    function _increaseP2PVault(bytes32 _derivativeHash, uint256 _amount) private {\\n        p2pVaults[_derivativeHash] = p2pVaults[_derivativeHash] + _amount;\\n    }\\n\\n    function _decreaseP2PVault(bytes32 _derivativeHash, uint256 _amount) private {\\n        require(p2pVaults[_derivativeHash] >= _amount, \\\"C9\\\"); //ERROR_CORE_INSUFFICIENT_P2P_BALANCE\\n        p2pVaults[_derivativeHash] = p2pVaults[_derivativeHash] - _amount;\\n    }\\n\\n    function _setProtocolAddresses() private {\\n        if (address(protocolAddressesArgs.syntheticAggregator) == address(0)) {\\n            protocolAddressesArgs = registry.getProtocolAddresses();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x508b97f73638871f3d96bcb3b4e20dc6eeb9d20a6192a32524f69cc2e3c0d072\"},\"contracts/Interface/IDerivativeLogic.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\n/// @title Opium.Interface.IDerivativeLogic contract is an interface that every syntheticId should implement\\nabstract contract IDerivativeLogic {\\n    /// @notice Validates ticker\\n    /// @param _derivative Derivative Instance of derivative to validate\\n    /// @return Returns boolean whether ticker is valid\\n    function validateInput(LibDerivative.Derivative memory _derivative) public view virtual returns (bool);\\n\\n    /// @notice Calculates margin required for derivative creation\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @return buyerMargin uint256 Margin needed from buyer (LONG position)\\n    /// @return sellerMargin uint256 Margin needed from seller (SHORT position)\\n    function getMargin(LibDerivative.Derivative memory _derivative)\\n        public\\n        view\\n        virtual\\n        returns (uint256 buyerMargin, uint256 sellerMargin);\\n\\n    /// @notice Calculates payout for derivative execution\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @param _result uint256 Data retrieved from oracleId on the maturity\\n    /// @return buyerPayout uint256 Payout in ratio for buyer (LONG position holder)\\n    /// @return sellerPayout uint256 Payout in ratio for seller (SHORT position holder)\\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\\n        public\\n        view\\n        virtual\\n        returns (uint256 buyerPayout, uint256 sellerPayout);\\n\\n    /// @notice Returns syntheticId author address for Opium commissions\\n    /// @return authorAddress address The address of syntheticId address\\n    function getAuthorAddress() public view virtual returns (address authorAddress);\\n\\n    /// @notice Returns syntheticId author commission in base of COMMISSION_BASE\\n    /// @return commission uint256 Author commission\\n    function getAuthorCommission() public view virtual returns (uint256 commission);\\n\\n    /// @notice Returns whether thirdparty could execute on derivative's owner's behalf\\n    /// @param _derivativeOwner address Derivative owner address\\n    /// @return Returns boolean whether _derivativeOwner allowed third party execution\\n    function thirdpartyExecutionAllowed(address _derivativeOwner) public view virtual returns (bool);\\n\\n    /// @notice Sets whether thirds parties are allowed or not to execute derivative's on msg.sender's behalf\\n    /// @param _allow bool Flag for execution allowance\\n    function allowThirdpartyExecution(bool _allow) public virtual;\\n\\n    // Event with syntheticId metadata JSON string (for DIB.ONE derivative explorer)\\n    event MetadataSet(string metadata);\\n}\\n\",\"keccak256\":\"0x1488c41956c63f69592eeccf9428f17b8380f66b8c12d7a4ca167ba93e479f37\"},\"contracts/Interface/IOpiumPositionToken.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\ninterface IOpiumPositionToken {\\n    struct OpiumPositionTokenParams {\\n        LibDerivative.Derivative derivative;\\n        LibDerivative.PositionType positionType;\\n        bytes32 derivativeHash;\\n    }\\n\\n    function initialize(\\n        bytes32 _derivativeHash,\\n        LibDerivative.PositionType _positionType,\\n        LibDerivative.Derivative calldata _derivative\\n    ) external;\\n\\n    function mint(address _address, uint256 _amount) external;\\n\\n    function burn(address _address, uint256 _amount) external;\\n\\n    function getFactoryAddress() external view returns (address);\\n\\n    function getPositionTokenData() external view returns (OpiumPositionTokenParams memory opiumPositionTokenParams);\\n}\\n\",\"keccak256\":\"0x21a6bbfb1baf3cb5d9b7c22d6adeb358cd5b9e126194f3abd1951b211f086b2a\"},\"contracts/Interface/IOpiumProxyFactory.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\ninterface IOpiumProxyFactory {\\n    function getImplementationAddress() external view returns (address);\\n\\n    function create(\\n        address _buyer,\\n        address _seller,\\n        uint256 _amount,\\n        bytes32 _derivativeHash,\\n        LibDerivative.Derivative calldata _derivative\\n    ) external;\\n\\n    function mintPair(\\n        address _buyer,\\n        address _seller,\\n        address _longPositionAddress,\\n        address _shortPositionAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function burnPair(\\n        address _tokenOwner,\\n        address _longToken,\\n        address _shortToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        address _tokenOwner,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb5cd1d493bda48bb8974196c7dc77c1f67b334adee59020d252907808ddce74\"},\"contracts/Interface/IOracleAggregator.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\ninterface IOracleAggregator {\\n    function __callback(uint256 timestamp, uint256 data) external;\\n\\n    function getData(address oracleId, uint256 timestamp) external view returns (uint256 dataResult);\\n\\n    function hasData(address oracleId, uint256 timestamp) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf7c9726dd6474c8c52bebc84aee87e000514a26bd19d74786b86df981664cdd5\"},\"contracts/Interface/IRegistry.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Registry/RegistryEntities.sol\\\";\\n\\ninterface IRegistry {\\n    function getCore() external view returns (address);\\n\\n    function getOracleAggregator() external view returns (address);\\n\\n    function isWhitelisted(address _address) external view returns (bool);\\n\\n    function getProtocolAddresses() external view returns (RegistryEntities.ProtocolAddressesArgs memory);\\n\\n    function getProtocolCommissionParams() external view returns (RegistryEntities.ProtocolCommissionArgs memory);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa736815379121444933331bd9233c01194e1ce49b0aff1a401c606a0f1a0657d\"},\"contracts/Interface/ISyntheticAggregator.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"../Lib/LibDerivative.sol\\\";\\n\\ninterface ISyntheticAggregator {\\n    struct SyntheticCache {\\n        uint256 buyerMargin;\\n        uint256 sellerMargin;\\n        uint256 commission; // rename it to author commission for clarity\\n        address authorAddress;\\n        bool init;\\n        // SyntheticTypes typeByHash;\\n    }\\n\\n    function getSyntheticCache(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (SyntheticCache memory);\\n\\n    function getMargin(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (uint256 buyerMargin, uint256 sellerMargin);\\n}\\n\",\"keccak256\":\"0x0dc6de045cb931209ed9e629be93b919634b241b8785726788dfe1fdcfa9d114\"},\"contracts/Interface/ITokenSpender.sol\":{\"content\":\"pragma solidity 0.8.5;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITokenSpender {\\n    function claimTokens(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x28849197d4a2ac4ce19a2b9a01ba9cf3f9d83462e827b8588e96e104ce686298\"},\"contracts/Lib/LibCalculator.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nlibrary LibCalculator {\\n    function mulWithPrecisionFactor(uint256 _precisionFactor, uint256 _x, uint256 _y) internal pure returns (uint256) {\\n        return (_x * _y) / _precisionFactor;\\n    }\\n\\n    function modWithPrecisionFactor(uint256 _precisionFactor, uint256 _x) internal pure returns (uint256) {\\n        return _x % _precisionFactor;\\n    }\\n}\\n\",\"keccak256\":\"0x6000a368057d188bdd14687a8cce0520a91933045e89dd4cb89e3b41fa6edae1\"},\"contracts/Lib/LibDerivative.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\n/// @title Opium.Lib.LibDerivative contract should be inherited by contracts that use Derivative structure and calculate derivativeHash\\nlibrary LibDerivative {\\n    enum PositionType {\\n        SHORT,\\n        LONG\\n    }\\n    \\n    // Opium derivative structure (ticker) definition\\n    struct Derivative {\\n        // Margin parameter for syntheticId\\n        uint256 margin;\\n        // Maturity of derivative\\n        uint256 endTime;\\n        // Additional parameters for syntheticId\\n        uint256[] params;\\n        // oracleId of derivative\\n        address oracleId;\\n        // Margin token address of derivative\\n        address token;\\n        // syntheticId of derivative\\n        address syntheticId;\\n    }\\n\\n    /// @notice Calculates hash of provided Derivative\\n    /// @param _derivative Derivative Instance of derivative to hash\\n    /// @return derivativeHash bytes32 Derivative hash\\n    function getDerivativeHash(Derivative memory _derivative) internal pure returns (bytes32 derivativeHash) {\\n        derivativeHash = keccak256(abi.encodePacked(\\n            _derivative.margin,\\n            _derivative.endTime,\\n            _derivative.params,\\n            _derivative.oracleId,\\n            _derivative.token,\\n            _derivative.syntheticId\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x9c8656fb850636580a40cebb4c7b564a76d09ee43ad5ee564b5e59235f5eccfa\"},\"contracts/Lib/LibPosition.sol\":{\"content\":\"pragma solidity ^0.8.5;\\n\\nimport \\\"openzeppelin-solidity/contracts/proxy/Clones.sol\\\";\\n\\nlibrary LibPosition {\\n  function predictDeterministicAddress(\\n    bytes32 _derivativeHash,\\n    bool _isLong, \\n    address _positionImplementationAddress, \\n    address _factoryAddress\\n  ) internal pure returns(address) {\\n    bytes32 salt = keccak256(abi.encodePacked( _derivativeHash, _isLong ? \\\"L\\\" : \\\"S\\\"));\\n    return Clones.predictDeterministicAddress(_positionImplementationAddress, salt, _factoryAddress);\\n  }\\n\\n  function deployOpiumPosition(\\n    bytes32 _derivativeHash, \\n    bool _isLong,\\n    address _positionImplementationAddress\\n  ) internal returns(address) {\\n    bytes32 salt = keccak256(abi.encodePacked( _derivativeHash, _isLong ? \\\"L\\\" : \\\"S\\\"));\\n    return Clones.cloneDeterministic(_positionImplementationAddress, salt);\\n  }\\n}\\n\",\"keccak256\":\"0x9f9974e46bcec336d60363dde3adc3b568722990f10b4a7bcdb6bbe4bc69feba\"},\"contracts/Registry/RegistryEntities.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"../Interface/IOpiumProxyFactory.sol\\\";\\nimport \\\"../Interface/ISyntheticAggregator.sol\\\";\\nimport \\\"../Interface/IOracleAggregator.sol\\\";\\nimport \\\"../Interface/ITokenSpender.sol\\\";\\n\\nlibrary RegistryEntities {\\n    struct ProtocolCommissionArgs {\\n        // Represents 100% base for commissions calculation\\n        uint32 derivativeAuthorCommissionBase;\\n        // Period of time after which ticker could be canceled if no data was provided to the `oracleId`\\n        uint32 noDataCancellationPeriod;\\n        // Represents 100% base for Opium commission\\n        uint8 protocolFeeCommissionBase;\\n        // Represents which part of `syntheticId` author commissions goes to opium\\n        uint8 protocolCommissionPart;\\n        // scaling factor\\n        uint8 precisionFactor;\\n        bool paused;\\n    }\\n\\n    struct ProtocolAddressesArgs {\\n        // Address of Opium.Core contract\\n        address core;\\n        // Address of Opium.OpiumProxyFactory contract\\n        IOpiumProxyFactory opiumProxyFactory;\\n        // Address of Opium.OracleAggregator contract\\n        IOracleAggregator oracleAggregator;\\n        // Address of Opium.SyntheticAggregator contract\\n        ISyntheticAggregator syntheticAggregator;\\n        // Address of Opium.TokenSpender contract\\n        ITokenSpender tokenSpender;\\n        // Address of protocol commission receiver\\n        address protocolFeeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x5c842f2678e0ab1c8e19ff0e097572984bd56658de6bfeb9d387623bbe35c3ae\"},\"contracts/TokenSpender.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./Interface/IRegistry.sol\\\";\\n\\n/// @title Opium.TokenSpender contract holds users ERC20 approvals and allows whitelisted contracts to use tokens\\ncontract TokenSpender is Initializable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    IRegistry private registry;\\n\\n    modifier onlyCoreSpenders() {\\n        require(registry.isWhitelisted(msg.sender), \\\"U2\\\"); // not whitelisted\\n        _;\\n    }\\n\\n    /// @notice Calls constructors of super-contracts\\n    /// @param _registry address Address of governor, who is allowed to adjust whitelist\\n    function initialize(address _registry) external initializer {\\n        registry = IRegistry(_registry);\\n    }\\n\\n    /// @notice Using this function whitelisted contracts could call ERC20 transfers\\n    /// @param token IERC20 Instance of token\\n    /// @param from address Address from which tokens are transferred\\n    /// @param to address Address of tokens receiver\\n    /// @param amount uint256 Amount of tokens to be transferred\\n    function claimTokens(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external onlyCoreSpenders {\\n        token.safeTransferFrom(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x16be6f4e74489b3c3fc61caff95ac08627a1e6f1cd2e76abc971c309b30d61bc\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506140a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806398590ef91161008c578063df849d9c11610066578063df849d9c146101d9578063e4a86da3146101ec578063eafaddfd146101ff578063f1015a161461021257600080fd5b806398590ef9146101a0578063c4d66de8146101b3578063d7acb448146101c657600080fd5b8063553500b4116100c8578063553500b41461012a5780635d8228131461013d5780636a990b6e1461015057806372d335821461018d57600080fd5b80631ac3ddeb146100ef5780633b89bb86146101045780634be279b014610117575b600080fd5b6101026100fd366004613304565b610232565b005b61010261011236600461343b565b610369565b610102610125366004613902565b6103ba565b610102610138366004613492565b610c95565b61010261014b3660046133b8565b610d80565b61017b61015e36600461333e565b603d60209081526000928352604080842090915290825290205481565b60405190815260200160405180910390f35b61010261019b366004613492565b610e39565b6101026101ae36600461343b565b610f18565b6101026101c1366004613304565b610f68565b6101026101d43660046135b3565b611192565b6101026101e7366004613467565b61174f565b6101026101fa3660046134fe565b6117c4565b61010261020d366004613377565b6118bf565b61017b61022036600461359a565b603b6020526000908152604090205481565b600260015414156102785760405162461bcd60e51b815260206004820152601f602482015260008051602061404b83398151915260448201526064015b60405180910390fd5b6002600155603354604080516358c3de9360e11b815290516001600160a01b039092169163b187bd2691600480820192602092909190829003018186803b1580156102c257600080fd5b505afa1580156102d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fa919061357f565b1561032c5760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b336000818152603d602090815260408083206001600160a01b0386168085529252822080549290559091610361919083611919565b505060018055565b600260015414156103aa5760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155610361338383611985565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561040857600080fd5b505afa15801561041c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610440919061357f565b156104725760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b61047f6020820182613304565b60365460408051632a70b8db60e21b815290516001600160a01b039283169284169163a9c2e36c916004808301926020929190829003018186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190613321565b6001600160a01b0316146105395760405162461bcd60e51b8152602060048201526002602482015261553360f01b604482015260640161026f565b6105496040830160208401613304565b60365460408051632a70b8db60e21b815290516001600160a01b039283169284169163a9c2e36c916004808301926020929190829003018186803b15801561059057600080fd5b505afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c89190613321565b6001600160a01b0316146106035760405162461bcd60e51b8152602060048201526002602482015261553360f01b604482015260640161026f565b600260015414156106445760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155610651611d93565b60345460009061066c90600160501b900460ff16600a613d9d565b9050600061067d6020860186613304565b6001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f19190810190613610565b905060006107056040870160208801613304565b6001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561073d57600080fd5b505afa158015610751573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107799190810190613610565b8251519091506107959061078e908990613e48565b8490611ebc565b156107c75760405162461bcd60e51b8152602060048201526002602482015261433560f01b604482015260640161026f565b80604001518260400151146108035760405162461bcd60e51b8152602060048201526002602482015261219960f11b604482015260640161026f565b60008260200151600181111561081b5761081b613ff0565b1461084d5760405162461bcd60e51b8152602060048201526002602482015261433360f01b604482015260640161026f565b60018160200151600181111561086557610865613ff0565b146108975760405162461bcd60e51b8152602060048201526002602482015261433360f01b604482015260640161026f565b6040808301516000908152603e602052205460ff16156108de5760405162461bcd60e51b8152602060048201526002602482015261433760f01b604482015260640161026f565b815160a0810151604051633a6f60a960e01b81526001600160a01b0390911691633a6f60a9916109119190600401613c58565b60206040518083038186803b15801561092957600080fd5b505afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610961919061357f565b6109925760405162461bcd60e51b8152602060048201526002602482015261086760f31b604482015260640161026f565b61099a61322a565b60385460408085015185519151634cfb42f760e11b81526001600160a01b03909316926399f685ee926109d09291600401613bf9565b6040805180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a21919061392f565b60208301819052818352600091610a4391610a3b91613d2e565b86908b611ed1565b845160800151603954604051636eb1769f60e11b81523360048201526001600160a01b039182166024820152929350839291169063dd62ed3e9060440160206040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad091906138e9565b1015610b045760405162461bcd60e51b815260206004820152600360248201526221989960e91b604482015260640161026f565b60395484516080015160405163052f523360e11b81526001600160a01b03918216600482015233602482015230604482015260648101849052911690630a5ea46690608401600060405180830381600087803b158015610b6357600080fd5b505af1158015610b77573d6000803e3d6000fd5b50505050610b89846040015182611ef2565b6036546001600160a01b03166347704dbd3380610ba960208d018d613304565b610bb960408e0160208f01613304565b60405160e086901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039485166004820152928416602484015290831660448301529091166064820152608481018c905260a401600060405180830381600087803b158015610c3157600080fd5b505af1158015610c45573d6000803e3d6000fd5b5050506040808601518151908152602081018c90527fa658fd9bfc93101fc807c36183097b99f0be42f07ec2923a7d4a7f1e6879d9e092500160405180910390a150506001805550505050505050565b60026001541415610cd65760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155828114610d0f5760405162461bcd60e51b8152602060048201526002602482015261433160f01b604482015260640161026f565b60005b83811015610d7557610d6333868684818110610d3057610d30614006565b9050602002016020810190610d459190613304565b858585818110610d5757610d57614006565b90506020020135611985565b80610d6d81613f95565b915050610d12565b505060018055505050565b60026001541415610dc15760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155828114610dfa5760405162461bcd60e51b8152602060048201526002602482015261433160f01b604482015260640161026f565b60005b83811015610e2d57610e1b86868684818110610d3057610d30614006565b80610e2581613f95565b915050610dfd565b50506001805550505050565b60026001541415610e7a5760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155828114610eb35760405162461bcd60e51b8152602060048201526002602482015261433160f01b604482015260640161026f565b60005b83811015610d7557610f06858583818110610ed357610ed3614006565b9050602002016020810190610ee89190613304565b848484818110610efa57610efa614006565b90506020020135611f22565b80610f1081613f95565b915050610eb6565b60026001541415610f595760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b60026001556103618282611f22565b600054610100900460ff1680610f81575060005460ff16155b610ff35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161026f565b600054610100900460ff16158015611015576000805461ffff19166101011790555b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915560408051630f0bfe7960e21b81529051633c2ff9e49160048082019260c092909190829003018186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae91906137f7565b805160348054602084015160408501516060860151608087015160a09097015115156b010000000000000000000000026bff00000000000000000000001960ff988916600160501b02166bffff000000000000000000001992891669010000000000000000000269ff000000000000000000199990941668010000000000000000029890981669ffff00000000000000001963ffffffff9586166401000000000267ffffffffffffffff199097169590981694909417949094179590951691909117179290921692909217179055801561118e576000805461ff00191690555b5050565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e057600080fd5b505afa1580156111f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611218919061357f565b1561124a5760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b6002600154141561128b5760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155611298611d93565b6034546000906112b390600160501b900460ff16600a613d9d565b90506112ca6112c3848635613e48565b8290611ebc565b156112fc5760405162461bcd60e51b8152602060048201526002602482015261433560f01b604482015260640161026f565b600061130f61130a86613e7e565b612472565b6000818152603e602052604090205490915060ff16156113565760405162461bcd60e51b8152602060048201526002602482015261433760f01b604482015260640161026f565b61136660c0860160a08701613304565b6001600160a01b0316633a6f60a9866040518263ffffffff1660e01b81526004016113919190613c45565b60206040518083038186803b1580156113a957600080fd5b505afa1580156113bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e1919061357f565b6114125760405162461bcd60e51b8152602060048201526002602482015261086760f31b604482015260640161026f565b61141a61322a565b603854604051634cfb42f760e11b81526001600160a01b03909116906399f685ee9061144c9085908a90600401613be0565b6040805180830381600087803b15801561146557600080fd5b505af1158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d919061392f565b602083018190528183526000916114bf916114b791613d2e565b859088611ed1565b9050806114d260a0890160808a01613304565b603954604051636eb1769f60e11b81523360048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b15801561151c57600080fd5b505afa158015611530573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155491906138e9565b10156115885760405162461bcd60e51b815260206004820152600360248201526221989960e91b604482015260640161026f565b6039546001600160a01b0316630a5ea4666115a960a08a0160808b01613304565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015233602482015230604482015260648101849052608401600060405180830381600087803b15801561161557600080fd5b505af1158015611629573d6000803e3d6000fd5b505050506116378382611ef2565b6036546001600160a01b0316639873dba96116556020880188613304565b6116656040890160208a01613304565b89878c6040518663ffffffff1660e01b8152600401611688959493929190613ba8565b600060405180830381600087803b1580156116a257600080fd5b505af11580156116b6573d6000803e3d6000fd5b505050507fed55db682403ff79a20059d95317cb2e4f4d322b5b4d062ca27c10de39bdcae4856000600281106116ee576116ee614006565b6020020160208101906117019190613304565b6117116040880160208901613304565b604080516001600160a01b03938416815292909116602083015281018590526060810188905260800160405180910390a15050600180555050505050565b600260015414156117905760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600181905560408051808201825261036192339286919083908390808284376000920191909152508591506124bf9050565b600260015414156118055760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b600260015582811461183e5760405162461bcd60e51b8152602060048201526002602482015261433160f01b604482015260640161026f565b60005b83811015610d75576118ad3386868481811061185f5761185f614006565b9050604002016002806020026040519081016040528092919082600260200280828437600092019190915250879150869050858181106118a1576118a1614006565b905060200201356124bf565b806118b781613f95565b915050611841565b600260015414156119005760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155611910838383611985565b50506001805550565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611980908490612a90565b505050565b81603560010160009054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663a9c2e36c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e157600080fd5b505afa1580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190613321565b6001600160a01b031614611a545760405162461bcd60e51b8152602060048201526002602482015261553360f01b604482015260640161026f565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa257600080fd5b505afa158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada919061357f565b15611b0c5760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b611b14611d93565b6000836001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611b4f57600080fd5b505afa158015611b63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b8b9190810190613610565b8051602001519091504211611bc85760405162461bcd60e51b815260206004820152600360248201526204331360ec1b604482015260640161026f565b6001600160a01b038516331480611c5a5750805160a00151604051631e44861d60e31b81526001600160a01b0387811660048301529091169063f22430e89060240160206040518083038186803b158015611c2257600080fd5b505afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a919061357f565b611c8c5760405162461bcd60e51b815260206004820152600360248201526243313160e81b604482015260640161026f565b603854603754600091611caf91849187916001600160a01b039182169116612b75565b90508015611cd157815160800151611cd1906001600160a01b03168783611919565b603654604051633dae446f60e21b81526001600160a01b0388811660048301528781166024830152604482018790529091169063f6b911bc90606401600060405180830381600087803b158015611d2757600080fd5b505af1158015611d3b573d6000803e3d6000fd5b5050604080516001600160a01b03808b168252891660208201529081018790527fe7f87f0b9d521ac925b66f1e1599d5389bf92e298a6cbf0750f68d5beffed1a69250606001905060405180910390a1505050505050565b6038546001600160a01b0316611eba57603360009054906101000a90046001600160a01b03166001600160a01b031663a1774da06040518163ffffffff1660e01b815260040160c06040518083038186803b158015611df157600080fd5b505afa158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e29919061376a565b80516035805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0393841617909155602083015160368054831691841691909117905560408301516037805483169184169190911790556060830151603880548316918416919091179055608083015160398054831691841691909117905560a090920151603a805490931691161790555b565b6000611ec88383613fb0565b90505b92915050565b600083611ede8385613e48565b611ee89190613d46565b90505b9392505050565b6000828152603b6020526040902054611f0c908290613d2e565b6000928352603b60205260409092209190915550565b81603560010160009054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663a9c2e36c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7e57600080fd5b505afa158015611f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb69190613321565b6001600160a01b031614611ff15760405162461bcd60e51b8152602060048201526002602482015261553360f01b604482015260640161026f565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561203f57600080fd5b505afa158015612053573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612077919061357f565b156120a95760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b6120b1611d93565b6034546000906120cc90600160501b900460ff16600a613d9d565b90506000846001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561210957600080fd5b505afa15801561211d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121459190810190613610565b8051606001519091506001600160a01b03166121885760405162461bcd60e51b8152602060048201526002602482015261219b60f11b604482015260640161026f565b60345481516020015142916121ac9164010000000090910463ffffffff1690613d2e565b1115801561224857506037548151606081015160209091015160405163c8384d2f60e01b81526001600160a01b039283166004820152602481019190915291169063c8384d2f9060440160206040518083038186803b15801561220e57600080fd5b505afa158015612222573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612246919061357f565b155b61227a5760405162461bcd60e51b815260206004820152600360248201526243313360e81b604482015260640161026f565b6040808201516000908152603e602052205460ff166122ec57604080820180516000908152603e602052829020805460ff191660011790555190517e51663824be907dd6b3ee1361ee010c8f6dbbcba644dd14ca8eacd89e17e4f1916122e39190815260200190565b60405180910390a15b6122f461322a565b60385460408084015184519151634cfb42f760e11b81526001600160a01b03909316926399f685ee9261232a9291600401613bf9565b6040805180830381600087803b15801561234357600080fd5b505af1158015612357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237b919061392f565b602080840191909152908252820151600090600190818111156123a0576123a0613ff0565b14156123c1576123ba8260005b6020020151859088611ed1565b90506123cf565b6123cc8260016123ad565b90505b6123dd836040015182612f94565b80156123fd578251608001516123fd906001600160a01b03163383611919565b603654604051633dae446f60e21b81523360048201526001600160a01b038981166024830152604482018990529091169063f6b911bc90606401600060405180830381600087803b15801561245157600080fd5b505af1158015612465573d6000803e3d6000fd5b5050505050505050505050565b80516020808301516040808501516060860151608087015160a088015193516000976124a2979096959101613b37565b604051602081830303815290604052805190602001209050919050565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561250d57600080fd5b505afa158015612521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612545919061357f565b156125775760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b61257f611d93565b81516040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b1580156125c457600080fd5b505afa1580156125d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fc91906138e9565b9050600083600160200201516040516370a0823160e01b81526001600160a01b038781166004830152909116906370a082319060240160206040518083038186803b15801561264a57600080fd5b505afa15801561265e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268291906138e9565b90506000848160200201516001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156126c557600080fd5b505afa1580156126d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127019190810190613610565b9050600085600160200201516001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561274557600080fd5b505afa158015612759573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127819190810190613610565b905080604001518260400151146127bf5760405162461bcd60e51b8152602060048201526002602482015261219960f11b604482015260640161026f565b6000826020015160018111156127d7576127d7613ff0565b146128095760405162461bcd60e51b8152602060048201526002602482015261433360f01b604482015260640161026f565b60018160200151600181111561282157612821613ff0565b146128535760405162461bcd60e51b8152602060048201526002602482015261433360f01b604482015260640161026f565b848410156128885760405162461bcd60e51b815260206004820152600260248201526110cd60f21b604482015260640161026f565b848310156128bd5760405162461bcd60e51b815260206004820152600260248201526110cd60f21b604482015260640161026f565b60385460408084015184519151632b9e8e7560e21b81526000936001600160a01b03169263ae7a39d4926128f692909190600401613bf9565b60a060405180830381600087803b15801561291057600080fd5b505af1158015612924573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612948919061386c565b90506000612984826020015183600001516129639190613d2e565b603454899061297d90600160501b900460ff16600a613d9d565b9190611ed1565b905060006129a48360600151846040015187600001516080015185612ff1565b90506129ca8a6129b48385613e67565b8751608001516001600160a01b03169190611919565b603654895160208b0151604051636ade6d1960e01b81526001600160a01b038e8116600483015292831660248201529082166044820152606481018b9052911690636ade6d1990608401600060405180830381600087803b158015612a2e57600080fd5b505af1158015612a42573d6000803e3d6000fd5b50505060408087015181518b815260208101919091527f4ad0c450e12ed5be7021831798961be4cf8f502051e6deaeaaa41ea08d2509cd92500160405180910390a150505050505050505050565b6000612ae5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661311f9092919063ffffffff16565b8051909150156119805780806020019051810190612b03919061357f565b6119805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161026f565b6040808501516000908152603e6020529081205460ff1615612bbe5760405162461bcd60e51b8152602060048201526002602482015261433760f01b604482015260640161026f565b8451606001516000906001600160a01b031615612c775785516060810151602090910151604051632979d02560e01b81526001600160a01b03861692632979d02592612c20926004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b158015612c3857600080fd5b505afa158015612c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7091906138e9565b9050612c7b565b5060005b6040868101516000908152603c6020522054158015612cac57506040808701516000908152603c6020522060010154155b15612d5c57855160a081015160405163dd0060fd60e01b815260009283926001600160a01b03169163dd0060fd91612ce8918790600401613c6b565b604080518083038186803b158015612cff57600080fd5b505afa158015612d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d37919061392f565b60408a810180516000908152603c602052828120949094555183529091206001015550505b604086810180516000908152603c60205282812054825182528382206001015492518a519451632b9e8e7560e21b815291946001600160a01b038a169263ae7a39d492612dad929091600401613bf9565b60a060405180830381600087803b158015612dc757600080fd5b505af1158015612ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dff919061386c565b9050612e0961322a565b612e138385613d2e565b602083015183518691612e2591613d2e565b612e2f9190613e48565b612e399190613d46565b8152612e458385613d2e565b602083015183518591612e5791613d2e565b612e619190613e48565b612e6b9190613d46565b6020820152603454600090612e8b90600160501b900460ff16600a613d9d565b905060018b602001516001811115612ea557612ea5613ff0565b1415612f105781519650612eba81888c611ed1565b8351909750600090612ece9083908d611ed1565b905080881115612f0a57606084015160408501518d5160800151612efd929190612ef8858d613e67565b612ff1565b612f079089613e67565b97505b50612f78565b60208201519650612f2281888c611ed1565b96506000612f3f84602001518c84611ed19092919063ffffffff16565b905080881115612f7657606084015160408501518d5160800151612f69929190612ef8858d613e67565b612f739089613e67565b97505b505b612f868b6040015188612f94565b505050505050949350505050565b6000828152603b6020526040902054811115612fd75760405162461bcd60e51b8152602060048201526002602482015261433960f01b604482015260640161026f565b6000828152603b6020526040902054611f0c908290613e67565b60345460009063ffffffff166130078584613e48565b6130119190613d46565b90508061302057506000613117565b60345460009060ff6801000000000000000082048116916130509169010000000000000000009091041684613e48565b61305a9190613d46565b905060006130688284613e67565b603a546001600160a01b039081166000908152603d60209081526040808320938a168352929052205490915061309f908390613d2e565b603a546001600160a01b039081166000908152603d602081815260408084208b861680865290835281852096909655938c168352908152828220938252929092529020546130ee908290613d2e565b6001600160a01b038089166000908152603d60209081526040808320938a168352929052205550505b949350505050565b6060611ee8848460008585843b6131785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026f565b600080866001600160a01b031685876040516131949190613b1b565b60006040518083038185875af1925050503d80600081146131d1576040519150601f19603f3d011682016040523d82523d6000602084013e6131d6565b606091505b50915091506131e68282866131f1565b979650505050505050565b60608315613200575081611eeb565b8251156132105782518084602001fd5b8160405162461bcd60e51b815260040161026f9190613c12565b60405180604001604052806002906020820280368337509192915050565b803561325381614032565b919050565b805161325381614032565b8060408101831015611ecb57600080fd5b60008083601f84011261328657600080fd5b50813567ffffffffffffffff81111561329e57600080fd5b6020830191508360208260051b85010111156132b957600080fd5b9250929050565b8051801515811461325357600080fd5b80516002811061325357600080fd5b805163ffffffff8116811461325357600080fd5b805160ff8116811461325357600080fd5b60006020828403121561331657600080fd5b8135611eeb81614032565b60006020828403121561333357600080fd5b8151611eeb81614032565b6000806040838503121561335157600080fd5b823561335c81614032565b9150602083013561336c81614032565b809150509250929050565b60008060006060848603121561338c57600080fd5b833561339781614032565b925060208401356133a781614032565b929592945050506040919091013590565b6000806000806000606086880312156133d057600080fd5b85356133db81614032565b9450602086013567ffffffffffffffff808211156133f857600080fd5b61340489838a01613274565b9096509450604088013591508082111561341d57600080fd5b5061342a88828901613274565b969995985093965092949392505050565b6000806040838503121561344e57600080fd5b823561345981614032565b946020939093013593505050565b6000806060838503121561347a57600080fd5b6134848484613263565b946040939093013593505050565b600080600080604085870312156134a857600080fd5b843567ffffffffffffffff808211156134c057600080fd5b6134cc88838901613274565b909650945060208701359150808211156134e557600080fd5b506134f287828801613274565b95989497509550505050565b6000806000806040858703121561351457600080fd5b843567ffffffffffffffff8082111561352c57600080fd5b818701915087601f83011261354057600080fd5b81358181111561354f57600080fd5b8860208260061b850101111561356457600080fd5b6020928301965094509086013590808211156134e557600080fd5b60006020828403121561359157600080fd5b611ec8826132c0565b6000602082840312156135ac57600080fd5b5035919050565b6000806000608084860312156135c857600080fd5b833567ffffffffffffffff8111156135df57600080fd5b840160c081870312156135f157600080fd5b9250602084013591506136078560408601613263565b90509250925092565b6000602080838503121561362357600080fd5b825167ffffffffffffffff8082111561363b57600080fd5b908401906060828703121561364f57600080fd5b613657613c8d565b82518281111561366657600080fd5b830160c0818903121561367857600080fd5b613680613cb6565b81518152858201518682015260408201518481111561369e57600080fd5b82019350601f840189136136b157600080fd5b83516136c46136bf82613d0a565b613cd9565b8082825288820191508887018c8a8560051b8a010111156136e457600080fd5b600097505b838810156137075780518352600197909701969189019189016136e9565b5060408401525061371c905060608301613258565b606082015261372d60808301613258565b608082015261373e60a08301613258565b60a08201528252506137518385016132d0565b9381019390935250604090810151908201529392505050565b600060c0828403121561377c57600080fd5b613784613cb6565b825161378f81614032565b8152602083015161379f81614032565b602082015260408301516137b281614032565b604082015260608301516137c581614032565b606082015260808301516137d881614032565b608082015260a08301516137eb81614032565b60a08201529392505050565b600060c0828403121561380957600080fd5b613811613cb6565b61381a836132df565b8152613828602084016132df565b6020820152613839604084016132f3565b604082015261384a606084016132f3565b606082015261385b608084016132f3565b60808201526137eb60a084016132c0565b600060a0828403121561387e57600080fd5b60405160a0810181811067ffffffffffffffff821117156138a1576138a161401c565b806040525082518152602083015160208201526040830151604082015260608301516138cc81614032565b60608201526138dd608084016132c0565b60808201529392505050565b6000602082840312156138fb57600080fd5b5051919050565b6000806060838503121561391557600080fd5b823591506139268460208501613263565b90509250929050565b6000806040838503121561394257600080fd5b505080516020909101519092909150565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561398557600080fd5b8260051b8083602087013760009401602001938452509192915050565b803582526020810135602083015260006040820135601e198336030181126139c957600080fd5b8201803567ffffffffffffffff8111156139e257600080fd5b8060051b36038413156139f457600080fd5b60c06040860152613a0c60c086018260208501613953565b915050613a1b60608401613248565b6001600160a01b03166060850152613a3560808401613248565b6001600160a01b03166080850152613a4f60a08401613248565b6001600160a01b03811660a0860152509392505050565b600060c083018251845260208084015181860152604084015160c0604087015282815180855260e0880191508383019450600092505b80831015613abc5784518252938301936001929092019190830190613a9c565b5060608601519350613ad960608801856001600160a01b03169052565b60808601519350613af560808801856001600160a01b03169052565b60a08601519350613b1160a08801856001600160a01b03169052565b9695505050505050565b60008251613b2d818460208701613f65565b9190910192915050565b86815260006020878184015260408301875182890160005b82811015613b6b57815184529284019290840190600101613b4f565b5050506bffffffffffffffffffffffff19606097881b8116825295871b861660148201529390951b909316602883015250603c0195945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526131e660a08301846139a2565b828152604060208201526000611ee860408301846139a2565b828152604060208201526000611ee86040830184613a66565b6020815260008251806020840152613c31816040850160208701613f65565b601f01601f19169190910160400192915050565b602081526000611ec860208301846139a2565b602081526000611ec86020830184613a66565b604081526000613c7e6040830185613a66565b90508260208301529392505050565b6040516060810167ffffffffffffffff81118282101715613cb057613cb061401c565b60405290565b60405160c0810167ffffffffffffffff81118282101715613cb057613cb061401c565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d0257613d0261401c565b604052919050565b600067ffffffffffffffff821115613d2457613d2461401c565b5060051b60200190565b60008219821115613d4157613d41613fc4565b500190565b600082613d5557613d55613fda565b500490565b600181815b80851115613d95578160001904821115613d7b57613d7b613fc4565b80851615613d8857918102915b93841c9390800290613d5f565b509250929050565b6000611ec860ff841683600082613db657506001611ecb565b81613dc357506000611ecb565b8160018114613dd95760028114613de357613dff565b6001915050611ecb565b60ff841115613df457613df4613fc4565b50506001821b611ecb565b5060208310610133831016604e8410600b8410161715613e22575081810a611ecb565b613e2c8383613d5a565b8060001904821115613e4057613e40613fc4565b029392505050565b6000816000190483118215151615613e6257613e62613fc4565b500290565b600082821015613e7957613e79613fc4565b500390565b600060c08236031215613e9057600080fd5b613e98613cb6565b8235815260208084013581830152604084013567ffffffffffffffff811115613ec057600080fd5b840136601f820112613ed157600080fd5b8035613edf6136bf82613d0a565b8181528381019083850136600585901b860187011115613efe57600080fd5b600094505b83851015613f21578035835260019490940193918501918501613f03565b50604086015250613f389250505060608401613248565b6060820152613f4960808401613248565b6080820152613f5a60a08401613248565b60a082015292915050565b60005b83811015613f80578181015183820152602001613f68565b83811115613f8f576000848401525b50505050565b6000600019821415613fa957613fa9613fc4565b5060010190565b600082613fbf57613fbf613fda565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461404757600080fd5b5056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00a264697066735822122050218f82057c52f7a00ac087139a9e63ae112c76aaa46e4a25bd2cb97900ce4e64736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806398590ef91161008c578063df849d9c11610066578063df849d9c146101d9578063e4a86da3146101ec578063eafaddfd146101ff578063f1015a161461021257600080fd5b806398590ef9146101a0578063c4d66de8146101b3578063d7acb448146101c657600080fd5b8063553500b4116100c8578063553500b41461012a5780635d8228131461013d5780636a990b6e1461015057806372d335821461018d57600080fd5b80631ac3ddeb146100ef5780633b89bb86146101045780634be279b014610117575b600080fd5b6101026100fd366004613304565b610232565b005b61010261011236600461343b565b610369565b610102610125366004613902565b6103ba565b610102610138366004613492565b610c95565b61010261014b3660046133b8565b610d80565b61017b61015e36600461333e565b603d60209081526000928352604080842090915290825290205481565b60405190815260200160405180910390f35b61010261019b366004613492565b610e39565b6101026101ae36600461343b565b610f18565b6101026101c1366004613304565b610f68565b6101026101d43660046135b3565b611192565b6101026101e7366004613467565b61174f565b6101026101fa3660046134fe565b6117c4565b61010261020d366004613377565b6118bf565b61017b61022036600461359a565b603b6020526000908152604090205481565b600260015414156102785760405162461bcd60e51b815260206004820152601f602482015260008051602061404b83398151915260448201526064015b60405180910390fd5b6002600155603354604080516358c3de9360e11b815290516001600160a01b039092169163b187bd2691600480820192602092909190829003018186803b1580156102c257600080fd5b505afa1580156102d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fa919061357f565b1561032c5760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b336000818152603d602090815260408083206001600160a01b0386168085529252822080549290559091610361919083611919565b505060018055565b600260015414156103aa5760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155610361338383611985565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561040857600080fd5b505afa15801561041c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610440919061357f565b156104725760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b61047f6020820182613304565b60365460408051632a70b8db60e21b815290516001600160a01b039283169284169163a9c2e36c916004808301926020929190829003018186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190613321565b6001600160a01b0316146105395760405162461bcd60e51b8152602060048201526002602482015261553360f01b604482015260640161026f565b6105496040830160208401613304565b60365460408051632a70b8db60e21b815290516001600160a01b039283169284169163a9c2e36c916004808301926020929190829003018186803b15801561059057600080fd5b505afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c89190613321565b6001600160a01b0316146106035760405162461bcd60e51b8152602060048201526002602482015261553360f01b604482015260640161026f565b600260015414156106445760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155610651611d93565b60345460009061066c90600160501b900460ff16600a613d9d565b9050600061067d6020860186613304565b6001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f19190810190613610565b905060006107056040870160208801613304565b6001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561073d57600080fd5b505afa158015610751573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107799190810190613610565b8251519091506107959061078e908990613e48565b8490611ebc565b156107c75760405162461bcd60e51b8152602060048201526002602482015261433560f01b604482015260640161026f565b80604001518260400151146108035760405162461bcd60e51b8152602060048201526002602482015261219960f11b604482015260640161026f565b60008260200151600181111561081b5761081b613ff0565b1461084d5760405162461bcd60e51b8152602060048201526002602482015261433360f01b604482015260640161026f565b60018160200151600181111561086557610865613ff0565b146108975760405162461bcd60e51b8152602060048201526002602482015261433360f01b604482015260640161026f565b6040808301516000908152603e602052205460ff16156108de5760405162461bcd60e51b8152602060048201526002602482015261433760f01b604482015260640161026f565b815160a0810151604051633a6f60a960e01b81526001600160a01b0390911691633a6f60a9916109119190600401613c58565b60206040518083038186803b15801561092957600080fd5b505afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610961919061357f565b6109925760405162461bcd60e51b8152602060048201526002602482015261086760f31b604482015260640161026f565b61099a61322a565b60385460408085015185519151634cfb42f760e11b81526001600160a01b03909316926399f685ee926109d09291600401613bf9565b6040805180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a21919061392f565b60208301819052818352600091610a4391610a3b91613d2e565b86908b611ed1565b845160800151603954604051636eb1769f60e11b81523360048201526001600160a01b039182166024820152929350839291169063dd62ed3e9060440160206040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad091906138e9565b1015610b045760405162461bcd60e51b815260206004820152600360248201526221989960e91b604482015260640161026f565b60395484516080015160405163052f523360e11b81526001600160a01b03918216600482015233602482015230604482015260648101849052911690630a5ea46690608401600060405180830381600087803b158015610b6357600080fd5b505af1158015610b77573d6000803e3d6000fd5b50505050610b89846040015182611ef2565b6036546001600160a01b03166347704dbd3380610ba960208d018d613304565b610bb960408e0160208f01613304565b60405160e086901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039485166004820152928416602484015290831660448301529091166064820152608481018c905260a401600060405180830381600087803b158015610c3157600080fd5b505af1158015610c45573d6000803e3d6000fd5b5050506040808601518151908152602081018c90527fa658fd9bfc93101fc807c36183097b99f0be42f07ec2923a7d4a7f1e6879d9e092500160405180910390a150506001805550505050505050565b60026001541415610cd65760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155828114610d0f5760405162461bcd60e51b8152602060048201526002602482015261433160f01b604482015260640161026f565b60005b83811015610d7557610d6333868684818110610d3057610d30614006565b9050602002016020810190610d459190613304565b858585818110610d5757610d57614006565b90506020020135611985565b80610d6d81613f95565b915050610d12565b505060018055505050565b60026001541415610dc15760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155828114610dfa5760405162461bcd60e51b8152602060048201526002602482015261433160f01b604482015260640161026f565b60005b83811015610e2d57610e1b86868684818110610d3057610d30614006565b80610e2581613f95565b915050610dfd565b50506001805550505050565b60026001541415610e7a5760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155828114610eb35760405162461bcd60e51b8152602060048201526002602482015261433160f01b604482015260640161026f565b60005b83811015610d7557610f06858583818110610ed357610ed3614006565b9050602002016020810190610ee89190613304565b848484818110610efa57610efa614006565b90506020020135611f22565b80610f1081613f95565b915050610eb6565b60026001541415610f595760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b60026001556103618282611f22565b600054610100900460ff1680610f81575060005460ff16155b610ff35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161026f565b600054610100900460ff16158015611015576000805461ffff19166101011790555b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915560408051630f0bfe7960e21b81529051633c2ff9e49160048082019260c092909190829003018186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae91906137f7565b805160348054602084015160408501516060860151608087015160a09097015115156b010000000000000000000000026bff00000000000000000000001960ff988916600160501b02166bffff000000000000000000001992891669010000000000000000000269ff000000000000000000199990941668010000000000000000029890981669ffff00000000000000001963ffffffff9586166401000000000267ffffffffffffffff199097169590981694909417949094179590951691909117179290921692909217179055801561118e576000805461ff00191690555b5050565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e057600080fd5b505afa1580156111f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611218919061357f565b1561124a5760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b6002600154141561128b5760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155611298611d93565b6034546000906112b390600160501b900460ff16600a613d9d565b90506112ca6112c3848635613e48565b8290611ebc565b156112fc5760405162461bcd60e51b8152602060048201526002602482015261433560f01b604482015260640161026f565b600061130f61130a86613e7e565b612472565b6000818152603e602052604090205490915060ff16156113565760405162461bcd60e51b8152602060048201526002602482015261433760f01b604482015260640161026f565b61136660c0860160a08701613304565b6001600160a01b0316633a6f60a9866040518263ffffffff1660e01b81526004016113919190613c45565b60206040518083038186803b1580156113a957600080fd5b505afa1580156113bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e1919061357f565b6114125760405162461bcd60e51b8152602060048201526002602482015261086760f31b604482015260640161026f565b61141a61322a565b603854604051634cfb42f760e11b81526001600160a01b03909116906399f685ee9061144c9085908a90600401613be0565b6040805180830381600087803b15801561146557600080fd5b505af1158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d919061392f565b602083018190528183526000916114bf916114b791613d2e565b859088611ed1565b9050806114d260a0890160808a01613304565b603954604051636eb1769f60e11b81523360048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b15801561151c57600080fd5b505afa158015611530573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155491906138e9565b10156115885760405162461bcd60e51b815260206004820152600360248201526221989960e91b604482015260640161026f565b6039546001600160a01b0316630a5ea4666115a960a08a0160808b01613304565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015233602482015230604482015260648101849052608401600060405180830381600087803b15801561161557600080fd5b505af1158015611629573d6000803e3d6000fd5b505050506116378382611ef2565b6036546001600160a01b0316639873dba96116556020880188613304565b6116656040890160208a01613304565b89878c6040518663ffffffff1660e01b8152600401611688959493929190613ba8565b600060405180830381600087803b1580156116a257600080fd5b505af11580156116b6573d6000803e3d6000fd5b505050507fed55db682403ff79a20059d95317cb2e4f4d322b5b4d062ca27c10de39bdcae4856000600281106116ee576116ee614006565b6020020160208101906117019190613304565b6117116040880160208901613304565b604080516001600160a01b03938416815292909116602083015281018590526060810188905260800160405180910390a15050600180555050505050565b600260015414156117905760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600181905560408051808201825261036192339286919083908390808284376000920191909152508591506124bf9050565b600260015414156118055760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b600260015582811461183e5760405162461bcd60e51b8152602060048201526002602482015261433160f01b604482015260640161026f565b60005b83811015610d75576118ad3386868481811061185f5761185f614006565b9050604002016002806020026040519081016040528092919082600260200280828437600092019190915250879150869050858181106118a1576118a1614006565b905060200201356124bf565b806118b781613f95565b915050611841565b600260015414156119005760405162461bcd60e51b815260206004820152601f602482015260008051602061404b833981519152604482015260640161026f565b6002600155611910838383611985565b50506001805550565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611980908490612a90565b505050565b81603560010160009054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663a9c2e36c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e157600080fd5b505afa1580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190613321565b6001600160a01b031614611a545760405162461bcd60e51b8152602060048201526002602482015261553360f01b604482015260640161026f565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa257600080fd5b505afa158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada919061357f565b15611b0c5760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b611b14611d93565b6000836001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611b4f57600080fd5b505afa158015611b63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b8b9190810190613610565b8051602001519091504211611bc85760405162461bcd60e51b815260206004820152600360248201526204331360ec1b604482015260640161026f565b6001600160a01b038516331480611c5a5750805160a00151604051631e44861d60e31b81526001600160a01b0387811660048301529091169063f22430e89060240160206040518083038186803b158015611c2257600080fd5b505afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a919061357f565b611c8c5760405162461bcd60e51b815260206004820152600360248201526243313160e81b604482015260640161026f565b603854603754600091611caf91849187916001600160a01b039182169116612b75565b90508015611cd157815160800151611cd1906001600160a01b03168783611919565b603654604051633dae446f60e21b81526001600160a01b0388811660048301528781166024830152604482018790529091169063f6b911bc90606401600060405180830381600087803b158015611d2757600080fd5b505af1158015611d3b573d6000803e3d6000fd5b5050604080516001600160a01b03808b168252891660208201529081018790527fe7f87f0b9d521ac925b66f1e1599d5389bf92e298a6cbf0750f68d5beffed1a69250606001905060405180910390a1505050505050565b6038546001600160a01b0316611eba57603360009054906101000a90046001600160a01b03166001600160a01b031663a1774da06040518163ffffffff1660e01b815260040160c06040518083038186803b158015611df157600080fd5b505afa158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e29919061376a565b80516035805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0393841617909155602083015160368054831691841691909117905560408301516037805483169184169190911790556060830151603880548316918416919091179055608083015160398054831691841691909117905560a090920151603a805490931691161790555b565b6000611ec88383613fb0565b90505b92915050565b600083611ede8385613e48565b611ee89190613d46565b90505b9392505050565b6000828152603b6020526040902054611f0c908290613d2e565b6000928352603b60205260409092209190915550565b81603560010160009054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663a9c2e36c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7e57600080fd5b505afa158015611f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb69190613321565b6001600160a01b031614611ff15760405162461bcd60e51b8152602060048201526002602482015261553360f01b604482015260640161026f565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561203f57600080fd5b505afa158015612053573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612077919061357f565b156120a95760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b6120b1611d93565b6034546000906120cc90600160501b900460ff16600a613d9d565b90506000846001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561210957600080fd5b505afa15801561211d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121459190810190613610565b8051606001519091506001600160a01b03166121885760405162461bcd60e51b8152602060048201526002602482015261219b60f11b604482015260640161026f565b60345481516020015142916121ac9164010000000090910463ffffffff1690613d2e565b1115801561224857506037548151606081015160209091015160405163c8384d2f60e01b81526001600160a01b039283166004820152602481019190915291169063c8384d2f9060440160206040518083038186803b15801561220e57600080fd5b505afa158015612222573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612246919061357f565b155b61227a5760405162461bcd60e51b815260206004820152600360248201526243313360e81b604482015260640161026f565b6040808201516000908152603e602052205460ff166122ec57604080820180516000908152603e602052829020805460ff191660011790555190517e51663824be907dd6b3ee1361ee010c8f6dbbcba644dd14ca8eacd89e17e4f1916122e39190815260200190565b60405180910390a15b6122f461322a565b60385460408084015184519151634cfb42f760e11b81526001600160a01b03909316926399f685ee9261232a9291600401613bf9565b6040805180830381600087803b15801561234357600080fd5b505af1158015612357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237b919061392f565b602080840191909152908252820151600090600190818111156123a0576123a0613ff0565b14156123c1576123ba8260005b6020020151859088611ed1565b90506123cf565b6123cc8260016123ad565b90505b6123dd836040015182612f94565b80156123fd578251608001516123fd906001600160a01b03163383611919565b603654604051633dae446f60e21b81523360048201526001600160a01b038981166024830152604482018990529091169063f6b911bc90606401600060405180830381600087803b15801561245157600080fd5b505af1158015612465573d6000803e3d6000fd5b5050505050505050505050565b80516020808301516040808501516060860151608087015160a088015193516000976124a2979096959101613b37565b604051602081830303815290604052805190602001209050919050565b603360009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561250d57600080fd5b505afa158015612521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612545919061357f565b156125775760405162461bcd60e51b8152602060048201526002602482015261154d60f21b604482015260640161026f565b61257f611d93565b81516040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b1580156125c457600080fd5b505afa1580156125d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fc91906138e9565b9050600083600160200201516040516370a0823160e01b81526001600160a01b038781166004830152909116906370a082319060240160206040518083038186803b15801561264a57600080fd5b505afa15801561265e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268291906138e9565b90506000848160200201516001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156126c557600080fd5b505afa1580156126d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127019190810190613610565b9050600085600160200201516001600160a01b031663ce21286d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561274557600080fd5b505afa158015612759573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127819190810190613610565b905080604001518260400151146127bf5760405162461bcd60e51b8152602060048201526002602482015261219960f11b604482015260640161026f565b6000826020015160018111156127d7576127d7613ff0565b146128095760405162461bcd60e51b8152602060048201526002602482015261433360f01b604482015260640161026f565b60018160200151600181111561282157612821613ff0565b146128535760405162461bcd60e51b8152602060048201526002602482015261433360f01b604482015260640161026f565b848410156128885760405162461bcd60e51b815260206004820152600260248201526110cd60f21b604482015260640161026f565b848310156128bd5760405162461bcd60e51b815260206004820152600260248201526110cd60f21b604482015260640161026f565b60385460408084015184519151632b9e8e7560e21b81526000936001600160a01b03169263ae7a39d4926128f692909190600401613bf9565b60a060405180830381600087803b15801561291057600080fd5b505af1158015612924573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612948919061386c565b90506000612984826020015183600001516129639190613d2e565b603454899061297d90600160501b900460ff16600a613d9d565b9190611ed1565b905060006129a48360600151846040015187600001516080015185612ff1565b90506129ca8a6129b48385613e67565b8751608001516001600160a01b03169190611919565b603654895160208b0151604051636ade6d1960e01b81526001600160a01b038e8116600483015292831660248201529082166044820152606481018b9052911690636ade6d1990608401600060405180830381600087803b158015612a2e57600080fd5b505af1158015612a42573d6000803e3d6000fd5b50505060408087015181518b815260208101919091527f4ad0c450e12ed5be7021831798961be4cf8f502051e6deaeaaa41ea08d2509cd92500160405180910390a150505050505050505050565b6000612ae5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661311f9092919063ffffffff16565b8051909150156119805780806020019051810190612b03919061357f565b6119805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161026f565b6040808501516000908152603e6020529081205460ff1615612bbe5760405162461bcd60e51b8152602060048201526002602482015261433760f01b604482015260640161026f565b8451606001516000906001600160a01b031615612c775785516060810151602090910151604051632979d02560e01b81526001600160a01b03861692632979d02592612c20926004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b158015612c3857600080fd5b505afa158015612c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7091906138e9565b9050612c7b565b5060005b6040868101516000908152603c6020522054158015612cac57506040808701516000908152603c6020522060010154155b15612d5c57855160a081015160405163dd0060fd60e01b815260009283926001600160a01b03169163dd0060fd91612ce8918790600401613c6b565b604080518083038186803b158015612cff57600080fd5b505afa158015612d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d37919061392f565b60408a810180516000908152603c602052828120949094555183529091206001015550505b604086810180516000908152603c60205282812054825182528382206001015492518a519451632b9e8e7560e21b815291946001600160a01b038a169263ae7a39d492612dad929091600401613bf9565b60a060405180830381600087803b158015612dc757600080fd5b505af1158015612ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dff919061386c565b9050612e0961322a565b612e138385613d2e565b602083015183518691612e2591613d2e565b612e2f9190613e48565b612e399190613d46565b8152612e458385613d2e565b602083015183518591612e5791613d2e565b612e619190613e48565b612e6b9190613d46565b6020820152603454600090612e8b90600160501b900460ff16600a613d9d565b905060018b602001516001811115612ea557612ea5613ff0565b1415612f105781519650612eba81888c611ed1565b8351909750600090612ece9083908d611ed1565b905080881115612f0a57606084015160408501518d5160800151612efd929190612ef8858d613e67565b612ff1565b612f079089613e67565b97505b50612f78565b60208201519650612f2281888c611ed1565b96506000612f3f84602001518c84611ed19092919063ffffffff16565b905080881115612f7657606084015160408501518d5160800151612f69929190612ef8858d613e67565b612f739089613e67565b97505b505b612f868b6040015188612f94565b505050505050949350505050565b6000828152603b6020526040902054811115612fd75760405162461bcd60e51b8152602060048201526002602482015261433960f01b604482015260640161026f565b6000828152603b6020526040902054611f0c908290613e67565b60345460009063ffffffff166130078584613e48565b6130119190613d46565b90508061302057506000613117565b60345460009060ff6801000000000000000082048116916130509169010000000000000000009091041684613e48565b61305a9190613d46565b905060006130688284613e67565b603a546001600160a01b039081166000908152603d60209081526040808320938a168352929052205490915061309f908390613d2e565b603a546001600160a01b039081166000908152603d602081815260408084208b861680865290835281852096909655938c168352908152828220938252929092529020546130ee908290613d2e565b6001600160a01b038089166000908152603d60209081526040808320938a168352929052205550505b949350505050565b6060611ee8848460008585843b6131785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026f565b600080866001600160a01b031685876040516131949190613b1b565b60006040518083038185875af1925050503d80600081146131d1576040519150601f19603f3d011682016040523d82523d6000602084013e6131d6565b606091505b50915091506131e68282866131f1565b979650505050505050565b60608315613200575081611eeb565b8251156132105782518084602001fd5b8160405162461bcd60e51b815260040161026f9190613c12565b60405180604001604052806002906020820280368337509192915050565b803561325381614032565b919050565b805161325381614032565b8060408101831015611ecb57600080fd5b60008083601f84011261328657600080fd5b50813567ffffffffffffffff81111561329e57600080fd5b6020830191508360208260051b85010111156132b957600080fd5b9250929050565b8051801515811461325357600080fd5b80516002811061325357600080fd5b805163ffffffff8116811461325357600080fd5b805160ff8116811461325357600080fd5b60006020828403121561331657600080fd5b8135611eeb81614032565b60006020828403121561333357600080fd5b8151611eeb81614032565b6000806040838503121561335157600080fd5b823561335c81614032565b9150602083013561336c81614032565b809150509250929050565b60008060006060848603121561338c57600080fd5b833561339781614032565b925060208401356133a781614032565b929592945050506040919091013590565b6000806000806000606086880312156133d057600080fd5b85356133db81614032565b9450602086013567ffffffffffffffff808211156133f857600080fd5b61340489838a01613274565b9096509450604088013591508082111561341d57600080fd5b5061342a88828901613274565b969995985093965092949392505050565b6000806040838503121561344e57600080fd5b823561345981614032565b946020939093013593505050565b6000806060838503121561347a57600080fd5b6134848484613263565b946040939093013593505050565b600080600080604085870312156134a857600080fd5b843567ffffffffffffffff808211156134c057600080fd5b6134cc88838901613274565b909650945060208701359150808211156134e557600080fd5b506134f287828801613274565b95989497509550505050565b6000806000806040858703121561351457600080fd5b843567ffffffffffffffff8082111561352c57600080fd5b818701915087601f83011261354057600080fd5b81358181111561354f57600080fd5b8860208260061b850101111561356457600080fd5b6020928301965094509086013590808211156134e557600080fd5b60006020828403121561359157600080fd5b611ec8826132c0565b6000602082840312156135ac57600080fd5b5035919050565b6000806000608084860312156135c857600080fd5b833567ffffffffffffffff8111156135df57600080fd5b840160c081870312156135f157600080fd5b9250602084013591506136078560408601613263565b90509250925092565b6000602080838503121561362357600080fd5b825167ffffffffffffffff8082111561363b57600080fd5b908401906060828703121561364f57600080fd5b613657613c8d565b82518281111561366657600080fd5b830160c0818903121561367857600080fd5b613680613cb6565b81518152858201518682015260408201518481111561369e57600080fd5b82019350601f840189136136b157600080fd5b83516136c46136bf82613d0a565b613cd9565b8082825288820191508887018c8a8560051b8a010111156136e457600080fd5b600097505b838810156137075780518352600197909701969189019189016136e9565b5060408401525061371c905060608301613258565b606082015261372d60808301613258565b608082015261373e60a08301613258565b60a08201528252506137518385016132d0565b9381019390935250604090810151908201529392505050565b600060c0828403121561377c57600080fd5b613784613cb6565b825161378f81614032565b8152602083015161379f81614032565b602082015260408301516137b281614032565b604082015260608301516137c581614032565b606082015260808301516137d881614032565b608082015260a08301516137eb81614032565b60a08201529392505050565b600060c0828403121561380957600080fd5b613811613cb6565b61381a836132df565b8152613828602084016132df565b6020820152613839604084016132f3565b604082015261384a606084016132f3565b606082015261385b608084016132f3565b60808201526137eb60a084016132c0565b600060a0828403121561387e57600080fd5b60405160a0810181811067ffffffffffffffff821117156138a1576138a161401c565b806040525082518152602083015160208201526040830151604082015260608301516138cc81614032565b60608201526138dd608084016132c0565b60808201529392505050565b6000602082840312156138fb57600080fd5b5051919050565b6000806060838503121561391557600080fd5b823591506139268460208501613263565b90509250929050565b6000806040838503121561394257600080fd5b505080516020909101519092909150565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561398557600080fd5b8260051b8083602087013760009401602001938452509192915050565b803582526020810135602083015260006040820135601e198336030181126139c957600080fd5b8201803567ffffffffffffffff8111156139e257600080fd5b8060051b36038413156139f457600080fd5b60c06040860152613a0c60c086018260208501613953565b915050613a1b60608401613248565b6001600160a01b03166060850152613a3560808401613248565b6001600160a01b03166080850152613a4f60a08401613248565b6001600160a01b03811660a0860152509392505050565b600060c083018251845260208084015181860152604084015160c0604087015282815180855260e0880191508383019450600092505b80831015613abc5784518252938301936001929092019190830190613a9c565b5060608601519350613ad960608801856001600160a01b03169052565b60808601519350613af560808801856001600160a01b03169052565b60a08601519350613b1160a08801856001600160a01b03169052565b9695505050505050565b60008251613b2d818460208701613f65565b9190910192915050565b86815260006020878184015260408301875182890160005b82811015613b6b57815184529284019290840190600101613b4f565b5050506bffffffffffffffffffffffff19606097881b8116825295871b861660148201529390951b909316602883015250603c0195945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526131e660a08301846139a2565b828152604060208201526000611ee860408301846139a2565b828152604060208201526000611ee86040830184613a66565b6020815260008251806020840152613c31816040850160208701613f65565b601f01601f19169190910160400192915050565b602081526000611ec860208301846139a2565b602081526000611ec86020830184613a66565b604081526000613c7e6040830185613a66565b90508260208301529392505050565b6040516060810167ffffffffffffffff81118282101715613cb057613cb061401c565b60405290565b60405160c0810167ffffffffffffffff81118282101715613cb057613cb061401c565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d0257613d0261401c565b604052919050565b600067ffffffffffffffff821115613d2457613d2461401c565b5060051b60200190565b60008219821115613d4157613d41613fc4565b500190565b600082613d5557613d55613fda565b500490565b600181815b80851115613d95578160001904821115613d7b57613d7b613fc4565b80851615613d8857918102915b93841c9390800290613d5f565b509250929050565b6000611ec860ff841683600082613db657506001611ecb565b81613dc357506000611ecb565b8160018114613dd95760028114613de357613dff565b6001915050611ecb565b60ff841115613df457613df4613fc4565b50506001821b611ecb565b5060208310610133831016604e8410600b8410161715613e22575081810a611ecb565b613e2c8383613d5a565b8060001904821115613e4057613e40613fc4565b029392505050565b6000816000190483118215151615613e6257613e62613fc4565b500290565b600082821015613e7957613e79613fc4565b500390565b600060c08236031215613e9057600080fd5b613e98613cb6565b8235815260208084013581830152604084013567ffffffffffffffff811115613ec057600080fd5b840136601f820112613ed157600080fd5b8035613edf6136bf82613d0a565b8181528381019083850136600585901b860187011115613efe57600080fd5b600094505b83851015613f21578035835260019490940193918501918501613f03565b50604086015250613f389250505060608401613248565b6060820152613f4960808401613248565b6080820152613f5a60a08401613248565b60a082015292915050565b60005b83811015613f80578181015183820152602001613f68565b83811115613f8f576000848401525b50505050565b6000600019821415613fa957613fa9613fc4565b5060010190565b600082613fbf57613fbf613fda565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461404757600080fd5b5056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00a264697066735822122050218f82057c52f7a00ac087139a9e63ae112c76aaa46e4a25bd2cb97900ce4e64736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancel(address,uint256)": {
        "params": {
          "_amount": "uint256 Amount of positions to cancel",
          "_positionAddress": "PositionType of positions to be canceled"
        }
      },
      "cancel(address[],uint256[])": {
        "params": {
          "_amounts": "uint256[] Amount of positions to cancel for each `positionAddress`",
          "_positionsAddresses": "PositionTypes of positions to be canceled"
        }
      },
      "create((uint256,uint256,uint256[],address,address,address),uint256,address[2])": {
        "params": {
          "_addresses": "address[2] Addresses of buyer and seller [0] - buyer address [1] - seller address",
          "_amount": "uint256 Amount of positions to create",
          "_derivative": "LibDerivative.Derivative Derivative definition"
        }
      },
      "execute(address,address,uint256)": {
        "params": {
          "_amount": "uint256 Amount of positions to execute",
          "_positionAddress": "address `positionAddress` of positions that needs to be executed",
          "_positionOwner": "address Address of the owner of positions"
        }
      },
      "execute(address,address[],uint256[])": {
        "params": {
          "_amounts": "uint256[] Amount of positions to execute for each `positionAddresses`",
          "_positionsAddresses": "address[] `positionAddresses` of positions that need to be executed",
          "_positionsOwner": "address Address of the owner of positions"
        }
      },
      "execute(address,uint256)": {
        "params": {
          "_amount": "uint256 Amount of positions to execute",
          "_positionAddress": "address `positionAddress` of position that needs to be executed"
        }
      },
      "execute(address[],uint256[])": {
        "params": {
          "_amounts": "uint256[] Amount of positions to execute for each `positionAddress`",
          "_positionsAddresses": "address[] `positionAddresses` of positions that need to be executed"
        }
      },
      "mint(uint256,address[2])": {
        "params": {
          "_amount": "uint256 Amount of positions to create",
          "_positionAddresses": "address[2] Addresses of buyer and seller [0] - LONG erc20 position address [1] - SHORT erc20 position address"
        }
      },
      "redeem(address[2],uint256)": {
        "params": {
          "_amount": "uint256 Amount of tokens to redeem",
          "_positionAddresses": "address[2] `_positionAddresses` of the positions that need to be redeemed"
        }
      },
      "redeem(address[2][],uint256[])": {
        "params": {
          "_amounts": "uint256[] Amount of tokens to redeem for each position pair",
          "_positionsAddresses": "address[2][] `_positionsAddresses` of the positions that need to be redeemed"
        }
      },
      "withdrawFee(address)": {
        "params": {
          "_tokenAddress": "address Address of an ERC20 token to withdraw"
        }
      }
    },
    "title": "Opium.Core contract creates positions, holds and distributes margin at the maturity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancel(address,uint256)": {
        "notice": "Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`"
      },
      "cancel(address[],uint256[])": {
        "notice": "Cancels tickers, burns positions and returns margins to positions owners in case no data were provided within `protocolCommissionArgs.noDataCancellationPeriod`"
      },
      "create((uint256,uint256,uint256[],address,address,address),uint256,address[2])": {
        "notice": "This function deploys two ERC20 contracts representing respectively the LONG and SHORT position of the provided `LibDerivative.Derivative` derivative and mints the provided amount of SHORT positions to a seller and LONG positions to a buyer"
      },
      "execute(address,address,uint256)": {
        "notice": "Executes a single position of `_positionsOwner` with specified `positionAddress`"
      },
      "execute(address,address[],uint256[])": {
        "notice": "Executes several positions of `_positionsOwner` with different `positionAddresses`"
      },
      "execute(address,uint256)": {
        "notice": "Executes a single position of `msg.sender` with specified `positionAddress`"
      },
      "execute(address[],uint256[])": {
        "notice": "Executes several positions of `msg.sender` with different `positionAddresses`"
      },
      "initialize(address)": {
        "notice": "sets registry and protocolCommissionArgs"
      },
      "mint(uint256,address[2])": {
        "notice": "This function mints the provided amount of LONG/SHORT positions to msg.sender for a previously deployed pair of LONG/SHORT ERC20 contracts"
      },
      "redeem(address[2],uint256)": {
        "notice": "Redeems a single market neutral position pair"
      },
      "redeem(address[2][],uint256[])": {
        "notice": "Redeems several market neutral position pairs"
      },
      "withdrawFee(address)": {
        "notice": "This function allows fee recipients to withdraw their fees"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 467,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 510,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2032,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "registry",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IRegistry)4245"
      },
      {
        "astId": 2035,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "protocolCommissionArgs",
        "offset": 0,
        "slot": "52",
        "type": "t_struct(ProtocolCommissionArgs)5516_storage"
      },
      {
        "astId": 2038,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "protocolAddressesArgs",
        "offset": 0,
        "slot": "53",
        "type": "t_struct(ProtocolAddressesArgs)5533_storage"
      },
      {
        "astId": 2042,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "p2pVaults",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2048,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "derivativePayouts",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 2054,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "feesVaults",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2058,
        "contract": "contracts/Core/Core.sol:Core",
        "label": "cancelled",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOpiumProxyFactory)4149": {
        "encoding": "inplace",
        "label": "contract IOpiumProxyFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IOracleAggregator)4177": {
        "encoding": "inplace",
        "label": "contract IOracleAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(IRegistry)4245": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticAggregator)4283": {
        "encoding": "inplace",
        "label": "contract ISyntheticAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenSpender)4299": {
        "encoding": "inplace",
        "label": "contract ITokenSpender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ProtocolAddressesArgs)5533_storage": {
        "encoding": "inplace",
        "label": "struct RegistryEntities.ProtocolAddressesArgs",
        "members": [
          {
            "astId": 5518,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "core",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5521,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "opiumProxyFactory",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IOpiumProxyFactory)4149"
          },
          {
            "astId": 5524,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "oracleAggregator",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IOracleAggregator)4177"
          },
          {
            "astId": 5527,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "syntheticAggregator",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(ISyntheticAggregator)4283"
          },
          {
            "astId": 5530,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "tokenSpender",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(ITokenSpender)4299"
          },
          {
            "astId": 5532,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "protocolFeeReceiver",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ProtocolCommissionArgs)5516_storage": {
        "encoding": "inplace",
        "label": "struct RegistryEntities.ProtocolCommissionArgs",
        "members": [
          {
            "astId": 5505,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "derivativeAuthorCommissionBase",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5507,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "noDataCancellationPeriod",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5509,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "protocolFeeCommissionBase",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5511,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "protocolCommissionPart",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5513,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "precisionFactor",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5515,
            "contract": "contracts/Core/Core.sol:Core",
            "label": "paused",
            "offset": 11,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
