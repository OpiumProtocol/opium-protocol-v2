{
  "address": "0xb5b98aef94fDF5ff59afca628b06DB532E078630",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_author",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_part",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "LogMetadataSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_PPT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "allowThirdpartyExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorCommission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_result",
          "type": "uint256"
        }
      ],
      "name": "getExecutionPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyerPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellerPayout",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        }
      ],
      "name": "getMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyerMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellerMargin",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSyntheticIdName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "derivativeOwner",
          "type": "address"
        }
      ],
      "name": "thirdpartyExecutionAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        }
      ],
      "name": "validateInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xafe791d8b73b58a03f46e82aa0f1fe9902e2447d30256dbe69fe2b8d1e2fcbd0",
  "receipt": {
    "to": null,
    "from": "0xc188c5Aafaaf847d9D887f80590267F6dc1a1b2f",
    "contractAddress": "0xb5b98aef94fDF5ff59afca628b06DB532E078630",
    "transactionIndex": 0,
    "gasUsed": "600228",
    "logsBloom": "0x
    "blockHash": "0x9ab9e1644c604b235c6364d9f7b84853f820257a9bf9dab24b21850510d266b0",
    "transactionHash": "0xafe791d8b73b58a03f46e82aa0f1fe9902e2447d30256dbe69fe2b8d1e2fcbd0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0xafe791d8b73b58a03f46e82aa0f1fe9902e2447d30256dbe69fe2b8d1e2fcbd0",
        "address": "0xb5b98aef94fDF5ff59afca628b06DB532E078630",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c188c5aafaaf847d9d887f80590267f6dc1a1b2f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9ab9e1644c604b235c6364d9f7b84853f820257a9bf9dab24b21850510d266b0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0xafe791d8b73b58a03f46e82aa0f1fe9902e2447d30256dbe69fe2b8d1e2fcbd0",
        "address": "0xb5b98aef94fDF5ff59afca628b06DB532E078630",
        "topics": ["0x0b11cbc9c1f60ccfdad79229add00f3dfa05137343e96ef525274af03c5d19d0"],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000617b22617574686f72223a224f7069756d2e5465616d222c2274797065223a226f7074696f6e222c2273756274797065223a22707574222c226465736372697074696f6e223a224f7074696f6e20507574206c6f67696320636f6e7472616374227d00000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x9ab9e1644c604b235c6364d9f7b84853f820257a9bf9dab24b21850510d266b0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0xafe791d8b73b58a03f46e82aa0f1fe9902e2447d30256dbe69fe2b8d1e2fcbd0",
        "address": "0xb5b98aef94fDF5ff59afca628b06DB532E078630",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000c188c5aafaaf847d9d887f80590267f6dc1a1b2f",
          "0x000000000000000000000000c188c5aafaaf847d9d887f80590267f6dc1a1b2f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x9ab9e1644c604b235c6364d9f7b84853f820257a9bf9dab24b21850510d266b0"
      }
    ],
    "blockNumber": 20,
    "cumulativeGasUsed": "600228",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xc188c5Aafaaf847d9D887f80590267F6dc1a1b2f", "1000000000000000000"],
  "solcInputHash": "58dbb558cb816b5402f8301bbf18d319",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_part\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"LogMetadataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PPT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowThirdpartyExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"getExecutionPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"}],\"name\":\"getMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerMargin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSyntheticIdName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"derivativeOwner\",\"type\":\"address\"}],\"name\":\"thirdpartyExecutionAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"}],\"name\":\"validateInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAuthorAddress()\":{\"returns\":{\"_0\":\"address syntheticId author address\"}},\"getAuthorCommission()\":{\"returns\":{\"_0\":\"uint26 syntheticId author commission\"}},\"getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)\":{\"params\":{\"_derivative\":\"Derivative Instance of derivative\",\"_result\":\"uint256 Data retrieved from oracleId on the maturity\"},\"returns\":{\"buyerPayout\":\"uint256 Payout in ratio for buyer (LONG position holder)\",\"sellerPayout\":\"uint256 Payout in ratio for seller (SHORT position holder)\"}},\"getMargin((uint256,uint256,uint256[],address,address,address))\":{\"params\":{\"_derivative\":\"Derivative Instance of derivative\"},\"returns\":{\"buyerMargin\":\"uint256 Margin needed from buyer (LONG position)\",\"sellerMargin\":\"uint256 Margin needed from seller (SHORT position)\"}},\"getSyntheticIdName()\":{\"returns\":{\"_0\":\"Returns the custom name of a derivative ticker which will be used as part of the name of its positions\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validateInput((uint256,uint256,uint256[],address,address,address))\":{\"params\":{\"_derivative\":\"Derivative Instance of derivative to validate\"},\"returns\":{\"_0\":\"Returns boolean whether ticker is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAuthorAddress()\":{\"notice\":\"Getter for syntheticId author address\"},\"getAuthorCommission()\":{\"notice\":\"Getter for syntheticId author commission\"},\"getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)\":{\"notice\":\"Calculates payout for derivative execution\"},\"getMargin((uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Calculates margin required for derivative creation\"},\"thirdpartyExecutionAllowed(address)\":{\"notice\":\"THIRDPARTY EXECUTION \"},\"validateInput((uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Validates ticker\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/mocks/synthetics/OptionPutPartSyntheticId.sol\":\"OptionPutPartSyntheticId\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IDerivativeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\n\\nimport \\\"../libs/LibDerivative.sol\\\";\\n\\n/// @title Opium.Interface.IDerivativeLogic is an interface that every syntheticId should implement\\ninterface IDerivativeLogic {\\n    // Event with syntheticId metadata JSON string (for DIB.ONE derivative explorer)\\n    event LogMetadataSet(string metadata);\\n\\n    /// @notice Validates ticker\\n    /// @param _derivative Derivative Instance of derivative to validate\\n    /// @return Returns boolean whether ticker is valid\\n    function validateInput(LibDerivative.Derivative memory _derivative) external view returns (bool);\\n\\n    /// @return Returns the custom name of a derivative ticker which will be used as part of the name of its positions\\n    function getSyntheticIdName() external view returns (string memory);\\n\\n    /// @notice Calculates margin required for derivative creation\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @return buyerMargin uint256 Margin needed from buyer (LONG position)\\n    /// @return sellerMargin uint256 Margin needed from seller (SHORT position)\\n    function getMargin(LibDerivative.Derivative memory _derivative)\\n        external\\n        view\\n        returns (uint256 buyerMargin, uint256 sellerMargin);\\n\\n    /// @notice Calculates payout for derivative execution\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @param _result uint256 Data retrieved from oracleId on the maturity\\n    /// @return buyerPayout uint256 Payout in ratio for buyer (LONG position holder)\\n    /// @return sellerPayout uint256 Payout in ratio for seller (SHORT position holder)\\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\\n        external\\n        view\\n        returns (uint256 buyerPayout, uint256 sellerPayout);\\n\\n    /// @notice Returns syntheticId author address for Opium commissions\\n    /// @return authorAddress address The address of syntheticId address\\n    function getAuthorAddress() external view returns (address authorAddress);\\n\\n    /// @notice Returns syntheticId author commission in base of COMMISSION_BASE\\n    /// @return commission uint256 Author commission\\n    function getAuthorCommission() external view returns (uint256 commission);\\n\\n    /// @notice Returns whether thirdparty could execute on derivative's owner's behalf\\n    /// @param _derivativeOwner address Derivative owner address\\n    /// @return Returns boolean whether _derivativeOwner allowed third party execution\\n    function thirdpartyExecutionAllowed(address _derivativeOwner) external view returns (bool);\\n\\n    /// @notice Sets whether thirds parties are allowed or not to execute derivative's on msg.sender's behalf\\n    /// @param _allow bool Flag for execution allowance\\n    function allowThirdpartyExecution(bool _allow) external;\\n}\\n\",\"keccak256\":\"0x5e1d999a6634d35d25faf8a75072fda36c348bac716428d854fcdcee78c69346\",\"license\":\"agpl-3.0\"},\"contracts/libs/LibDerivative.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\n\\n/// @title Opium.Lib.LibDerivative contract should be inherited by contracts that use Derivative structure and calculate derivativeHash\\nlibrary LibDerivative {\\n    enum PositionType {\\n        SHORT,\\n        LONG\\n    }\\n\\n    // Opium derivative structure (ticker) definition\\n    struct Derivative {\\n        // Margin parameter for syntheticId\\n        uint256 margin;\\n        // Maturity of derivative\\n        uint256 endTime;\\n        // Additional parameters for syntheticId\\n        uint256[] params;\\n        // oracleId of derivative\\n        address oracleId;\\n        // Margin token address of derivative\\n        address token;\\n        // syntheticId of derivative\\n        address syntheticId;\\n    }\\n\\n    /// @notice Calculates hash of provided Derivative\\n    /// @param _derivative Derivative Instance of derivative to hash\\n    /// @return derivativeHash bytes32 Derivative hash\\n    function getDerivativeHash(Derivative memory _derivative) internal pure returns (bytes32 derivativeHash) {\\n        derivativeHash = keccak256(\\n            abi.encodePacked(\\n                _derivative.margin,\\n                _derivative.endTime,\\n                _derivative.params,\\n                _derivative.oracleId,\\n                _derivative.token,\\n                _derivative.syntheticId\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8dc20b755b97c78a16d4c51b55efb29b9224e6117c1c8703e1716fd15539f12c\",\"license\":\"agpl-3.0\"},\"contracts/test/mocks/synthetics/OptionPutPartSyntheticId.sol\":{\"content\":\"pragma solidity 0.8.5;\\n\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"../../../interfaces/IDerivativeLogic.sol\\\";\\n\\ncontract OptionPutPartSyntheticId is IDerivativeLogic, Ownable {\\n    address private immutable author;\\n    uint256 private immutable part;\\n\\n    uint256 private constant commission = 25; // 0.25% of profit\\n    uint256 public constant BASE_PPT = 1e18;\\n\\n    constructor(address _author, uint256 _part) {\\n        emit LogMetadataSet(\\n            '{\\\"author\\\":\\\"Opium.Team\\\",\\\"type\\\":\\\"option\\\",\\\"subtype\\\":\\\"put\\\",\\\"description\\\":\\\"Option Put logic contract\\\"}'\\n        );\\n\\n        author = _author;\\n        part = _part;\\n\\n        transferOwnership(_author);\\n    }\\n\\n    // params[0] - Strike price\\n    // params[1] - PPT (Sensitivity)\\n    // params[2] - fixedPremium\\n    function validateInput(LibDerivative.Derivative memory _derivative) public view override returns (bool) {\\n        return (_derivative.endTime > block.timestamp &&\\n            _derivative.margin > 0 &&\\n            _derivative.params.length == 3 &&\\n            _derivative.params[0] > 0 && // Strike price > 0\\n            _derivative.params[1] > 0); // PPT > 0\\n    }\\n\\n    function getMargin(LibDerivative.Derivative memory _derivative)\\n        external\\n        view\\n        override\\n        returns (uint256 buyerMargin, uint256 sellerMargin)\\n    {\\n        uint256 fixedPremium = _derivative.params[2];\\n        buyerMargin = fixedPremium;\\n        uint256 nominal = _derivative.margin;\\n        sellerMargin = (nominal * part) / BASE_PPT;\\n    }\\n\\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\\n        external\\n        view\\n        override\\n        returns (uint256 buyerPayout, uint256 sellerPayout)\\n    {\\n        uint256 strikePrice = _derivative.params[0];\\n        // uint256 ppt = _derivative.params[1];  // Ignore PPT\\n        uint256 fixedPremium = _derivative.params[2];\\n        uint256 nominal = _derivative.margin;\\n        uint256 sellerMargin = (nominal * part) / BASE_PPT;\\n\\n        // If result price is lower than strike price, buyer is paid out\\n        if (_result < strikePrice) {\\n            // buyer payout = margin * (strike price  - result) / strike price\\n            buyerPayout = (nominal * (strikePrice - _result) / strikePrice);\\n\\n            if (buyerPayout > sellerMargin) {\\n                buyerPayout = sellerMargin;\\n            }\\n\\n            // seller payout = margin - buyer payout\\n            sellerPayout = sellerMargin - buyerPayout;\\n        } else {\\n            // buyer payout = 0\\n            buyerPayout = 0;\\n\\n            // seller payout = margin\\n            sellerPayout = sellerMargin;\\n        }\\n\\n        // Add fixed premium to seller payout\\n        sellerPayout = sellerPayout + fixedPremium;\\n    }\\n\\n    /** COMMISSION */\\n    /// @notice Getter for syntheticId author address\\n    /// @return address syntheticId author address\\n    function getAuthorAddress() public view override returns (address) {\\n        return author;\\n    }\\n\\n    /// @notice Getter for syntheticId author commission\\n    /// @return uint26 syntheticId author commission\\n    function getAuthorCommission() public pure override returns (uint256) {\\n        return commission;\\n    }\\n\\n    /// @return Returns the custom name of a derivative ticker which will be used as part of the name of its positions\\n    function getSyntheticIdName() external pure override returns (string memory) {\\n        return \\\"OPT-P\\\";\\n    }\\n\\n    /** THIRDPARTY EXECUTION */\\n    function thirdpartyExecutionAllowed(address derivativeOwner) public pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function allowThirdpartyExecution(bool allow) external override {}\\n}\\n\",\"keccak256\":\"0xc5624e4383ac0c1fe3018d363c71d4015248355b72507c54215044a1dacc7296\"},\"openzeppelin-solidity/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610bde380380610bde83398101604081905261002f9161023c565b6100383361011c565b7f0b11cbc9c1f60ccfdad79229add00f3dfa05137343e96ef525274af03c5d19d06040516100ed9060208082526061908201527f7b22617574686f72223a224f7069756d2e5465616d222c2274797065223a226f60408201527f7074696f6e222c2273756274797065223a22707574222c22646573637269707460608201527f696f6e223a224f7074696f6e20507574206c6f67696320636f6e7472616374226080820152607d60f81b60a082015260c00190565b60405180910390a16001600160601b0319606083901b1660805260a08190526101158261016c565b5050610276565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146101cb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166102305760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c2565b6102398161011c565b50565b6000806040838503121561024f57600080fd5b82516001600160a01b038116811461026657600080fd5b6020939093015192949293505050565b60805160601c60a0516109396102a56000396000818161026501526103e7015260006101ca01526109396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063715018a611610081578063dd0060fd1161005b578063dd0060fd146101ee578063f22430e814610201578063f2fde38b1461021557600080fd5b8063715018a61461019b5780638da5cb5b146101a3578063a4300ee5146101c857600080fd5b80633a84543e116100b25780633a84543e1461013c5780633d6490b81461014d5780635d02f3391461018c57600080fd5b80630433fe45146100d95780630e49dee8146101065780633a6f60a914610119575b600080fd5b6100ec6100e7366004610720565b610228565b604080519283526020830191909152015b60405180910390f35b6101176101143660046106fe565b50565b005b61012c610127366004610720565b61029d565b60405190151581526020016100fd565b60195b6040519081526020016100fd565b604080518082018252600581527f4f50542d50000000000000000000000000000000000000000000000000000000602082015290516100fd91906107a2565b61013f670de0b6b3a764000081565b61011761031d565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100fd565b7f00000000000000000000000000000000000000000000000000000000000000006101b0565b6100ec6101fc36600461075d565b610388565b61012c61020f3660046106dc565b50600190565b6101176102233660046106dc565b61047d565b60008060008360400151600281518110610244576102446108d7565b60209081029190910101518451909350839150670de0b6b3a764000061028a7f00000000000000000000000000000000000000000000000000000000000000008361088b565b6102949190610869565b92505050915091565b60004282602001511180156102b25750815115155b80156102c357508160400151516003145b80156102ed5750600082604001516000815181106102e3576102e36108d7565b6020026020010151115b801561031757506000826040015160018151811061030d5761030d6108d7565b6020026020010151115b92915050565b6000546001600160a01b0316331461037c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103866000610558565b565b600080600084604001516000815181106103a4576103a46108d7565b60200260200101519050600085604001516002815181106103c7576103c76108d7565b602090810291909101015186519091506000670de0b6b3a764000061040c7f00000000000000000000000000000000000000000000000000000000000000008461088b565b6104169190610869565b90508387101561045e578361042b88826108aa565b610435908461088b565b61043f9190610869565b95508086111561044d578095505b61045786826108aa565b9450610466565b600095508094505b6104708386610851565b9450505050509250929050565b6000546001600160a01b031633146104d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610373565b6001600160a01b0381166105535760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610373565b610114815b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146105d757600080fd5b919050565b600060c082840312156105ee57600080fd5b6105f66107f7565b90508135815260208083013581830152604083013567ffffffffffffffff8082111561062157600080fd5b818501915085601f83011261063557600080fd5b813581811115610647576106476108ed565b8060051b9150610658848301610820565b8181528481019084860184860187018a101561067357600080fd5b600095505b83861015610696578035835260019590950194918601918601610678565b508060408801525050505050506106af606083016105c0565b60608201526106c0608083016105c0565b60808201526106d160a083016105c0565b60a082015292915050565b6000602082840312156106ee57600080fd5b6106f7826105c0565b9392505050565b60006020828403121561071057600080fd5b813580151581146106f757600080fd5b60006020828403121561073257600080fd5b813567ffffffffffffffff81111561074957600080fd5b610755848285016105dc565b949350505050565b6000806040838503121561077057600080fd5b823567ffffffffffffffff81111561078757600080fd5b610793858286016105dc565b95602094909401359450505050565b600060208083528351808285015260005b818110156107cf578581018301518582016040015282016107b3565b818111156107e1576000604083870101525b50601f01601f1916929092016040019392505050565b60405160c0810167ffffffffffffffff8111828210171561081a5761081a6108ed565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610849576108496108ed565b604052919050565b60008219821115610864576108646108c1565b500190565b60008261088657634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156108a5576108a56108c1565b500290565b6000828210156108bc576108bc6108c1565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220794e9513a82d8af85e786a6183db5c95c2777b1205dea684db0748310f8ed7c564736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063715018a611610081578063dd0060fd1161005b578063dd0060fd146101ee578063f22430e814610201578063f2fde38b1461021557600080fd5b8063715018a61461019b5780638da5cb5b146101a3578063a4300ee5146101c857600080fd5b80633a84543e116100b25780633a84543e1461013c5780633d6490b81461014d5780635d02f3391461018c57600080fd5b80630433fe45146100d95780630e49dee8146101065780633a6f60a914610119575b600080fd5b6100ec6100e7366004610720565b610228565b604080519283526020830191909152015b60405180910390f35b6101176101143660046106fe565b50565b005b61012c610127366004610720565b61029d565b60405190151581526020016100fd565b60195b6040519081526020016100fd565b604080518082018252600581527f4f50542d50000000000000000000000000000000000000000000000000000000602082015290516100fd91906107a2565b61013f670de0b6b3a764000081565b61011761031d565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100fd565b7f00000000000000000000000000000000000000000000000000000000000000006101b0565b6100ec6101fc36600461075d565b610388565b61012c61020f3660046106dc565b50600190565b6101176102233660046106dc565b61047d565b60008060008360400151600281518110610244576102446108d7565b60209081029190910101518451909350839150670de0b6b3a764000061028a7f00000000000000000000000000000000000000000000000000000000000000008361088b565b6102949190610869565b92505050915091565b60004282602001511180156102b25750815115155b80156102c357508160400151516003145b80156102ed5750600082604001516000815181106102e3576102e36108d7565b6020026020010151115b801561031757506000826040015160018151811061030d5761030d6108d7565b6020026020010151115b92915050565b6000546001600160a01b0316331461037c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103866000610558565b565b600080600084604001516000815181106103a4576103a46108d7565b60200260200101519050600085604001516002815181106103c7576103c76108d7565b602090810291909101015186519091506000670de0b6b3a764000061040c7f00000000000000000000000000000000000000000000000000000000000000008461088b565b6104169190610869565b90508387101561045e578361042b88826108aa565b610435908461088b565b61043f9190610869565b95508086111561044d578095505b61045786826108aa565b9450610466565b600095508094505b6104708386610851565b9450505050509250929050565b6000546001600160a01b031633146104d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610373565b6001600160a01b0381166105535760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610373565b610114815b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146105d757600080fd5b919050565b600060c082840312156105ee57600080fd5b6105f66107f7565b90508135815260208083013581830152604083013567ffffffffffffffff8082111561062157600080fd5b818501915085601f83011261063557600080fd5b813581811115610647576106476108ed565b8060051b9150610658848301610820565b8181528481019084860184860187018a101561067357600080fd5b600095505b83861015610696578035835260019590950194918601918601610678565b508060408801525050505050506106af606083016105c0565b60608201526106c0608083016105c0565b60808201526106d160a083016105c0565b60a082015292915050565b6000602082840312156106ee57600080fd5b6106f7826105c0565b9392505050565b60006020828403121561071057600080fd5b813580151581146106f757600080fd5b60006020828403121561073257600080fd5b813567ffffffffffffffff81111561074957600080fd5b610755848285016105dc565b949350505050565b6000806040838503121561077057600080fd5b823567ffffffffffffffff81111561078757600080fd5b610793858286016105dc565b95602094909401359450505050565b600060208083528351808285015260005b818110156107cf578581018301518582016040015282016107b3565b818111156107e1576000604083870101525b50601f01601f1916929092016040019392505050565b60405160c0810167ffffffffffffffff8111828210171561081a5761081a6108ed565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610849576108496108ed565b604052919050565b60008219821115610864576108646108c1565b500190565b60008261088657634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156108a5576108a56108c1565b500290565b6000828210156108bc576108bc6108c1565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220794e9513a82d8af85e786a6183db5c95c2777b1205dea684db0748310f8ed7c564736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAuthorAddress()": {
        "returns": {
          "_0": "address syntheticId author address"
        }
      },
      "getAuthorCommission()": {
        "returns": {
          "_0": "uint26 syntheticId author commission"
        }
      },
      "getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)": {
        "params": {
          "_derivative": "Derivative Instance of derivative",
          "_result": "uint256 Data retrieved from oracleId on the maturity"
        },
        "returns": {
          "buyerPayout": "uint256 Payout in ratio for buyer (LONG position holder)",
          "sellerPayout": "uint256 Payout in ratio for seller (SHORT position holder)"
        }
      },
      "getMargin((uint256,uint256,uint256[],address,address,address))": {
        "params": {
          "_derivative": "Derivative Instance of derivative"
        },
        "returns": {
          "buyerMargin": "uint256 Margin needed from buyer (LONG position)",
          "sellerMargin": "uint256 Margin needed from seller (SHORT position)"
        }
      },
      "getSyntheticIdName()": {
        "returns": {
          "_0": "Returns the custom name of a derivative ticker which will be used as part of the name of its positions"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validateInput((uint256,uint256,uint256[],address,address,address))": {
        "params": {
          "_derivative": "Derivative Instance of derivative to validate"
        },
        "returns": {
          "_0": "Returns boolean whether ticker is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAuthorAddress()": {
        "notice": "Getter for syntheticId author address"
      },
      "getAuthorCommission()": {
        "notice": "Getter for syntheticId author commission"
      },
      "getExecutionPayout((uint256,uint256,uint256[],address,address,address),uint256)": {
        "notice": "Calculates payout for derivative execution"
      },
      "getMargin((uint256,uint256,uint256[],address,address,address))": {
        "notice": "Calculates margin required for derivative creation"
      },
      "thirdpartyExecutionAllowed(address)": {
        "notice": "THIRDPARTY EXECUTION "
      },
      "validateInput((uint256,uint256,uint256[],address,address,address))": {
        "notice": "Validates ticker"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18938,
        "contract": "contracts/test/mocks/synthetics/OptionPutPartSyntheticId.sol:OptionPutPartSyntheticId",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
