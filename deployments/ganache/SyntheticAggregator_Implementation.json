{
  "address": "0xF4C5DEbE0FdB7BBa3cfbe34055A42AB14aDf9484",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_changer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newRegistryAddress",
          "type": "address"
        }
      ],
      "name": "LogRegistryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "indexed": true,
          "internalType": "struct LibDerivative.Derivative",
          "name": "derivative",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "derivativeHash",
          "type": "bytes32"
        }
      ],
      "name": "LogSyntheticInit",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_derivativeHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        }
      ],
      "name": "getOrCacheMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyerMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellerMargin",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_derivativeHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "margin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "params",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "oracleId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticId",
              "type": "address"
            }
          ],
          "internalType": "struct LibDerivative.Derivative",
          "name": "_derivative",
          "type": "tuple"
        }
      ],
      "name": "getOrCacheSyntheticCache",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "buyerMargin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellerMargin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "authorCommission",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "authorAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "init",
              "type": "bool"
            }
          ],
          "internalType": "struct SyntheticAggregator.SyntheticCache",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x168ffc9ddde05d245f391b1c5b6419bfc24b0056e49c85d0ca8e01acd0a9c25c",
  "receipt": {
    "to": null,
    "from": "0xc188c5Aafaaf847d9D887f80590267F6dc1a1b2f",
    "contractAddress": "0xF4C5DEbE0FdB7BBa3cfbe34055A42AB14aDf9484",
    "transactionIndex": 0,
    "gasUsed": "944085",
    "logsBloom": "0x
    "blockHash": "0xc37719530417c3a8c9087e80199f559d54d5be01e8027ed8746656428899b833",
    "transactionHash": "0x168ffc9ddde05d245f391b1c5b6419bfc24b0056e49c85d0ca8e01acd0a9c25c",
    "logs": [],
    "blockNumber": 12,
    "cumulativeGasUsed": "944085",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "58dbb558cb816b5402f8301bbf18d319",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_changer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newRegistryAddress\",\"type\":\"address\"}],\"name\":\"LogRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"indexed\":true,\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"derivative\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"derivativeHash\",\"type\":\"bytes32\"}],\"name\":\"LogSyntheticInit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_derivativeHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"}],\"name\":\"getOrCacheMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerMargin\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_derivativeHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"}],\"internalType\":\"struct LibDerivative.Derivative\",\"name\":\"_derivative\",\"type\":\"tuple\"}],\"name\":\"getOrCacheSyntheticCache\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"buyerMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"authorCommission\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"authorAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"}],\"internalType\":\"struct SyntheticAggregator.SyntheticCache\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getOrCacheMargin(bytes32,(uint256,uint256,uint256[],address,address,address))\":{\"params\":{\"_derivative\":\"LibDerivative.Derivative itself\",\"_derivativeHash\":\"bytes32 hash of derivative\"},\"returns\":{\"buyerMargin\":\"uint256 Margin of buyer\",\"sellerMargin\":\"uint256 Margin of seller\"}},\"getOrCacheSyntheticCache(bytes32,(uint256,uint256,uint256[],address,address,address))\":{\"params\":{\"_derivative\":\"LibDerivative.Derivative itself\",\"_derivativeHash\":\"bytes32 hash of derivative\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getOrCacheMargin(bytes32,(uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Initializes ticker, if was not initialized and returns buyer and seller margin from cache\"},\"getOrCacheSyntheticCache(bytes32,(uint256,uint256,uint256[],address,address,address))\":{\"notice\":\"Initializes ticker if not previously initialized and returns the cached `syntheticId` data\"}},\"notice\":\"Opium.SyntheticAggregator contract initialized, identifies and caches syntheticId sensitive data\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SyntheticAggregator.sol\":\"SyntheticAggregator\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"contracts/core/SyntheticAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./base/RegistryManager.sol\\\";\\nimport \\\"../interfaces/IDerivativeLogic.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../libs/LibDerivative.sol\\\";\\n\\n/**\\n    Error codes:\\n    - S1 = ERROR_SYNTHETIC_AGGREGATOR_DERIVATIVE_HASH_NOT_MATCH\\n    - S2 = ERROR_SYNTHETIC_AGGREGATOR_WRONG_MARGIN\\n    - S3 = ERROR_SYNTHETIC_AGGREGATOR_COMMISSION_TOO_BIG\\n */\\n\\n/// @notice Opium.SyntheticAggregator contract initialized, identifies and caches syntheticId sensitive data\\ncontract SyntheticAggregator is ReentrancyGuardUpgradeable, RegistryManager {\\n    using LibDerivative for LibDerivative.Derivative;\\n\\n    // Emitted when new ticker is initialized\\n    event LogSyntheticInit(LibDerivative.Derivative indexed derivative, bytes32 indexed derivativeHash);\\n\\n    struct SyntheticCache {\\n        uint256 buyerMargin;\\n        uint256 sellerMargin;\\n        uint256 authorCommission;\\n        address authorAddress;\\n        bool init;\\n    }\\n    mapping(bytes32 => SyntheticCache) private syntheticCaches;\\n\\n    // ****************** EXTERNAL FUNCTIONS ******************\\n\\n    function initialize(address _registry) external initializer {\\n        __RegistryManager__init(_registry);\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /// @notice Initializes ticker, if was not initialized and returns buyer and seller margin from cache\\n    /// @param _derivativeHash bytes32 hash of derivative\\n    /// @param _derivative LibDerivative.Derivative itself\\n    /// @return buyerMargin uint256 Margin of buyer\\n    /// @return sellerMargin uint256 Margin of seller\\n    function getOrCacheMargin(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (uint256 buyerMargin, uint256 sellerMargin)\\n    {\\n        // Initialize derivative if wasn't initialized before\\n        if (!syntheticCaches[_derivativeHash].init) {\\n            _initDerivative(_derivativeHash, _derivative);\\n        }\\n        return (syntheticCaches[_derivativeHash].buyerMargin, syntheticCaches[_derivativeHash].sellerMargin);\\n    }\\n\\n    /// @notice Initializes ticker if not previously initialized and returns the cached `syntheticId` data\\n    /// @param _derivativeHash bytes32 hash of derivative\\n    /// @param _derivative LibDerivative.Derivative itself\\n    function getOrCacheSyntheticCache(bytes32 _derivativeHash, LibDerivative.Derivative calldata _derivative)\\n        external\\n        returns (SyntheticCache memory)\\n    {\\n        // Initialize derivative if wasn't initialized before\\n        if (!syntheticCaches[_derivativeHash].init) {\\n            _initDerivative(_derivativeHash, _derivative);\\n        }\\n        return syntheticCaches[_derivativeHash];\\n    }\\n\\n    // ****************** PRIVATE FUNCTIONS ******************\\n\\n    /// @notice Initializes ticker: caches syntheticId type, margin, author address and commission\\n    /// @param _derivativeHash bytes32 Hash of derivative\\n    /// @param _derivative Derivative Derivative itself\\n    function _initDerivative(bytes32 _derivativeHash, LibDerivative.Derivative memory _derivative)\\n        private\\n        nonReentrant\\n    {\\n        // For security reasons we calculate hash of provided _derivative\\n        bytes32 derivativeHash = _derivative.getDerivativeHash();\\n        require(derivativeHash == _derivativeHash, \\\"S1\\\");\\n\\n        // Get margin from SyntheticId\\n        (uint256 buyerMargin, uint256 sellerMargin) = IDerivativeLogic(_derivative.syntheticId).getMargin(_derivative);\\n        // We are not allowing both margins to be equal to 0\\n        require(buyerMargin != 0 || sellerMargin != 0, \\\"S2\\\");\\n\\n        // AUTHOR COMMISSION\\n        // Get commission from syntheticId\\n        uint256 authorCommission = IDerivativeLogic(_derivative.syntheticId).getAuthorCommission();\\n        RegistryEntities.ProtocolParametersArgs memory protocolParametersArgs = registry.getProtocolParameters();\\n        // Check if commission is not greater than the max cap set in the Registry by the governance\\n        require(authorCommission <= protocolParametersArgs.derivativeAuthorExecutionFeeCap, \\\"S3\\\");\\n        // Cache values by derivative hash\\n        syntheticCaches[derivativeHash] = SyntheticCache({\\n            buyerMargin: buyerMargin,\\n            sellerMargin: sellerMargin,\\n            authorCommission: authorCommission,\\n            authorAddress: IDerivativeLogic(_derivative.syntheticId).getAuthorAddress(),\\n            init: true\\n        });\\n\\n        // Emits an event upon initialization of a derivative recipe (so only once during its lifecycle)\\n        emit LogSyntheticInit(_derivative, derivativeHash);\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc6cf14936a6ee58cdd4870331e879c1a744e9dc5a6325e32ff05b7c545cfb843\",\"license\":\"agpl-3.0\"},\"contracts/core/base/RegistryManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/IRegistry.sol\\\";\\n\\n/**\\n    Error codes:\\n    - M1 = ERROR_REGISTRY_MANAGER_ONLY_REGISTRY_MANAGER_ROLE\\n    - M2 = ERROR_REGISTRY_MANAGER_ONLY_CORE_CONFIGURATION_UPDATER_ROLE\\n */\\ncontract RegistryManager is Initializable {\\n    event LogRegistryChanged(address indexed _changer, address indexed _newRegistryAddress);\\n\\n    IRegistry internal registry;\\n\\n    modifier onlyRegistryManager() {\\n        require(registry.isRegistryManager(msg.sender), \\\"M1\\\");\\n        _;\\n    }\\n\\n    modifier onlyCoreConfigurationUpdater() {\\n        require(registry.isCoreConfigurationUpdater(msg.sender), \\\"M2\\\");\\n        _;\\n    }\\n\\n    function __RegistryManager__init(address _registry) internal initializer {\\n        require(_registry != address(0));\\n        registry = IRegistry(_registry);\\n        emit LogRegistryChanged(msg.sender, _registry);\\n    }\\n\\n    function setRegistry(address _registry) external onlyRegistryManager {\\n        registry = IRegistry(_registry);\\n        emit LogRegistryChanged(msg.sender, _registry);\\n    }\\n\\n    function getRegistry() external view returns (address) {\\n        return address(registry);\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x833c441b429a02aace4a1e719690dc94272dc82ae7efecac309aaf169b66f6c1\",\"license\":\"agpl-3.0\"},\"contracts/core/registry/RegistryEntities.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\n\\nlibrary RegistryEntities {\\n    struct ProtocolParametersArgs {\\n        // Period of time after which ticker could be canceled if no data was provided to the `oracleId`\\n        uint32 noDataCancellationPeriod;\\n        // Max fee that derivative author can set\\n        // it works as an upper bound for when the derivative authors set their synthetic's fee\\n        uint32 derivativeAuthorExecutionFeeCap;\\n        // Fixed part (percentage) that the derivative author receives for each redemption of market neutral positions\\n        // It is not set by the derivative authors themselves\\n        uint32 derivativeAuthorRedemptionReservePart;\\n        // Represents which part of derivative author reserves originated from derivative executions go to the protocol reserves\\n        uint32 protocolExecutionReservePart;\\n        // Represents which part of derivative author reserves originated from redemption of market neutral positions go to the protocol reserves\\n        uint32 protocolRedemptionReservePart;\\n        /// Initially uninitialized variables to allow some flexibility in case of future changes and upgradeability\\n        uint32 __gapOne;\\n        uint32 __gapTwo;\\n        uint32 __gapThree;\\n    }\\n\\n    struct ProtocolAddressesArgs {\\n        // Address of Opium.Core contract\\n        address core;\\n        // Address of Opium.OpiumProxyFactory contract\\n        address opiumProxyFactory;\\n        // Address of Opium.OracleAggregator contract\\n        address oracleAggregator;\\n        // Address of Opium.SyntheticAggregator contract\\n        address syntheticAggregator;\\n        // Address of Opium.TokenSpender contract\\n        address tokenSpender;\\n        // Address of the recipient of execution protocol reserves\\n        address protocolExecutionReserveClaimer;\\n        // Address of the recipient of redemption protocol reserves\\n        address protocolRedemptionReserveClaimer;\\n        /// Initially uninitialized variables to allow some flexibility in case of future changes and upgradeability\\n        uint32 __gapOne;\\n        uint32 __gapTwo;\\n    }\\n\\n    struct ProtocolPausabilityArgs {\\n        // if true, all the protocol's entry-points are paused\\n        bool protocolGlobal;\\n        // if true, no new positions can be created\\n        bool protocolPositionCreation;\\n        // if true, no new positions can be minted\\n        bool protocolPositionMinting;\\n        // if true, no new positions can be redeemed\\n        bool protocolPositionRedemption;\\n        // if true, no new positions can be executed\\n        bool protocolPositionExecution;\\n        // if true, no new positions can be cancelled\\n        bool protocolPositionCancellation;\\n        // if true, no reserves can be claimed\\n        bool protocolReserveClaim;\\n        /// Initially uninitialized variables to allow some flexibility in case of future changes and upgradeability\\n        bool __gapOne;\\n        bool __gapTwo;\\n        bool __gapThree;\\n        bool __gapFour;\\n    }\\n}\\n\",\"keccak256\":\"0x99e5b1a0e7a8911bc02947562556dc8476bb8c3c7061e66c2a24c8cf1d80b992\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IDerivativeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\n\\nimport \\\"../libs/LibDerivative.sol\\\";\\n\\n/// @title Opium.Interface.IDerivativeLogic is an interface that every syntheticId should implement\\ninterface IDerivativeLogic {\\n    // Event with syntheticId metadata JSON string (for DIB.ONE derivative explorer)\\n    event LogMetadataSet(string metadata);\\n\\n    /// @notice Validates ticker\\n    /// @param _derivative Derivative Instance of derivative to validate\\n    /// @return Returns boolean whether ticker is valid\\n    function validateInput(LibDerivative.Derivative memory _derivative) external view returns (bool);\\n\\n    /// @return Returns the custom name of a derivative ticker which will be used as part of the name of its positions\\n    function getSyntheticIdName() external view returns (string memory);\\n\\n    /// @notice Calculates margin required for derivative creation\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @return buyerMargin uint256 Margin needed from buyer (LONG position)\\n    /// @return sellerMargin uint256 Margin needed from seller (SHORT position)\\n    function getMargin(LibDerivative.Derivative memory _derivative)\\n        external\\n        view\\n        returns (uint256 buyerMargin, uint256 sellerMargin);\\n\\n    /// @notice Calculates payout for derivative execution\\n    /// @param _derivative Derivative Instance of derivative\\n    /// @param _result uint256 Data retrieved from oracleId on the maturity\\n    /// @return buyerPayout uint256 Payout in ratio for buyer (LONG position holder)\\n    /// @return sellerPayout uint256 Payout in ratio for seller (SHORT position holder)\\n    function getExecutionPayout(LibDerivative.Derivative memory _derivative, uint256 _result)\\n        external\\n        view\\n        returns (uint256 buyerPayout, uint256 sellerPayout);\\n\\n    /// @notice Returns syntheticId author address for Opium commissions\\n    /// @return authorAddress address The address of syntheticId address\\n    function getAuthorAddress() external view returns (address authorAddress);\\n\\n    /// @notice Returns syntheticId author commission in base of COMMISSION_BASE\\n    /// @return commission uint256 Author commission\\n    function getAuthorCommission() external view returns (uint256 commission);\\n\\n    /// @notice Returns whether thirdparty could execute on derivative's owner's behalf\\n    /// @param _derivativeOwner address Derivative owner address\\n    /// @return Returns boolean whether _derivativeOwner allowed third party execution\\n    function thirdpartyExecutionAllowed(address _derivativeOwner) external view returns (bool);\\n\\n    /// @notice Sets whether thirds parties are allowed or not to execute derivative's on msg.sender's behalf\\n    /// @param _allow bool Flag for execution allowance\\n    function allowThirdpartyExecution(bool _allow) external;\\n}\\n\",\"keccak256\":\"0x5e1d999a6634d35d25faf8a75072fda36c348bac716428d854fcdcee78c69346\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\nimport \\\"../core/registry/RegistryEntities.sol\\\";\\n\\ninterface IRegistry {\\n    function initialize(address _governor) external;\\n\\n    function setProtocolAddresses(\\n        address _opiumProxyFactory,\\n        address _core,\\n        address _oracleAggregator,\\n        address _syntheticAggregator,\\n        address _tokenSpender\\n    ) external;\\n\\n    function setNoDataCancellationPeriod(uint32 _noDataCancellationPeriod) external;\\n\\n    function addToWhitelist(address _whitelisted) external;\\n\\n    function removeFromWhitelist(address _whitelisted) external;\\n\\n    function setProtocolExecutionReserveClaimer(address _protocolExecutionReserveClaimer) external;\\n\\n    function setProtocolRedemptionReserveClaimer(address _protocolRedemptionReserveClaimer) external;\\n\\n    function setProtocolExecutionReservePart(uint32 _protocolExecutionReservePart) external;\\n\\n    function setDerivativeAuthorExecutionFeeCap(uint32 _derivativeAuthorExecutionFeeCap) external;\\n\\n    function setProtocolRedemptionReservePart(uint32 _protocolRedemptionReservePart) external;\\n\\n    function setDerivativeAuthorRedemptionReservePart(uint32 _derivativeAuthorRedemptionReservePart) external;\\n\\n    function pause() external;\\n\\n    function pauseProtocolPositionCreation() external;\\n\\n    function pauseProtocolPositionMinting() external;\\n\\n    function pauseProtocolPositionRedemption() external;\\n\\n    function pauseProtocolPositionExecution() external;\\n\\n    function pauseProtocolPositionCancellation() external;\\n\\n    function pauseProtocolReserveClaim() external;\\n\\n    function unpause() external;\\n\\n    function getProtocolParameters() external view returns (RegistryEntities.ProtocolParametersArgs memory);\\n\\n    function getProtocolAddresses() external view returns (RegistryEntities.ProtocolAddressesArgs memory);\\n\\n    function isRegistryManager(address _address) external view returns (bool);\\n\\n    function isCoreConfigurationUpdater(address _address) external view returns (bool);\\n\\n    function getCore() external view returns (address);\\n\\n    function isCoreSpenderWhitelisted(address _address) external view returns (bool);\\n\\n    function isProtocolPaused() external view returns (bool);\\n\\n    function isProtocolPositionCreationPaused() external view returns (bool);\\n\\n    function isProtocolPositionMintingPaused() external view returns (bool);\\n\\n    function isProtocolPositionRedemptionPaused() external view returns (bool);\\n\\n    function isProtocolPositionExecutionPaused() external view returns (bool);\\n\\n    function isProtocolPositionCancellationPaused() external view returns (bool);\\n\\n    function isProtocolReserveClaimPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8281bf2dfcc32b5dde8c2dcfc225fdd422960c915563c4ba90280483b018a177\",\"license\":\"agpl-3.0\"},\"contracts/libs/LibDerivative.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.5;\\n\\n/// @title Opium.Lib.LibDerivative contract should be inherited by contracts that use Derivative structure and calculate derivativeHash\\nlibrary LibDerivative {\\n    enum PositionType {\\n        SHORT,\\n        LONG\\n    }\\n\\n    // Opium derivative structure (ticker) definition\\n    struct Derivative {\\n        // Margin parameter for syntheticId\\n        uint256 margin;\\n        // Maturity of derivative\\n        uint256 endTime;\\n        // Additional parameters for syntheticId\\n        uint256[] params;\\n        // oracleId of derivative\\n        address oracleId;\\n        // Margin token address of derivative\\n        address token;\\n        // syntheticId of derivative\\n        address syntheticId;\\n    }\\n\\n    /// @notice Calculates hash of provided Derivative\\n    /// @param _derivative Derivative Instance of derivative to hash\\n    /// @return derivativeHash bytes32 Derivative hash\\n    function getDerivativeHash(Derivative memory _derivative) internal pure returns (bytes32 derivativeHash) {\\n        derivativeHash = keccak256(\\n            abi.encodePacked(\\n                _derivative.margin,\\n                _derivative.endTime,\\n                _derivative.params,\\n                _derivative.oracleId,\\n                _derivative.token,\\n                _derivative.syntheticId\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8dc20b755b97c78a16d4c51b55efb29b9224e6117c1c8703e1716fd15539f12c\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getOrCacheMargin(bytes32,(uint256,uint256,uint256[],address,address,address))": {
        "params": {
          "_derivative": "LibDerivative.Derivative itself",
          "_derivativeHash": "bytes32 hash of derivative"
        },
        "returns": {
          "buyerMargin": "uint256 Margin of buyer",
          "sellerMargin": "uint256 Margin of seller"
        }
      },
      "getOrCacheSyntheticCache(bytes32,(uint256,uint256,uint256[],address,address,address))": {
        "params": {
          "_derivative": "LibDerivative.Derivative itself",
          "_derivativeHash": "bytes32 hash of derivative"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getOrCacheMargin(bytes32,(uint256,uint256,uint256[],address,address,address))": {
        "notice": "Initializes ticker, if was not initialized and returns buyer and seller margin from cache"
      },
      "getOrCacheSyntheticCache(bytes32,(uint256,uint256,uint256[],address,address,address))": {
        "notice": "Initializes ticker if not previously initialized and returns the cached `syntheticId` data"
      }
    },
    "notice": "Opium.SyntheticAggregator contract initialized, identifies and caches syntheticId sensitive data",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 542,
        "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 593,
        "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 636,
        "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5809,
        "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
        "label": "registry",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IRegistry)8116"
      },
      {
        "astId": 5899,
        "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5544,
        "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
        "label": "syntheticCaches",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_bytes32,t_struct(SyntheticCache)5539_storage)"
      },
      {
        "astId": 5724,
        "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRegistry)8116": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(SyntheticCache)5539_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SyntheticAggregator.SyntheticCache)",
        "numberOfBytes": "32",
        "value": "t_struct(SyntheticCache)5539_storage"
      },
      "t_struct(SyntheticCache)5539_storage": {
        "encoding": "inplace",
        "label": "struct SyntheticAggregator.SyntheticCache",
        "members": [
          {
            "astId": 5530,
            "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
            "label": "buyerMargin",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5532,
            "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
            "label": "sellerMargin",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5534,
            "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
            "label": "authorCommission",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5536,
            "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
            "label": "authorAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5538,
            "contract": "contracts/core/SyntheticAggregator.sol:SyntheticAggregator",
            "label": "init",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
